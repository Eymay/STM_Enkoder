
STM32F4_HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc10  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b18  0800bd98  0800bd98  0001bd98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c8b0  0800c8b0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800c8b0  0800c8b0  0001c8b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c8b8  0800c8b8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800c8b8  0800c8b8  0001c8b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c8c0  0800c8c0  0001c8c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800c8c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00002e3c  20000078  20000078  00020078  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20002eb4  20002eb4  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018082  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029f8  00000000  00000000  00038126  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010c8  00000000  00000000  0003ab20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001008  00000000  00000000  0003bbe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023031  00000000  00000000  0003cbf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012adb  00000000  00000000  0005fc21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d44b8  00000000  00000000  000726fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00146bb4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000052b4  00000000  00000000  00146c04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000078 	.word	0x20000078
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800bd80 	.word	0x0800bd80

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000007c 	.word	0x2000007c
 80001c4:	0800bd80 	.word	0x0800bd80

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2f>:
 8000ad4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000adc:	bf24      	itt	cs
 8000ade:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ae2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ae6:	d90d      	bls.n	8000b04 <__aeabi_d2f+0x30>
 8000ae8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000af4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000af8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000afc:	bf08      	it	eq
 8000afe:	f020 0001 	biceq.w	r0, r0, #1
 8000b02:	4770      	bx	lr
 8000b04:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b08:	d121      	bne.n	8000b4e <__aeabi_d2f+0x7a>
 8000b0a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b0e:	bfbc      	itt	lt
 8000b10:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b14:	4770      	bxlt	lr
 8000b16:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b1a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b1e:	f1c2 0218 	rsb	r2, r2, #24
 8000b22:	f1c2 0c20 	rsb	ip, r2, #32
 8000b26:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b2a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b2e:	bf18      	it	ne
 8000b30:	f040 0001 	orrne.w	r0, r0, #1
 8000b34:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b38:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b3c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b40:	ea40 000c 	orr.w	r0, r0, ip
 8000b44:	fa23 f302 	lsr.w	r3, r3, r2
 8000b48:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b4c:	e7cc      	b.n	8000ae8 <__aeabi_d2f+0x14>
 8000b4e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b52:	d107      	bne.n	8000b64 <__aeabi_d2f+0x90>
 8000b54:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b58:	bf1e      	ittt	ne
 8000b5a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b5e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b62:	4770      	bxne	lr
 8000b64:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b68:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop

08000b74 <__aeabi_uldivmod>:
 8000b74:	b953      	cbnz	r3, 8000b8c <__aeabi_uldivmod+0x18>
 8000b76:	b94a      	cbnz	r2, 8000b8c <__aeabi_uldivmod+0x18>
 8000b78:	2900      	cmp	r1, #0
 8000b7a:	bf08      	it	eq
 8000b7c:	2800      	cmpeq	r0, #0
 8000b7e:	bf1c      	itt	ne
 8000b80:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b84:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b88:	f000 b974 	b.w	8000e74 <__aeabi_idiv0>
 8000b8c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b90:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b94:	f000 f806 	bl	8000ba4 <__udivmoddi4>
 8000b98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba0:	b004      	add	sp, #16
 8000ba2:	4770      	bx	lr

08000ba4 <__udivmoddi4>:
 8000ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba8:	9d08      	ldr	r5, [sp, #32]
 8000baa:	4604      	mov	r4, r0
 8000bac:	468e      	mov	lr, r1
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d14d      	bne.n	8000c4e <__udivmoddi4+0xaa>
 8000bb2:	428a      	cmp	r2, r1
 8000bb4:	4694      	mov	ip, r2
 8000bb6:	d969      	bls.n	8000c8c <__udivmoddi4+0xe8>
 8000bb8:	fab2 f282 	clz	r2, r2
 8000bbc:	b152      	cbz	r2, 8000bd4 <__udivmoddi4+0x30>
 8000bbe:	fa01 f302 	lsl.w	r3, r1, r2
 8000bc2:	f1c2 0120 	rsb	r1, r2, #32
 8000bc6:	fa20 f101 	lsr.w	r1, r0, r1
 8000bca:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bce:	ea41 0e03 	orr.w	lr, r1, r3
 8000bd2:	4094      	lsls	r4, r2
 8000bd4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bd8:	0c21      	lsrs	r1, r4, #16
 8000bda:	fbbe f6f8 	udiv	r6, lr, r8
 8000bde:	fa1f f78c 	uxth.w	r7, ip
 8000be2:	fb08 e316 	mls	r3, r8, r6, lr
 8000be6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bea:	fb06 f107 	mul.w	r1, r6, r7
 8000bee:	4299      	cmp	r1, r3
 8000bf0:	d90a      	bls.n	8000c08 <__udivmoddi4+0x64>
 8000bf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bf6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000bfa:	f080 811f 	bcs.w	8000e3c <__udivmoddi4+0x298>
 8000bfe:	4299      	cmp	r1, r3
 8000c00:	f240 811c 	bls.w	8000e3c <__udivmoddi4+0x298>
 8000c04:	3e02      	subs	r6, #2
 8000c06:	4463      	add	r3, ip
 8000c08:	1a5b      	subs	r3, r3, r1
 8000c0a:	b2a4      	uxth	r4, r4
 8000c0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c10:	fb08 3310 	mls	r3, r8, r0, r3
 8000c14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c18:	fb00 f707 	mul.w	r7, r0, r7
 8000c1c:	42a7      	cmp	r7, r4
 8000c1e:	d90a      	bls.n	8000c36 <__udivmoddi4+0x92>
 8000c20:	eb1c 0404 	adds.w	r4, ip, r4
 8000c24:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c28:	f080 810a 	bcs.w	8000e40 <__udivmoddi4+0x29c>
 8000c2c:	42a7      	cmp	r7, r4
 8000c2e:	f240 8107 	bls.w	8000e40 <__udivmoddi4+0x29c>
 8000c32:	4464      	add	r4, ip
 8000c34:	3802      	subs	r0, #2
 8000c36:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c3a:	1be4      	subs	r4, r4, r7
 8000c3c:	2600      	movs	r6, #0
 8000c3e:	b11d      	cbz	r5, 8000c48 <__udivmoddi4+0xa4>
 8000c40:	40d4      	lsrs	r4, r2
 8000c42:	2300      	movs	r3, #0
 8000c44:	e9c5 4300 	strd	r4, r3, [r5]
 8000c48:	4631      	mov	r1, r6
 8000c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4e:	428b      	cmp	r3, r1
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0xc2>
 8000c52:	2d00      	cmp	r5, #0
 8000c54:	f000 80ef 	beq.w	8000e36 <__udivmoddi4+0x292>
 8000c58:	2600      	movs	r6, #0
 8000c5a:	e9c5 0100 	strd	r0, r1, [r5]
 8000c5e:	4630      	mov	r0, r6
 8000c60:	4631      	mov	r1, r6
 8000c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c66:	fab3 f683 	clz	r6, r3
 8000c6a:	2e00      	cmp	r6, #0
 8000c6c:	d14a      	bne.n	8000d04 <__udivmoddi4+0x160>
 8000c6e:	428b      	cmp	r3, r1
 8000c70:	d302      	bcc.n	8000c78 <__udivmoddi4+0xd4>
 8000c72:	4282      	cmp	r2, r0
 8000c74:	f200 80f9 	bhi.w	8000e6a <__udivmoddi4+0x2c6>
 8000c78:	1a84      	subs	r4, r0, r2
 8000c7a:	eb61 0303 	sbc.w	r3, r1, r3
 8000c7e:	2001      	movs	r0, #1
 8000c80:	469e      	mov	lr, r3
 8000c82:	2d00      	cmp	r5, #0
 8000c84:	d0e0      	beq.n	8000c48 <__udivmoddi4+0xa4>
 8000c86:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c8a:	e7dd      	b.n	8000c48 <__udivmoddi4+0xa4>
 8000c8c:	b902      	cbnz	r2, 8000c90 <__udivmoddi4+0xec>
 8000c8e:	deff      	udf	#255	; 0xff
 8000c90:	fab2 f282 	clz	r2, r2
 8000c94:	2a00      	cmp	r2, #0
 8000c96:	f040 8092 	bne.w	8000dbe <__udivmoddi4+0x21a>
 8000c9a:	eba1 010c 	sub.w	r1, r1, ip
 8000c9e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ca2:	fa1f fe8c 	uxth.w	lr, ip
 8000ca6:	2601      	movs	r6, #1
 8000ca8:	0c20      	lsrs	r0, r4, #16
 8000caa:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cae:	fb07 1113 	mls	r1, r7, r3, r1
 8000cb2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cb6:	fb0e f003 	mul.w	r0, lr, r3
 8000cba:	4288      	cmp	r0, r1
 8000cbc:	d908      	bls.n	8000cd0 <__udivmoddi4+0x12c>
 8000cbe:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc2:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000cc6:	d202      	bcs.n	8000cce <__udivmoddi4+0x12a>
 8000cc8:	4288      	cmp	r0, r1
 8000cca:	f200 80cb 	bhi.w	8000e64 <__udivmoddi4+0x2c0>
 8000cce:	4643      	mov	r3, r8
 8000cd0:	1a09      	subs	r1, r1, r0
 8000cd2:	b2a4      	uxth	r4, r4
 8000cd4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cd8:	fb07 1110 	mls	r1, r7, r0, r1
 8000cdc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ce0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ce4:	45a6      	cmp	lr, r4
 8000ce6:	d908      	bls.n	8000cfa <__udivmoddi4+0x156>
 8000ce8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cec:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000cf0:	d202      	bcs.n	8000cf8 <__udivmoddi4+0x154>
 8000cf2:	45a6      	cmp	lr, r4
 8000cf4:	f200 80bb 	bhi.w	8000e6e <__udivmoddi4+0x2ca>
 8000cf8:	4608      	mov	r0, r1
 8000cfa:	eba4 040e 	sub.w	r4, r4, lr
 8000cfe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d02:	e79c      	b.n	8000c3e <__udivmoddi4+0x9a>
 8000d04:	f1c6 0720 	rsb	r7, r6, #32
 8000d08:	40b3      	lsls	r3, r6
 8000d0a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d0e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d12:	fa20 f407 	lsr.w	r4, r0, r7
 8000d16:	fa01 f306 	lsl.w	r3, r1, r6
 8000d1a:	431c      	orrs	r4, r3
 8000d1c:	40f9      	lsrs	r1, r7
 8000d1e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d22:	fa00 f306 	lsl.w	r3, r0, r6
 8000d26:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d2a:	0c20      	lsrs	r0, r4, #16
 8000d2c:	fa1f fe8c 	uxth.w	lr, ip
 8000d30:	fb09 1118 	mls	r1, r9, r8, r1
 8000d34:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d38:	fb08 f00e 	mul.w	r0, r8, lr
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	fa02 f206 	lsl.w	r2, r2, r6
 8000d42:	d90b      	bls.n	8000d5c <__udivmoddi4+0x1b8>
 8000d44:	eb1c 0101 	adds.w	r1, ip, r1
 8000d48:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d4c:	f080 8088 	bcs.w	8000e60 <__udivmoddi4+0x2bc>
 8000d50:	4288      	cmp	r0, r1
 8000d52:	f240 8085 	bls.w	8000e60 <__udivmoddi4+0x2bc>
 8000d56:	f1a8 0802 	sub.w	r8, r8, #2
 8000d5a:	4461      	add	r1, ip
 8000d5c:	1a09      	subs	r1, r1, r0
 8000d5e:	b2a4      	uxth	r4, r4
 8000d60:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d64:	fb09 1110 	mls	r1, r9, r0, r1
 8000d68:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d6c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d70:	458e      	cmp	lr, r1
 8000d72:	d908      	bls.n	8000d86 <__udivmoddi4+0x1e2>
 8000d74:	eb1c 0101 	adds.w	r1, ip, r1
 8000d78:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000d7c:	d26c      	bcs.n	8000e58 <__udivmoddi4+0x2b4>
 8000d7e:	458e      	cmp	lr, r1
 8000d80:	d96a      	bls.n	8000e58 <__udivmoddi4+0x2b4>
 8000d82:	3802      	subs	r0, #2
 8000d84:	4461      	add	r1, ip
 8000d86:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d8a:	fba0 9402 	umull	r9, r4, r0, r2
 8000d8e:	eba1 010e 	sub.w	r1, r1, lr
 8000d92:	42a1      	cmp	r1, r4
 8000d94:	46c8      	mov	r8, r9
 8000d96:	46a6      	mov	lr, r4
 8000d98:	d356      	bcc.n	8000e48 <__udivmoddi4+0x2a4>
 8000d9a:	d053      	beq.n	8000e44 <__udivmoddi4+0x2a0>
 8000d9c:	b15d      	cbz	r5, 8000db6 <__udivmoddi4+0x212>
 8000d9e:	ebb3 0208 	subs.w	r2, r3, r8
 8000da2:	eb61 010e 	sbc.w	r1, r1, lr
 8000da6:	fa01 f707 	lsl.w	r7, r1, r7
 8000daa:	fa22 f306 	lsr.w	r3, r2, r6
 8000dae:	40f1      	lsrs	r1, r6
 8000db0:	431f      	orrs	r7, r3
 8000db2:	e9c5 7100 	strd	r7, r1, [r5]
 8000db6:	2600      	movs	r6, #0
 8000db8:	4631      	mov	r1, r6
 8000dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dbe:	f1c2 0320 	rsb	r3, r2, #32
 8000dc2:	40d8      	lsrs	r0, r3
 8000dc4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dc8:	fa21 f303 	lsr.w	r3, r1, r3
 8000dcc:	4091      	lsls	r1, r2
 8000dce:	4301      	orrs	r1, r0
 8000dd0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dd4:	fa1f fe8c 	uxth.w	lr, ip
 8000dd8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ddc:	fb07 3610 	mls	r6, r7, r0, r3
 8000de0:	0c0b      	lsrs	r3, r1, #16
 8000de2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000de6:	fb00 f60e 	mul.w	r6, r0, lr
 8000dea:	429e      	cmp	r6, r3
 8000dec:	fa04 f402 	lsl.w	r4, r4, r2
 8000df0:	d908      	bls.n	8000e04 <__udivmoddi4+0x260>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000dfa:	d22f      	bcs.n	8000e5c <__udivmoddi4+0x2b8>
 8000dfc:	429e      	cmp	r6, r3
 8000dfe:	d92d      	bls.n	8000e5c <__udivmoddi4+0x2b8>
 8000e00:	3802      	subs	r0, #2
 8000e02:	4463      	add	r3, ip
 8000e04:	1b9b      	subs	r3, r3, r6
 8000e06:	b289      	uxth	r1, r1
 8000e08:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e0c:	fb07 3316 	mls	r3, r7, r6, r3
 8000e10:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e14:	fb06 f30e 	mul.w	r3, r6, lr
 8000e18:	428b      	cmp	r3, r1
 8000e1a:	d908      	bls.n	8000e2e <__udivmoddi4+0x28a>
 8000e1c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e20:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e24:	d216      	bcs.n	8000e54 <__udivmoddi4+0x2b0>
 8000e26:	428b      	cmp	r3, r1
 8000e28:	d914      	bls.n	8000e54 <__udivmoddi4+0x2b0>
 8000e2a:	3e02      	subs	r6, #2
 8000e2c:	4461      	add	r1, ip
 8000e2e:	1ac9      	subs	r1, r1, r3
 8000e30:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e34:	e738      	b.n	8000ca8 <__udivmoddi4+0x104>
 8000e36:	462e      	mov	r6, r5
 8000e38:	4628      	mov	r0, r5
 8000e3a:	e705      	b.n	8000c48 <__udivmoddi4+0xa4>
 8000e3c:	4606      	mov	r6, r0
 8000e3e:	e6e3      	b.n	8000c08 <__udivmoddi4+0x64>
 8000e40:	4618      	mov	r0, r3
 8000e42:	e6f8      	b.n	8000c36 <__udivmoddi4+0x92>
 8000e44:	454b      	cmp	r3, r9
 8000e46:	d2a9      	bcs.n	8000d9c <__udivmoddi4+0x1f8>
 8000e48:	ebb9 0802 	subs.w	r8, r9, r2
 8000e4c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e50:	3801      	subs	r0, #1
 8000e52:	e7a3      	b.n	8000d9c <__udivmoddi4+0x1f8>
 8000e54:	4646      	mov	r6, r8
 8000e56:	e7ea      	b.n	8000e2e <__udivmoddi4+0x28a>
 8000e58:	4620      	mov	r0, r4
 8000e5a:	e794      	b.n	8000d86 <__udivmoddi4+0x1e2>
 8000e5c:	4640      	mov	r0, r8
 8000e5e:	e7d1      	b.n	8000e04 <__udivmoddi4+0x260>
 8000e60:	46d0      	mov	r8, sl
 8000e62:	e77b      	b.n	8000d5c <__udivmoddi4+0x1b8>
 8000e64:	3b02      	subs	r3, #2
 8000e66:	4461      	add	r1, ip
 8000e68:	e732      	b.n	8000cd0 <__udivmoddi4+0x12c>
 8000e6a:	4630      	mov	r0, r6
 8000e6c:	e709      	b.n	8000c82 <__udivmoddi4+0xde>
 8000e6e:	4464      	add	r4, ip
 8000e70:	3802      	subs	r0, #2
 8000e72:	e742      	b.n	8000cfa <__udivmoddi4+0x156>

08000e74 <__aeabi_idiv0>:
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop

08000e78 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
 8000e80:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	0a5a      	lsrs	r2, r3, #9
 8000e88:	490f      	ldr	r1, [pc, #60]	; (8000ec8 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000e8a:	fba1 1202 	umull	r1, r2, r1, r2
 8000e8e:	09d2      	lsrs	r2, r2, #7
 8000e90:	490e      	ldr	r1, [pc, #56]	; (8000ecc <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8000e92:	fb01 f202 	mul.w	r2, r1, r2
 8000e96:	1a9b      	subs	r3, r3, r2
 8000e98:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	0a5b      	lsrs	r3, r3, #9
 8000ea0:	4a09      	ldr	r2, [pc, #36]	; (8000ec8 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ea6:	09db      	lsrs	r3, r3, #7
 8000ea8:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	68bb      	ldr	r3, [r7, #8]
 8000eb0:	441a      	add	r2, r3
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	68fa      	ldr	r2, [r7, #12]
 8000eba:	601a      	str	r2, [r3, #0]
}
 8000ebc:	bf00      	nop
 8000ebe:	3714      	adds	r7, #20
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec6:	4770      	bx	lr
 8000ec8:	00044b83 	.word	0x00044b83
 8000ecc:	3b9aca00 	.word	0x3b9aca00

08000ed0 <HAL_TIM_IC_CaptureCallback>:
int32_t count = 0;
int speed = 0;
int position = 0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{/*
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  //input_capture= __HAL_TIM_GetCompare(&htim1, TIM_CHANNEL_1);    //read TIM2 channel 1 capture value
  /*Encoder1.counter = __HAL_TIM_GET_COUNTER(htim);
  Encoder1.count = (int32_t)Encoder1.counter ;
  position = count/2;
  */
  if(htim->Instance==TIM2){ //Enkoder 1
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ee0:	d111      	bne.n	8000f06 <HAL_TIM_IC_CaptureCallback+0x36>
  		Encoder1.counter = __HAL_TIM_GET_COUNTER(htim);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ee8:	4a15      	ldr	r2, [pc, #84]	; (8000f40 <HAL_TIM_IC_CaptureCallback+0x70>)
 8000eea:	6013      	str	r3, [r2, #0]
  		Encoder1.count = (int32_t)Encoder1.counter;
 8000eec:	4b14      	ldr	r3, [pc, #80]	; (8000f40 <HAL_TIM_IC_CaptureCallback+0x70>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	4b13      	ldr	r3, [pc, #76]	; (8000f40 <HAL_TIM_IC_CaptureCallback+0x70>)
 8000ef4:	605a      	str	r2, [r3, #4]
  		Encoder1.position = Encoder1.count/2;
 8000ef6:	4b12      	ldr	r3, [pc, #72]	; (8000f40 <HAL_TIM_IC_CaptureCallback+0x70>)
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	0fda      	lsrs	r2, r3, #31
 8000efc:	4413      	add	r3, r2
 8000efe:	105b      	asrs	r3, r3, #1
 8000f00:	461a      	mov	r2, r3
 8000f02:	4b0f      	ldr	r3, [pc, #60]	; (8000f40 <HAL_TIM_IC_CaptureCallback+0x70>)
 8000f04:	609a      	str	r2, [r3, #8]
  		//Position_Publish(&Encoder1);
  	}
  if(htim->Instance==TIM5){ //Enkoder 1
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a0e      	ldr	r2, [pc, #56]	; (8000f44 <HAL_TIM_IC_CaptureCallback+0x74>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d111      	bne.n	8000f34 <HAL_TIM_IC_CaptureCallback+0x64>
    		Encoder2.counter = __HAL_TIM_GET_COUNTER(htim);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f16:	4a0c      	ldr	r2, [pc, #48]	; (8000f48 <HAL_TIM_IC_CaptureCallback+0x78>)
 8000f18:	6013      	str	r3, [r2, #0]
    		Encoder2.count = (int32_t)Encoder2.counter;
 8000f1a:	4b0b      	ldr	r3, [pc, #44]	; (8000f48 <HAL_TIM_IC_CaptureCallback+0x78>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	461a      	mov	r2, r3
 8000f20:	4b09      	ldr	r3, [pc, #36]	; (8000f48 <HAL_TIM_IC_CaptureCallback+0x78>)
 8000f22:	605a      	str	r2, [r3, #4]
    		Encoder2.position = Encoder2.count/2;
 8000f24:	4b08      	ldr	r3, [pc, #32]	; (8000f48 <HAL_TIM_IC_CaptureCallback+0x78>)
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	0fda      	lsrs	r2, r3, #31
 8000f2a:	4413      	add	r3, r2
 8000f2c:	105b      	asrs	r3, r3, #1
 8000f2e:	461a      	mov	r2, r3
 8000f30:	4b05      	ldr	r3, [pc, #20]	; (8000f48 <HAL_TIM_IC_CaptureCallback+0x78>)
 8000f32:	609a      	str	r2, [r3, #8]
    		//Position_Publish(&Encoder2);
    	}
  //}
}
 8000f34:	bf00      	nop
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	20000538 	.word	0x20000538
 8000f44:	40000c00 	.word	0x40000c00
 8000f48:	20000548 	.word	0x20000548

08000f4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f50:	f005 fda0 	bl	8006a94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f54:	f000 f81c 	bl	8000f90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f58:	f000 f972 	bl	8001240 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f5c:	f000 f948 	bl	80011f0 <MX_DMA_Init>
  MX_TIM2_Init();
 8000f60:	f000 f874 	bl	800104c <MX_TIM2_Init>
  MX_UART4_Init();
 8000f64:	f000 f91a 	bl	800119c <MX_UART4_Init>
  MX_TIM5_Init();
 8000f68:	f000 f8c4 	bl	80010f4 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8000f6c:	213c      	movs	r1, #60	; 0x3c
 8000f6e:	4806      	ldr	r0, [pc, #24]	; (8000f88 <main+0x3c>)
 8000f70:	f007 f9d4 	bl	800831c <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim5, TIM_CHANNEL_ALL);
 8000f74:	213c      	movs	r1, #60	; 0x3c
 8000f76:	4805      	ldr	r0, [pc, #20]	; (8000f8c <main+0x40>)
 8000f78:	f007 f9d0 	bl	800831c <HAL_TIM_Encoder_Start_IT>
  //HAL_TIM_Base_Start_IT(&htim2);

  setup();
 8000f7c:	f004 fbd2 	bl	8005724 <setup>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	loop();
 8000f80:	f004 fbf8 	bl	8005774 <loop>
  {
 8000f84:	e7fc      	b.n	8000f80 <main+0x34>
 8000f86:	bf00      	nop
 8000f88:	20000094 	.word	0x20000094
 8000f8c:	200000dc 	.word	0x200000dc

08000f90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b094      	sub	sp, #80	; 0x50
 8000f94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f96:	f107 0320 	add.w	r3, r7, #32
 8000f9a:	2230      	movs	r2, #48	; 0x30
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f00a fd64 	bl	800ba6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fa4:	f107 030c 	add.w	r3, r7, #12
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	60bb      	str	r3, [r7, #8]
 8000fb8:	4b22      	ldr	r3, [pc, #136]	; (8001044 <SystemClock_Config+0xb4>)
 8000fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fbc:	4a21      	ldr	r2, [pc, #132]	; (8001044 <SystemClock_Config+0xb4>)
 8000fbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fc2:	6413      	str	r3, [r2, #64]	; 0x40
 8000fc4:	4b1f      	ldr	r3, [pc, #124]	; (8001044 <SystemClock_Config+0xb4>)
 8000fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fcc:	60bb      	str	r3, [r7, #8]
 8000fce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	607b      	str	r3, [r7, #4]
 8000fd4:	4b1c      	ldr	r3, [pc, #112]	; (8001048 <SystemClock_Config+0xb8>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a1b      	ldr	r2, [pc, #108]	; (8001048 <SystemClock_Config+0xb8>)
 8000fda:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fde:	6013      	str	r3, [r2, #0]
 8000fe0:	4b19      	ldr	r3, [pc, #100]	; (8001048 <SystemClock_Config+0xb8>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fe8:	607b      	str	r3, [r7, #4]
 8000fea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fec:	2302      	movs	r3, #2
 8000fee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ff4:	2310      	movs	r3, #16
 8000ff6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ffc:	f107 0320 	add.w	r3, r7, #32
 8001000:	4618      	mov	r0, r3
 8001002:	f006 fc8d 	bl	8007920 <HAL_RCC_OscConfig>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800100c:	f000 f94e 	bl	80012ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001010:	230f      	movs	r3, #15
 8001012:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001014:	2300      	movs	r3, #0
 8001016:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001018:	2300      	movs	r3, #0
 800101a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800101c:	2300      	movs	r3, #0
 800101e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001020:	2300      	movs	r3, #0
 8001022:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001024:	f107 030c 	add.w	r3, r7, #12
 8001028:	2100      	movs	r1, #0
 800102a:	4618      	mov	r0, r3
 800102c:	f006 fef0 	bl	8007e10 <HAL_RCC_ClockConfig>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001036:	f000 f939 	bl	80012ac <Error_Handler>
  }
}
 800103a:	bf00      	nop
 800103c:	3750      	adds	r7, #80	; 0x50
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40023800 	.word	0x40023800
 8001048:	40007000 	.word	0x40007000

0800104c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b08c      	sub	sp, #48	; 0x30
 8001050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001052:	f107 030c 	add.w	r3, r7, #12
 8001056:	2224      	movs	r2, #36	; 0x24
 8001058:	2100      	movs	r1, #0
 800105a:	4618      	mov	r0, r3
 800105c:	f00a fd06 	bl	800ba6c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001060:	1d3b      	adds	r3, r7, #4
 8001062:	2200      	movs	r2, #0
 8001064:	601a      	str	r2, [r3, #0]
 8001066:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001068:	4b21      	ldr	r3, [pc, #132]	; (80010f0 <MX_TIM2_Init+0xa4>)
 800106a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800106e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001070:	4b1f      	ldr	r3, [pc, #124]	; (80010f0 <MX_TIM2_Init+0xa4>)
 8001072:	2200      	movs	r2, #0
 8001074:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001076:	4b1e      	ldr	r3, [pc, #120]	; (80010f0 <MX_TIM2_Init+0xa4>)
 8001078:	2200      	movs	r2, #0
 800107a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800107c:	4b1c      	ldr	r3, [pc, #112]	; (80010f0 <MX_TIM2_Init+0xa4>)
 800107e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001082:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001084:	4b1a      	ldr	r3, [pc, #104]	; (80010f0 <MX_TIM2_Init+0xa4>)
 8001086:	2200      	movs	r2, #0
 8001088:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800108a:	4b19      	ldr	r3, [pc, #100]	; (80010f0 <MX_TIM2_Init+0xa4>)
 800108c:	2200      	movs	r2, #0
 800108e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001090:	2303      	movs	r3, #3
 8001092:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001094:	2300      	movs	r3, #0
 8001096:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001098:	2301      	movs	r3, #1
 800109a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800109c:	2300      	movs	r3, #0
 800109e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80010a0:	2300      	movs	r3, #0
 80010a2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80010a4:	2300      	movs	r3, #0
 80010a6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80010a8:	2301      	movs	r3, #1
 80010aa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80010ac:	2300      	movs	r3, #0
 80010ae:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80010b0:	2300      	movs	r3, #0
 80010b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80010b4:	f107 030c 	add.w	r3, r7, #12
 80010b8:	4619      	mov	r1, r3
 80010ba:	480d      	ldr	r0, [pc, #52]	; (80010f0 <MX_TIM2_Init+0xa4>)
 80010bc:	f007 f888 	bl	80081d0 <HAL_TIM_Encoder_Init>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80010c6:	f000 f8f1 	bl	80012ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010ca:	2300      	movs	r3, #0
 80010cc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010ce:	2300      	movs	r3, #0
 80010d0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010d2:	1d3b      	adds	r3, r7, #4
 80010d4:	4619      	mov	r1, r3
 80010d6:	4806      	ldr	r0, [pc, #24]	; (80010f0 <MX_TIM2_Init+0xa4>)
 80010d8:	f007 fbc4 	bl	8008864 <HAL_TIMEx_MasterConfigSynchronization>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80010e2:	f000 f8e3 	bl	80012ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010e6:	bf00      	nop
 80010e8:	3730      	adds	r7, #48	; 0x30
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	20000094 	.word	0x20000094

080010f4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b08c      	sub	sp, #48	; 0x30
 80010f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80010fa:	f107 030c 	add.w	r3, r7, #12
 80010fe:	2224      	movs	r2, #36	; 0x24
 8001100:	2100      	movs	r1, #0
 8001102:	4618      	mov	r0, r3
 8001104:	f00a fcb2 	bl	800ba6c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001108:	1d3b      	adds	r3, r7, #4
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001110:	4b20      	ldr	r3, [pc, #128]	; (8001194 <MX_TIM5_Init+0xa0>)
 8001112:	4a21      	ldr	r2, [pc, #132]	; (8001198 <MX_TIM5_Init+0xa4>)
 8001114:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001116:	4b1f      	ldr	r3, [pc, #124]	; (8001194 <MX_TIM5_Init+0xa0>)
 8001118:	2200      	movs	r2, #0
 800111a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800111c:	4b1d      	ldr	r3, [pc, #116]	; (8001194 <MX_TIM5_Init+0xa0>)
 800111e:	2200      	movs	r2, #0
 8001120:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001122:	4b1c      	ldr	r3, [pc, #112]	; (8001194 <MX_TIM5_Init+0xa0>)
 8001124:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001128:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800112a:	4b1a      	ldr	r3, [pc, #104]	; (8001194 <MX_TIM5_Init+0xa0>)
 800112c:	2200      	movs	r2, #0
 800112e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001130:	4b18      	ldr	r3, [pc, #96]	; (8001194 <MX_TIM5_Init+0xa0>)
 8001132:	2200      	movs	r2, #0
 8001134:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001136:	2303      	movs	r3, #3
 8001138:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800113a:	2300      	movs	r3, #0
 800113c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800113e:	2301      	movs	r3, #1
 8001140:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001142:	2300      	movs	r3, #0
 8001144:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001146:	2300      	movs	r3, #0
 8001148:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800114a:	2300      	movs	r3, #0
 800114c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800114e:	2301      	movs	r3, #1
 8001150:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001152:	2300      	movs	r3, #0
 8001154:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001156:	2300      	movs	r3, #0
 8001158:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 800115a:	f107 030c 	add.w	r3, r7, #12
 800115e:	4619      	mov	r1, r3
 8001160:	480c      	ldr	r0, [pc, #48]	; (8001194 <MX_TIM5_Init+0xa0>)
 8001162:	f007 f835 	bl	80081d0 <HAL_TIM_Encoder_Init>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 800116c:	f000 f89e 	bl	80012ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001170:	2300      	movs	r3, #0
 8001172:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001174:	2300      	movs	r3, #0
 8001176:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001178:	1d3b      	adds	r3, r7, #4
 800117a:	4619      	mov	r1, r3
 800117c:	4805      	ldr	r0, [pc, #20]	; (8001194 <MX_TIM5_Init+0xa0>)
 800117e:	f007 fb71 	bl	8008864 <HAL_TIMEx_MasterConfigSynchronization>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8001188:	f000 f890 	bl	80012ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800118c:	bf00      	nop
 800118e:	3730      	adds	r7, #48	; 0x30
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	200000dc 	.word	0x200000dc
 8001198:	40000c00 	.word	0x40000c00

0800119c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80011a0:	4b11      	ldr	r3, [pc, #68]	; (80011e8 <MX_UART4_Init+0x4c>)
 80011a2:	4a12      	ldr	r2, [pc, #72]	; (80011ec <MX_UART4_Init+0x50>)
 80011a4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80011a6:	4b10      	ldr	r3, [pc, #64]	; (80011e8 <MX_UART4_Init+0x4c>)
 80011a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011ac:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80011ae:	4b0e      	ldr	r3, [pc, #56]	; (80011e8 <MX_UART4_Init+0x4c>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80011b4:	4b0c      	ldr	r3, [pc, #48]	; (80011e8 <MX_UART4_Init+0x4c>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80011ba:	4b0b      	ldr	r3, [pc, #44]	; (80011e8 <MX_UART4_Init+0x4c>)
 80011bc:	2200      	movs	r2, #0
 80011be:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80011c0:	4b09      	ldr	r3, [pc, #36]	; (80011e8 <MX_UART4_Init+0x4c>)
 80011c2:	220c      	movs	r2, #12
 80011c4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011c6:	4b08      	ldr	r3, [pc, #32]	; (80011e8 <MX_UART4_Init+0x4c>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80011cc:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <MX_UART4_Init+0x4c>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80011d2:	4805      	ldr	r0, [pc, #20]	; (80011e8 <MX_UART4_Init+0x4c>)
 80011d4:	f007 fbd6 	bl	8008984 <HAL_UART_Init>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80011de:	f000 f865 	bl	80012ac <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80011e2:	bf00      	nop
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	20000124 	.word	0x20000124
 80011ec:	40004c00 	.word	0x40004c00

080011f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	607b      	str	r3, [r7, #4]
 80011fa:	4b10      	ldr	r3, [pc, #64]	; (800123c <MX_DMA_Init+0x4c>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	4a0f      	ldr	r2, [pc, #60]	; (800123c <MX_DMA_Init+0x4c>)
 8001200:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001204:	6313      	str	r3, [r2, #48]	; 0x30
 8001206:	4b0d      	ldr	r3, [pc, #52]	; (800123c <MX_DMA_Init+0x4c>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800120e:	607b      	str	r3, [r7, #4]
 8001210:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001212:	2200      	movs	r2, #0
 8001214:	2100      	movs	r1, #0
 8001216:	200d      	movs	r0, #13
 8001218:	f005 fdad 	bl	8006d76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 800121c:	200d      	movs	r0, #13
 800121e:	f005 fdc6 	bl	8006dae <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001222:	2200      	movs	r2, #0
 8001224:	2100      	movs	r1, #0
 8001226:	200f      	movs	r0, #15
 8001228:	f005 fda5 	bl	8006d76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800122c:	200f      	movs	r0, #15
 800122e:	f005 fdbe 	bl	8006dae <HAL_NVIC_EnableIRQ>

}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	40023800 	.word	0x40023800

08001240 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001240:	b480      	push	{r7}
 8001242:	b085      	sub	sp, #20
 8001244:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	60fb      	str	r3, [r7, #12]
 800124a:	4b17      	ldr	r3, [pc, #92]	; (80012a8 <MX_GPIO_Init+0x68>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	4a16      	ldr	r2, [pc, #88]	; (80012a8 <MX_GPIO_Init+0x68>)
 8001250:	f043 0301 	orr.w	r3, r3, #1
 8001254:	6313      	str	r3, [r2, #48]	; 0x30
 8001256:	4b14      	ldr	r3, [pc, #80]	; (80012a8 <MX_GPIO_Init+0x68>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	60fb      	str	r3, [r7, #12]
 8001260:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	60bb      	str	r3, [r7, #8]
 8001266:	4b10      	ldr	r3, [pc, #64]	; (80012a8 <MX_GPIO_Init+0x68>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	4a0f      	ldr	r2, [pc, #60]	; (80012a8 <MX_GPIO_Init+0x68>)
 800126c:	f043 0304 	orr.w	r3, r3, #4
 8001270:	6313      	str	r3, [r2, #48]	; 0x30
 8001272:	4b0d      	ldr	r3, [pc, #52]	; (80012a8 <MX_GPIO_Init+0x68>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	f003 0304 	and.w	r3, r3, #4
 800127a:	60bb      	str	r3, [r7, #8]
 800127c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	607b      	str	r3, [r7, #4]
 8001282:	4b09      	ldr	r3, [pc, #36]	; (80012a8 <MX_GPIO_Init+0x68>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	4a08      	ldr	r2, [pc, #32]	; (80012a8 <MX_GPIO_Init+0x68>)
 8001288:	f043 0302 	orr.w	r3, r3, #2
 800128c:	6313      	str	r3, [r2, #48]	; 0x30
 800128e:	4b06      	ldr	r3, [pc, #24]	; (80012a8 <MX_GPIO_Init+0x68>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	f003 0302 	and.w	r3, r3, #2
 8001296:	607b      	str	r3, [r7, #4]
 8001298:	687b      	ldr	r3, [r7, #4]

}
 800129a:	bf00      	nop
 800129c:	3714      	adds	r7, #20
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	40023800 	.word	0x40023800

080012ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012b0:	b672      	cpsid	i
}
 80012b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012b4:	e7fe      	b.n	80012b4 <Error_Handler+0x8>

080012b6 <_ZSt3cosf>:
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b082      	sub	sp, #8
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	ed87 0a01 	vstr	s0, [r7, #4]
 80012c0:	ed97 0a01 	vldr	s0, [r7, #4]
 80012c4:	f008 fdfc 	bl	8009ec0 <cosf>
 80012c8:	eef0 7a40 	vmov.f32	s15, s0
 80012cc:	eeb0 0a67 	vmov.f32	s0, s15
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <_ZSt3sinf>:
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b082      	sub	sp, #8
 80012da:	af00      	add	r7, sp, #0
 80012dc:	ed87 0a01 	vstr	s0, [r7, #4]
 80012e0:	ed97 0a01 	vldr	s0, [r7, #4]
 80012e4:	f008 fe30 	bl	8009f48 <sinf>
 80012e8:	eef0 7a40 	vmov.f32	s15, s0
 80012ec:	eeb0 0a67 	vmov.f32	s0, s15
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 80012f6:	b480      	push	{r7}
 80012f8:	b083      	sub	sp, #12
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2200      	movs	r2, #0
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4618      	mov	r0, r3
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
 8001320:	4a04      	ldr	r2, [pc, #16]	; (8001334 <_ZN3ros3MsgC1Ev+0x1c>)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	601a      	str	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4618      	mov	r0, r3
 800132a:	370c      	adds	r7, #12
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr
 8001334:	0800c2d4 	.word	0x0800c2d4

08001338 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
      data()
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff ffe8 	bl	8001318 <_ZN3ros3MsgC1Ev>
 8001348:	4a06      	ldr	r2, [pc, #24]	; (8001364 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	3304      	adds	r3, #4
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff ffcf 	bl	80012f6 <_ZN3ros4TimeC1Ev>
    {
    }
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	4618      	mov	r0, r3
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	0800c2bc 	.word	0x0800c2bc

08001368 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001372:	2300      	movs	r3, #0
 8001374:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6859      	ldr	r1, [r3, #4]
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	683a      	ldr	r2, [r7, #0]
 800137e:	4413      	add	r3, r2
 8001380:	b2ca      	uxtb	r2, r1
 8001382:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	0a19      	lsrs	r1, r3, #8
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	3301      	adds	r3, #1
 800138e:	683a      	ldr	r2, [r7, #0]
 8001390:	4413      	add	r3, r2
 8001392:	b2ca      	uxtb	r2, r1
 8001394:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	0c19      	lsrs	r1, r3, #16
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	3302      	adds	r3, #2
 80013a0:	683a      	ldr	r2, [r7, #0]
 80013a2:	4413      	add	r3, r2
 80013a4:	b2ca      	uxtb	r2, r1
 80013a6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	0e19      	lsrs	r1, r3, #24
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	3303      	adds	r3, #3
 80013b2:	683a      	ldr	r2, [r7, #0]
 80013b4:	4413      	add	r3, r2
 80013b6:	b2ca      	uxtb	r2, r1
 80013b8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	3304      	adds	r3, #4
 80013be:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6899      	ldr	r1, [r3, #8]
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	683a      	ldr	r2, [r7, #0]
 80013c8:	4413      	add	r3, r2
 80013ca:	b2ca      	uxtb	r2, r1
 80013cc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	0a19      	lsrs	r1, r3, #8
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	3301      	adds	r3, #1
 80013d8:	683a      	ldr	r2, [r7, #0]
 80013da:	4413      	add	r3, r2
 80013dc:	b2ca      	uxtb	r2, r1
 80013de:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	0c19      	lsrs	r1, r3, #16
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	3302      	adds	r3, #2
 80013ea:	683a      	ldr	r2, [r7, #0]
 80013ec:	4413      	add	r3, r2
 80013ee:	b2ca      	uxtb	r2, r1
 80013f0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	689b      	ldr	r3, [r3, #8]
 80013f6:	0e19      	lsrs	r1, r3, #24
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	3303      	adds	r3, #3
 80013fc:	683a      	ldr	r2, [r7, #0]
 80013fe:	4413      	add	r3, r2
 8001400:	b2ca      	uxtb	r2, r1
 8001402:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	3304      	adds	r3, #4
 8001408:	60fb      	str	r3, [r7, #12]
      return offset;
 800140a:	68fb      	ldr	r3, [r7, #12]
    }
 800140c:	4618      	mov	r0, r3
 800140e:	3714      	adds	r7, #20
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001418:	b480      	push	{r7}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001422:	2300      	movs	r3, #0
 8001424:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	683a      	ldr	r2, [r7, #0]
 800142a:	4413      	add	r3, r2
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	461a      	mov	r2, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	685a      	ldr	r2, [r3, #4]
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	3301      	adds	r3, #1
 800143c:	6839      	ldr	r1, [r7, #0]
 800143e:	440b      	add	r3, r1
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	021b      	lsls	r3, r3, #8
 8001444:	431a      	orrs	r2, r3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	685a      	ldr	r2, [r3, #4]
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	3302      	adds	r3, #2
 8001452:	6839      	ldr	r1, [r7, #0]
 8001454:	440b      	add	r3, r1
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	041b      	lsls	r3, r3, #16
 800145a:	431a      	orrs	r2, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	685a      	ldr	r2, [r3, #4]
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	3303      	adds	r3, #3
 8001468:	6839      	ldr	r1, [r7, #0]
 800146a:	440b      	add	r3, r1
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	061b      	lsls	r3, r3, #24
 8001470:	431a      	orrs	r2, r3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	3304      	adds	r3, #4
 800147a:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	683a      	ldr	r2, [r7, #0]
 8001480:	4413      	add	r3, r2
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	461a      	mov	r2, r3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	689a      	ldr	r2, [r3, #8]
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	3301      	adds	r3, #1
 8001492:	6839      	ldr	r1, [r7, #0]
 8001494:	440b      	add	r3, r1
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	021b      	lsls	r3, r3, #8
 800149a:	431a      	orrs	r2, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	689a      	ldr	r2, [r3, #8]
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	3302      	adds	r3, #2
 80014a8:	6839      	ldr	r1, [r7, #0]
 80014aa:	440b      	add	r3, r1
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	041b      	lsls	r3, r3, #16
 80014b0:	431a      	orrs	r2, r3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	689a      	ldr	r2, [r3, #8]
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	3303      	adds	r3, #3
 80014be:	6839      	ldr	r1, [r7, #0]
 80014c0:	440b      	add	r3, r1
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	061b      	lsls	r3, r3, #24
 80014c6:	431a      	orrs	r2, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	3304      	adds	r3, #4
 80014d0:	60fb      	str	r3, [r7, #12]
     return offset;
 80014d2:	68fb      	ldr	r3, [r7, #12]
    }
 80014d4:	4618      	mov	r0, r3
 80014d6:	3714      	adds	r7, #20
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	4b03      	ldr	r3, [pc, #12]	; (80014f8 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 80014ea:	4618      	mov	r0, r3
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	0800bd98 	.word	0x0800bd98

080014fc <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	4b03      	ldr	r3, [pc, #12]	; (8001514 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8001506:	4618      	mov	r0, r3
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	0800bda8 	.word	0x0800bda8

08001518 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	4618      	mov	r0, r3
 8001524:	f7ff fef8 	bl	8001318 <_ZN3ros3MsgC1Ev>
 8001528:	4a0b      	ldr	r2, [pc, #44]	; (8001558 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	601a      	str	r2, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2200      	movs	r2, #0
 8001532:	809a      	strh	r2, [r3, #4]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	4a09      	ldr	r2, [pc, #36]	; (800155c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001538:	609a      	str	r2, [r3, #8]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a07      	ldr	r2, [pc, #28]	; (800155c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800153e:	60da      	str	r2, [r3, #12]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	4a06      	ldr	r2, [pc, #24]	; (800155c <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8001544:	611a      	str	r2, [r3, #16]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2200      	movs	r2, #0
 800154a:	615a      	str	r2, [r3, #20]
    {
    }
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	4618      	mov	r0, r3
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	0800c2a4 	.word	0x0800c2a4
 800155c:	0800bdcc 	.word	0x0800bdcc

08001560 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001560:	b580      	push	{r7, lr}
 8001562:	b088      	sub	sp, #32
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800156a:	2300      	movs	r3, #0
 800156c:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	8899      	ldrh	r1, [r3, #4]
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	683a      	ldr	r2, [r7, #0]
 8001576:	4413      	add	r3, r2
 8001578:	b2ca      	uxtb	r2, r1
 800157a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	889b      	ldrh	r3, [r3, #4]
 8001580:	0a1b      	lsrs	r3, r3, #8
 8001582:	b299      	uxth	r1, r3
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	3301      	adds	r3, #1
 8001588:	683a      	ldr	r2, [r7, #0]
 800158a:	4413      	add	r3, r2
 800158c:	b2ca      	uxtb	r2, r1
 800158e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	3302      	adds	r3, #2
 8001594:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	689b      	ldr	r3, [r3, #8]
 800159a:	4618      	mov	r0, r3
 800159c:	f7fe fe14 	bl	80001c8 <strlen>
 80015a0:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	683a      	ldr	r2, [r7, #0]
 80015a6:	4413      	add	r3, r2
 80015a8:	69b9      	ldr	r1, [r7, #24]
 80015aa:	4618      	mov	r0, r3
 80015ac:	f004 f8ee 	bl	800578c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	3304      	adds	r3, #4
 80015b4:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	683a      	ldr	r2, [r7, #0]
 80015ba:	18d0      	adds	r0, r2, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	4619      	mov	r1, r3
 80015c4:	f00a fa44 	bl	800ba50 <memcpy>
      offset += length_topic_name;
 80015c8:	69fa      	ldr	r2, [r7, #28]
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	4413      	add	r3, r2
 80015ce:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7fe fdf7 	bl	80001c8 <strlen>
 80015da:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	683a      	ldr	r2, [r7, #0]
 80015e0:	4413      	add	r3, r2
 80015e2:	6979      	ldr	r1, [r7, #20]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f004 f8d1 	bl	800578c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80015ea:	69fb      	ldr	r3, [r7, #28]
 80015ec:	3304      	adds	r3, #4
 80015ee:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	683a      	ldr	r2, [r7, #0]
 80015f4:	18d0      	adds	r0, r2, r3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	68db      	ldr	r3, [r3, #12]
 80015fa:	697a      	ldr	r2, [r7, #20]
 80015fc:	4619      	mov	r1, r3
 80015fe:	f00a fa27 	bl	800ba50 <memcpy>
      offset += length_message_type;
 8001602:	69fa      	ldr	r2, [r7, #28]
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	4413      	add	r3, r2
 8001608:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	691b      	ldr	r3, [r3, #16]
 800160e:	4618      	mov	r0, r3
 8001610:	f7fe fdda 	bl	80001c8 <strlen>
 8001614:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	683a      	ldr	r2, [r7, #0]
 800161a:	4413      	add	r3, r2
 800161c:	6939      	ldr	r1, [r7, #16]
 800161e:	4618      	mov	r0, r3
 8001620:	f004 f8b4 	bl	800578c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	3304      	adds	r3, #4
 8001628:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	683a      	ldr	r2, [r7, #0]
 800162e:	18d0      	adds	r0, r2, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	691b      	ldr	r3, [r3, #16]
 8001634:	693a      	ldr	r2, [r7, #16]
 8001636:	4619      	mov	r1, r3
 8001638:	f00a fa0a 	bl	800ba50 <memcpy>
      offset += length_md5sum;
 800163c:	69fa      	ldr	r2, [r7, #28]
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	4413      	add	r3, r2
 8001642:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	695b      	ldr	r3, [r3, #20]
 8001648:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 800164a:	68f9      	ldr	r1, [r7, #12]
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	683a      	ldr	r2, [r7, #0]
 8001650:	4413      	add	r3, r2
 8001652:	b2ca      	uxtb	r2, r1
 8001654:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	0a19      	lsrs	r1, r3, #8
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	3301      	adds	r3, #1
 800165e:	683a      	ldr	r2, [r7, #0]
 8001660:	4413      	add	r3, r2
 8001662:	b2ca      	uxtb	r2, r1
 8001664:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	0c19      	lsrs	r1, r3, #16
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	3302      	adds	r3, #2
 800166e:	683a      	ldr	r2, [r7, #0]
 8001670:	4413      	add	r3, r2
 8001672:	b2ca      	uxtb	r2, r1
 8001674:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	0e19      	lsrs	r1, r3, #24
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	3303      	adds	r3, #3
 800167e:	683a      	ldr	r2, [r7, #0]
 8001680:	4413      	add	r3, r2
 8001682:	b2ca      	uxtb	r2, r1
 8001684:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	3304      	adds	r3, #4
 800168a:	61fb      	str	r3, [r7, #28]
      return offset;
 800168c:	69fb      	ldr	r3, [r7, #28]
    }
 800168e:	4618      	mov	r0, r3
 8001690:	3720      	adds	r7, #32
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001696:	b580      	push	{r7, lr}
 8001698:	b08a      	sub	sp, #40	; 0x28
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
 800169e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80016a0:	2300      	movs	r3, #0
 80016a2:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	683a      	ldr	r2, [r7, #0]
 80016a8:	4413      	add	r3, r2
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	b29a      	uxth	r2, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	889b      	ldrh	r3, [r3, #4]
 80016b6:	b21a      	sxth	r2, r3
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	3301      	adds	r3, #1
 80016bc:	6839      	ldr	r1, [r7, #0]
 80016be:	440b      	add	r3, r1
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	021b      	lsls	r3, r3, #8
 80016c4:	b21b      	sxth	r3, r3
 80016c6:	4313      	orrs	r3, r2
 80016c8:	b21b      	sxth	r3, r3
 80016ca:	b29a      	uxth	r2, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	3302      	adds	r3, #2
 80016d4:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 80016d6:	69bb      	ldr	r3, [r7, #24]
 80016d8:	683a      	ldr	r2, [r7, #0]
 80016da:	441a      	add	r2, r3
 80016dc:	f107 0314 	add.w	r3, r7, #20
 80016e0:	4611      	mov	r1, r2
 80016e2:	4618      	mov	r0, r3
 80016e4:	f004 f870 	bl	80057c8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	3304      	adds	r3, #4
 80016ec:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80016ee:	69bb      	ldr	r3, [r7, #24]
 80016f0:	627b      	str	r3, [r7, #36]	; 0x24
 80016f2:	69ba      	ldr	r2, [r7, #24]
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	4413      	add	r3, r2
 80016f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d20c      	bcs.n	8001718 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 80016fe:	683a      	ldr	r2, [r7, #0]
 8001700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001702:	441a      	add	r2, r3
 8001704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001706:	3b01      	subs	r3, #1
 8001708:	6839      	ldr	r1, [r7, #0]
 800170a:	440b      	add	r3, r1
 800170c:	7812      	ldrb	r2, [r2, #0]
 800170e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8001710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001712:	3301      	adds	r3, #1
 8001714:	627b      	str	r3, [r7, #36]	; 0x24
 8001716:	e7ec      	b.n	80016f2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	4413      	add	r3, r2
 800171e:	3b01      	subs	r3, #1
 8001720:	683a      	ldr	r2, [r7, #0]
 8001722:	4413      	add	r3, r2
 8001724:	2200      	movs	r2, #0
 8001726:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	3b01      	subs	r3, #1
 800172c:	683a      	ldr	r2, [r7, #0]
 800172e:	441a      	add	r2, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	4413      	add	r3, r2
 800173a:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	683a      	ldr	r2, [r7, #0]
 8001740:	441a      	add	r2, r3
 8001742:	f107 0310 	add.w	r3, r7, #16
 8001746:	4611      	mov	r1, r2
 8001748:	4618      	mov	r0, r3
 800174a:	f004 f83d 	bl	80057c8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800174e:	69bb      	ldr	r3, [r7, #24]
 8001750:	3304      	adds	r3, #4
 8001752:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	623b      	str	r3, [r7, #32]
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	4413      	add	r3, r2
 800175e:	6a3a      	ldr	r2, [r7, #32]
 8001760:	429a      	cmp	r2, r3
 8001762:	d20c      	bcs.n	800177e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 8001764:	683a      	ldr	r2, [r7, #0]
 8001766:	6a3b      	ldr	r3, [r7, #32]
 8001768:	441a      	add	r2, r3
 800176a:	6a3b      	ldr	r3, [r7, #32]
 800176c:	3b01      	subs	r3, #1
 800176e:	6839      	ldr	r1, [r7, #0]
 8001770:	440b      	add	r3, r1
 8001772:	7812      	ldrb	r2, [r2, #0]
 8001774:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8001776:	6a3b      	ldr	r3, [r7, #32]
 8001778:	3301      	adds	r3, #1
 800177a:	623b      	str	r3, [r7, #32]
 800177c:	e7ec      	b.n	8001758 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 800177e:	69ba      	ldr	r2, [r7, #24]
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	4413      	add	r3, r2
 8001784:	3b01      	subs	r3, #1
 8001786:	683a      	ldr	r2, [r7, #0]
 8001788:	4413      	add	r3, r2
 800178a:	2200      	movs	r2, #0
 800178c:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	3b01      	subs	r3, #1
 8001792:	683a      	ldr	r2, [r7, #0]
 8001794:	441a      	add	r2, r3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 800179a:	69ba      	ldr	r2, [r7, #24]
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	4413      	add	r3, r2
 80017a0:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	683a      	ldr	r2, [r7, #0]
 80017a6:	441a      	add	r2, r3
 80017a8:	f107 030c 	add.w	r3, r7, #12
 80017ac:	4611      	mov	r1, r2
 80017ae:	4618      	mov	r0, r3
 80017b0:	f004 f80a 	bl	80057c8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	3304      	adds	r3, #4
 80017b8:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	61fb      	str	r3, [r7, #28]
 80017be:	69ba      	ldr	r2, [r7, #24]
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	4413      	add	r3, r2
 80017c4:	69fa      	ldr	r2, [r7, #28]
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d20c      	bcs.n	80017e4 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 80017ca:	683a      	ldr	r2, [r7, #0]
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	441a      	add	r2, r3
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	3b01      	subs	r3, #1
 80017d4:	6839      	ldr	r1, [r7, #0]
 80017d6:	440b      	add	r3, r1
 80017d8:	7812      	ldrb	r2, [r2, #0]
 80017da:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	3301      	adds	r3, #1
 80017e0:	61fb      	str	r3, [r7, #28]
 80017e2:	e7ec      	b.n	80017be <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	4413      	add	r3, r2
 80017ea:	3b01      	subs	r3, #1
 80017ec:	683a      	ldr	r2, [r7, #0]
 80017ee:	4413      	add	r3, r2
 80017f0:	2200      	movs	r2, #0
 80017f2:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 80017f4:	69bb      	ldr	r3, [r7, #24]
 80017f6:	3b01      	subs	r3, #1
 80017f8:	683a      	ldr	r2, [r7, #0]
 80017fa:	441a      	add	r2, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	4413      	add	r3, r2
 8001806:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8001808:	2300      	movs	r3, #0
 800180a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	69ba      	ldr	r2, [r7, #24]
 8001810:	6839      	ldr	r1, [r7, #0]
 8001812:	440a      	add	r2, r1
 8001814:	7812      	ldrb	r2, [r2, #0]
 8001816:	4313      	orrs	r3, r2
 8001818:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800181a:	68ba      	ldr	r2, [r7, #8]
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	3301      	adds	r3, #1
 8001820:	6839      	ldr	r1, [r7, #0]
 8001822:	440b      	add	r3, r1
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	021b      	lsls	r3, r3, #8
 8001828:	4313      	orrs	r3, r2
 800182a:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800182c:	68ba      	ldr	r2, [r7, #8]
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	3302      	adds	r3, #2
 8001832:	6839      	ldr	r1, [r7, #0]
 8001834:	440b      	add	r3, r1
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	041b      	lsls	r3, r3, #16
 800183a:	4313      	orrs	r3, r2
 800183c:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800183e:	68ba      	ldr	r2, [r7, #8]
 8001840:	69bb      	ldr	r3, [r7, #24]
 8001842:	3303      	adds	r3, #3
 8001844:	6839      	ldr	r1, [r7, #0]
 8001846:	440b      	add	r3, r1
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	061b      	lsls	r3, r3, #24
 800184c:	4313      	orrs	r3, r2
 800184e:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 8001850:	68ba      	ldr	r2, [r7, #8]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8001856:	69bb      	ldr	r3, [r7, #24]
 8001858:	3304      	adds	r3, #4
 800185a:	61bb      	str	r3, [r7, #24]
     return offset;
 800185c:	69bb      	ldr	r3, [r7, #24]
    }
 800185e:	4618      	mov	r0, r3
 8001860:	3728      	adds	r7, #40	; 0x28
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
	...

08001868 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	4b03      	ldr	r3, [pc, #12]	; (8001880 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 8001872:	4618      	mov	r0, r3
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	0800bdd0 	.word	0x0800bdd0

08001884 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	4b03      	ldr	r3, [pc, #12]	; (800189c <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 800188e:	4618      	mov	r0, r3
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	0800bdec 	.word	0x0800bdec

080018a0 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7ff fd34 	bl	8001318 <_ZN3ros3MsgC1Ev>
 80018b0:	4a06      	ldr	r2, [pc, #24]	; (80018cc <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	601a      	str	r2, [r3, #0]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	711a      	strb	r2, [r3, #4]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	4a04      	ldr	r2, [pc, #16]	; (80018d0 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 80018c0:	609a      	str	r2, [r3, #8]
    {
    }
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4618      	mov	r0, r3
 80018c6:	3708      	adds	r7, #8
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	0800c28c 	.word	0x0800c28c
 80018d0:	0800bdcc 	.word	0x0800bdcc

080018d4 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80018de:	2300      	movs	r3, #0
 80018e0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	683a      	ldr	r2, [r7, #0]
 80018e6:	4413      	add	r3, r2
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	7912      	ldrb	r2, [r2, #4]
 80018ec:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	3301      	adds	r3, #1
 80018f2:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7fe fc65 	bl	80001c8 <strlen>
 80018fe:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	683a      	ldr	r2, [r7, #0]
 8001904:	4413      	add	r3, r2
 8001906:	68b9      	ldr	r1, [r7, #8]
 8001908:	4618      	mov	r0, r3
 800190a:	f003 ff3f 	bl	800578c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	3304      	adds	r3, #4
 8001912:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	683a      	ldr	r2, [r7, #0]
 8001918:	18d0      	adds	r0, r2, r3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	68ba      	ldr	r2, [r7, #8]
 8001920:	4619      	mov	r1, r3
 8001922:	f00a f895 	bl	800ba50 <memcpy>
      offset += length_msg;
 8001926:	68fa      	ldr	r2, [r7, #12]
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	4413      	add	r3, r2
 800192c:	60fb      	str	r3, [r7, #12]
      return offset;
 800192e:	68fb      	ldr	r3, [r7, #12]
    }
 8001930:	4618      	mov	r0, r3
 8001932:	3710      	adds	r7, #16
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}

08001938 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001938:	b580      	push	{r7, lr}
 800193a:	b086      	sub	sp, #24
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001942:	2300      	movs	r3, #0
 8001944:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	683a      	ldr	r2, [r7, #0]
 800194a:	4413      	add	r3, r2
 800194c:	781a      	ldrb	r2, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	3301      	adds	r3, #1
 8001956:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	683a      	ldr	r2, [r7, #0]
 800195c:	441a      	add	r2, r3
 800195e:	f107 030c 	add.w	r3, r7, #12
 8001962:	4611      	mov	r1, r2
 8001964:	4618      	mov	r0, r3
 8001966:	f003 ff2f 	bl	80057c8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	3304      	adds	r3, #4
 800196e:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	617b      	str	r3, [r7, #20]
 8001974:	693a      	ldr	r2, [r7, #16]
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	4413      	add	r3, r2
 800197a:	697a      	ldr	r2, [r7, #20]
 800197c:	429a      	cmp	r2, r3
 800197e:	d20c      	bcs.n	800199a <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 8001980:	683a      	ldr	r2, [r7, #0]
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	441a      	add	r2, r3
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	3b01      	subs	r3, #1
 800198a:	6839      	ldr	r1, [r7, #0]
 800198c:	440b      	add	r3, r1
 800198e:	7812      	ldrb	r2, [r2, #0]
 8001990:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	3301      	adds	r3, #1
 8001996:	617b      	str	r3, [r7, #20]
 8001998:	e7ec      	b.n	8001974 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	4413      	add	r3, r2
 80019a0:	3b01      	subs	r3, #1
 80019a2:	683a      	ldr	r2, [r7, #0]
 80019a4:	4413      	add	r3, r2
 80019a6:	2200      	movs	r2, #0
 80019a8:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	3b01      	subs	r3, #1
 80019ae:	683a      	ldr	r2, [r7, #0]
 80019b0:	441a      	add	r2, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	4413      	add	r3, r2
 80019bc:	613b      	str	r3, [r7, #16]
     return offset;
 80019be:	693b      	ldr	r3, [r7, #16]
    }
 80019c0:	4618      	mov	r0, r3
 80019c2:	3718      	adds	r7, #24
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	4b03      	ldr	r3, [pc, #12]	; (80019e0 <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 80019d2:	4618      	mov	r0, r3
 80019d4:	370c      	adds	r7, #12
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	0800be10 	.word	0x0800be10

080019e4 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	4b03      	ldr	r3, [pc, #12]	; (80019fc <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 80019ee:	4618      	mov	r0, r3
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	0800be24 	.word	0x0800be24

08001a00 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7ff fc84 	bl	8001318 <_ZN3ros3MsgC1Ev>
 8001a10:	4a11      	ldr	r2, [pc, #68]	; (8001a58 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	601a      	str	r2, [r3, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	605a      	str	r2, [r3, #4]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	609a      	str	r2, [r3, #8]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2200      	movs	r2, #0
 8001a26:	60da      	str	r2, [r3, #12]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	611a      	str	r2, [r3, #16]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f04f 0200 	mov.w	r2, #0
 8001a34:	615a      	str	r2, [r3, #20]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	619a      	str	r2, [r3, #24]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	61da      	str	r2, [r3, #28]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2200      	movs	r2, #0
 8001a46:	621a      	str	r2, [r3, #32]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4618      	mov	r0, r3
 8001a52:	3708      	adds	r7, #8
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	0800c274 	.word	0x0800c274

08001a5c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b08a      	sub	sp, #40	; 0x28
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001a66:	2300      	movs	r3, #0
 8001a68:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6859      	ldr	r1, [r3, #4]
 8001a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a70:	683a      	ldr	r2, [r7, #0]
 8001a72:	4413      	add	r3, r2
 8001a74:	b2ca      	uxtb	r2, r1
 8001a76:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	0a19      	lsrs	r1, r3, #8
 8001a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a80:	3301      	adds	r3, #1
 8001a82:	683a      	ldr	r2, [r7, #0]
 8001a84:	4413      	add	r3, r2
 8001a86:	b2ca      	uxtb	r2, r1
 8001a88:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	0c19      	lsrs	r1, r3, #16
 8001a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a92:	3302      	adds	r3, #2
 8001a94:	683a      	ldr	r2, [r7, #0]
 8001a96:	4413      	add	r3, r2
 8001a98:	b2ca      	uxtb	r2, r1
 8001a9a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	0e19      	lsrs	r1, r3, #24
 8001aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa4:	3303      	adds	r3, #3
 8001aa6:	683a      	ldr	r2, [r7, #0]
 8001aa8:	4413      	add	r3, r2
 8001aaa:	b2ca      	uxtb	r2, r1
 8001aac:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8001aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab0:	3304      	adds	r3, #4
 8001ab2:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	623b      	str	r3, [r7, #32]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	6a3a      	ldr	r2, [r7, #32]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d22b      	bcs.n	8001b1a <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	68da      	ldr	r2, [r3, #12]
 8001ac6:	6a3b      	ldr	r3, [r7, #32]
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	4413      	add	r3, r2
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8001ad0:	6939      	ldr	r1, [r7, #16]
 8001ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad4:	683a      	ldr	r2, [r7, #0]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	b2ca      	uxtb	r2, r1
 8001ada:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	0a19      	lsrs	r1, r3, #8
 8001ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	683a      	ldr	r2, [r7, #0]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	b2ca      	uxtb	r2, r1
 8001aea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	0c19      	lsrs	r1, r3, #16
 8001af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af2:	3302      	adds	r3, #2
 8001af4:	683a      	ldr	r2, [r7, #0]
 8001af6:	4413      	add	r3, r2
 8001af8:	b2ca      	uxtb	r2, r1
 8001afa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	0e19      	lsrs	r1, r3, #24
 8001b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b02:	3303      	adds	r3, #3
 8001b04:	683a      	ldr	r2, [r7, #0]
 8001b06:	4413      	add	r3, r2
 8001b08:	b2ca      	uxtb	r2, r1
 8001b0a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8001b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0e:	3304      	adds	r3, #4
 8001b10:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001b12:	6a3b      	ldr	r3, [r7, #32]
 8001b14:	3301      	adds	r3, #1
 8001b16:	623b      	str	r3, [r7, #32]
 8001b18:	e7ce      	b.n	8001ab8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6919      	ldr	r1, [r3, #16]
 8001b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b20:	683a      	ldr	r2, [r7, #0]
 8001b22:	4413      	add	r3, r2
 8001b24:	b2ca      	uxtb	r2, r1
 8001b26:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	691b      	ldr	r3, [r3, #16]
 8001b2c:	0a19      	lsrs	r1, r3, #8
 8001b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b30:	3301      	adds	r3, #1
 8001b32:	683a      	ldr	r2, [r7, #0]
 8001b34:	4413      	add	r3, r2
 8001b36:	b2ca      	uxtb	r2, r1
 8001b38:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	691b      	ldr	r3, [r3, #16]
 8001b3e:	0c19      	lsrs	r1, r3, #16
 8001b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b42:	3302      	adds	r3, #2
 8001b44:	683a      	ldr	r2, [r7, #0]
 8001b46:	4413      	add	r3, r2
 8001b48:	b2ca      	uxtb	r2, r1
 8001b4a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	691b      	ldr	r3, [r3, #16]
 8001b50:	0e19      	lsrs	r1, r3, #24
 8001b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b54:	3303      	adds	r3, #3
 8001b56:	683a      	ldr	r2, [r7, #0]
 8001b58:	4413      	add	r3, r2
 8001b5a:	b2ca      	uxtb	r2, r1
 8001b5c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8001b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b60:	3304      	adds	r3, #4
 8001b62:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001b64:	2300      	movs	r3, #0
 8001b66:	61fb      	str	r3, [r7, #28]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	691b      	ldr	r3, [r3, #16]
 8001b6c:	69fa      	ldr	r2, [r7, #28]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d22b      	bcs.n	8001bca <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	699a      	ldr	r2, [r3, #24]
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	009b      	lsls	r3, r3, #2
 8001b7a:	4413      	add	r3, r2
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8001b80:	68f9      	ldr	r1, [r7, #12]
 8001b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b84:	683a      	ldr	r2, [r7, #0]
 8001b86:	4413      	add	r3, r2
 8001b88:	b2ca      	uxtb	r2, r1
 8001b8a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	0a19      	lsrs	r1, r3, #8
 8001b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b92:	3301      	adds	r3, #1
 8001b94:	683a      	ldr	r2, [r7, #0]
 8001b96:	4413      	add	r3, r2
 8001b98:	b2ca      	uxtb	r2, r1
 8001b9a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	0c19      	lsrs	r1, r3, #16
 8001ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba2:	3302      	adds	r3, #2
 8001ba4:	683a      	ldr	r2, [r7, #0]
 8001ba6:	4413      	add	r3, r2
 8001ba8:	b2ca      	uxtb	r2, r1
 8001baa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	0e19      	lsrs	r1, r3, #24
 8001bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb2:	3303      	adds	r3, #3
 8001bb4:	683a      	ldr	r2, [r7, #0]
 8001bb6:	4413      	add	r3, r2
 8001bb8:	b2ca      	uxtb	r2, r1
 8001bba:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8001bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbe:	3304      	adds	r3, #4
 8001bc0:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	61fb      	str	r3, [r7, #28]
 8001bc8:	e7ce      	b.n	8001b68 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	69d9      	ldr	r1, [r3, #28]
 8001bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd0:	683a      	ldr	r2, [r7, #0]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	b2ca      	uxtb	r2, r1
 8001bd6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	69db      	ldr	r3, [r3, #28]
 8001bdc:	0a19      	lsrs	r1, r3, #8
 8001bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be0:	3301      	adds	r3, #1
 8001be2:	683a      	ldr	r2, [r7, #0]
 8001be4:	4413      	add	r3, r2
 8001be6:	b2ca      	uxtb	r2, r1
 8001be8:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	69db      	ldr	r3, [r3, #28]
 8001bee:	0c19      	lsrs	r1, r3, #16
 8001bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf2:	3302      	adds	r3, #2
 8001bf4:	683a      	ldr	r2, [r7, #0]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	b2ca      	uxtb	r2, r1
 8001bfa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	69db      	ldr	r3, [r3, #28]
 8001c00:	0e19      	lsrs	r1, r3, #24
 8001c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c04:	3303      	adds	r3, #3
 8001c06:	683a      	ldr	r2, [r7, #0]
 8001c08:	4413      	add	r3, r2
 8001c0a:	b2ca      	uxtb	r2, r1
 8001c0c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8001c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c10:	3304      	adds	r3, #4
 8001c12:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001c14:	2300      	movs	r3, #0
 8001c16:	61bb      	str	r3, [r7, #24]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	69db      	ldr	r3, [r3, #28]
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d228      	bcs.n	8001c74 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	4413      	add	r3, r2
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7fe faca 	bl	80001c8 <strlen>
 8001c34:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8001c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c38:	683a      	ldr	r2, [r7, #0]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	6979      	ldr	r1, [r7, #20]
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f003 fda4 	bl	800578c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c46:	3304      	adds	r3, #4
 8001c48:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8001c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4c:	683a      	ldr	r2, [r7, #0]
 8001c4e:	18d0      	adds	r0, r2, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	009b      	lsls	r3, r3, #2
 8001c58:	4413      	add	r3, r2
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	697a      	ldr	r2, [r7, #20]
 8001c5e:	4619      	mov	r1, r3
 8001c60:	f009 fef6 	bl	800ba50 <memcpy>
      offset += length_stringsi;
 8001c64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	4413      	add	r3, r2
 8001c6a:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	3301      	adds	r3, #1
 8001c70:	61bb      	str	r3, [r7, #24]
 8001c72:	e7d1      	b.n	8001c18 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 8001c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8001c76:	4618      	mov	r0, r3
 8001c78:	3728      	adds	r7, #40	; 0x28
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b08e      	sub	sp, #56	; 0x38
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
 8001c86:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001c8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c8e:	683a      	ldr	r2, [r7, #0]
 8001c90:	4413      	add	r3, r2
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001c96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c98:	3301      	adds	r3, #1
 8001c9a:	683a      	ldr	r2, [r7, #0]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	021b      	lsls	r3, r3, #8
 8001ca2:	6a3a      	ldr	r2, [r7, #32]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001caa:	3302      	adds	r3, #2
 8001cac:	683a      	ldr	r2, [r7, #0]
 8001cae:	4413      	add	r3, r2
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	041b      	lsls	r3, r3, #16
 8001cb4:	6a3a      	ldr	r2, [r7, #32]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cbc:	3303      	adds	r3, #3
 8001cbe:	683a      	ldr	r2, [r7, #0]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	061b      	lsls	r3, r3, #24
 8001cc6:	6a3a      	ldr	r2, [r7, #32]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8001ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cce:	3304      	adds	r3, #4
 8001cd0:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	6a3a      	ldr	r2, [r7, #32]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d90a      	bls.n	8001cf2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	68da      	ldr	r2, [r3, #12]
 8001ce0:	6a3b      	ldr	r3, [r7, #32]
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4610      	mov	r0, r2
 8001ce8:	f009 fec8 	bl	800ba7c <realloc>
 8001cec:	4602      	mov	r2, r0
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6a3a      	ldr	r2, [r7, #32]
 8001cf6:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	633b      	str	r3, [r7, #48]	; 0x30
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d236      	bcs.n	8001d74 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8001d06:	2300      	movs	r3, #0
 8001d08:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001d0e:	6839      	ldr	r1, [r7, #0]
 8001d10:	440a      	add	r2, r1
 8001d12:	7812      	ldrb	r2, [r2, #0]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001d18:	697a      	ldr	r2, [r7, #20]
 8001d1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	6839      	ldr	r1, [r7, #0]
 8001d20:	440b      	add	r3, r1
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	021b      	lsls	r3, r3, #8
 8001d26:	4313      	orrs	r3, r2
 8001d28:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001d2a:	697a      	ldr	r2, [r7, #20]
 8001d2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d2e:	3302      	adds	r3, #2
 8001d30:	6839      	ldr	r1, [r7, #0]
 8001d32:	440b      	add	r3, r1
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	041b      	lsls	r3, r3, #16
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001d3c:	697a      	ldr	r2, [r7, #20]
 8001d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d40:	3303      	adds	r3, #3
 8001d42:	6839      	ldr	r1, [r7, #0]
 8001d44:	440b      	add	r3, r1
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	061b      	lsls	r3, r3, #24
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8001d4e:	697a      	ldr	r2, [r7, #20]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8001d54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d56:	3304      	adds	r3, #4
 8001d58:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	68da      	ldr	r2, [r3, #12]
 8001d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	4413      	add	r3, r2
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	3208      	adds	r2, #8
 8001d68:	6812      	ldr	r2, [r2, #0]
 8001d6a:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8001d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d6e:	3301      	adds	r3, #1
 8001d70:	633b      	str	r3, [r7, #48]	; 0x30
 8001d72:	e7c3      	b.n	8001cfc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001d74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d76:	683a      	ldr	r2, [r7, #0]
 8001d78:	4413      	add	r3, r2
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d80:	3301      	adds	r3, #1
 8001d82:	683a      	ldr	r2, [r7, #0]
 8001d84:	4413      	add	r3, r2
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	021b      	lsls	r3, r3, #8
 8001d8a:	69fa      	ldr	r2, [r7, #28]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001d90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d92:	3302      	adds	r3, #2
 8001d94:	683a      	ldr	r2, [r7, #0]
 8001d96:	4413      	add	r3, r2
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	041b      	lsls	r3, r3, #16
 8001d9c:	69fa      	ldr	r2, [r7, #28]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001da2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001da4:	3303      	adds	r3, #3
 8001da6:	683a      	ldr	r2, [r7, #0]
 8001da8:	4413      	add	r3, r2
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	061b      	lsls	r3, r3, #24
 8001dae:	69fa      	ldr	r2, [r7, #28]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8001db4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001db6:	3304      	adds	r3, #4
 8001db8:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	691b      	ldr	r3, [r3, #16]
 8001dbe:	69fa      	ldr	r2, [r7, #28]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d90a      	bls.n	8001dda <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	699a      	ldr	r2, [r3, #24]
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4610      	mov	r0, r2
 8001dd0:	f009 fe54 	bl	800ba7c <realloc>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	69fa      	ldr	r2, [r7, #28]
 8001dde:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8001de0:	2300      	movs	r3, #0
 8001de2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	691b      	ldr	r3, [r3, #16]
 8001de8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d236      	bcs.n	8001e5c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8001dee:	2300      	movs	r3, #0
 8001df0:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001df6:	6839      	ldr	r1, [r7, #0]
 8001df8:	440a      	add	r2, r1
 8001dfa:	7812      	ldrb	r2, [r2, #0]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001e00:	693a      	ldr	r2, [r7, #16]
 8001e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e04:	3301      	adds	r3, #1
 8001e06:	6839      	ldr	r1, [r7, #0]
 8001e08:	440b      	add	r3, r1
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	021b      	lsls	r3, r3, #8
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e16:	3302      	adds	r3, #2
 8001e18:	6839      	ldr	r1, [r7, #0]
 8001e1a:	440b      	add	r3, r1
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	041b      	lsls	r3, r3, #16
 8001e20:	4313      	orrs	r3, r2
 8001e22:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001e24:	693a      	ldr	r2, [r7, #16]
 8001e26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e28:	3303      	adds	r3, #3
 8001e2a:	6839      	ldr	r1, [r7, #0]
 8001e2c:	440b      	add	r3, r1
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	061b      	lsls	r3, r3, #24
 8001e32:	4313      	orrs	r3, r2
 8001e34:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8001e36:	693a      	ldr	r2, [r7, #16]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8001e3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e3e:	3304      	adds	r3, #4
 8001e40:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	699a      	ldr	r2, [r3, #24]
 8001e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	4413      	add	r3, r2
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	3214      	adds	r2, #20
 8001e50:	6812      	ldr	r2, [r2, #0]
 8001e52:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8001e54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e56:	3301      	adds	r3, #1
 8001e58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e5a:	e7c3      	b.n	8001de4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001e5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e5e:	683a      	ldr	r2, [r7, #0]
 8001e60:	4413      	add	r3, r2
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e68:	3301      	adds	r3, #1
 8001e6a:	683a      	ldr	r2, [r7, #0]
 8001e6c:	4413      	add	r3, r2
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	021b      	lsls	r3, r3, #8
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001e78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e7a:	3302      	adds	r3, #2
 8001e7c:	683a      	ldr	r2, [r7, #0]
 8001e7e:	4413      	add	r3, r2
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	041b      	lsls	r3, r3, #16
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001e8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e8c:	3303      	adds	r3, #3
 8001e8e:	683a      	ldr	r2, [r7, #0]
 8001e90:	4413      	add	r3, r2
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	061b      	lsls	r3, r3, #24
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8001e9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e9e:	3304      	adds	r3, #4
 8001ea0:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	69db      	ldr	r3, [r3, #28]
 8001ea6:	69ba      	ldr	r2, [r7, #24]
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d90a      	bls.n	8001ec2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	4610      	mov	r0, r2
 8001eb8:	f009 fde0 	bl	800ba7c <realloc>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8001ec8:	2300      	movs	r3, #0
 8001eca:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	69db      	ldr	r3, [r3, #28]
 8001ed0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d23f      	bcs.n	8001f56 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8001ed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ed8:	683a      	ldr	r2, [r7, #0]
 8001eda:	441a      	add	r2, r3
 8001edc:	f107 030c 	add.w	r3, r7, #12
 8001ee0:	4611      	mov	r1, r2
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f003 fc70 	bl	80057c8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001eea:	3304      	adds	r3, #4
 8001eec:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ef0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ef2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d20c      	bcs.n	8001f18 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8001efe:	683a      	ldr	r2, [r7, #0]
 8001f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f02:	441a      	add	r2, r3
 8001f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f06:	3b01      	subs	r3, #1
 8001f08:	6839      	ldr	r1, [r7, #0]
 8001f0a:	440b      	add	r3, r1
 8001f0c:	7812      	ldrb	r2, [r2, #0]
 8001f0e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f12:	3301      	adds	r3, #1
 8001f14:	627b      	str	r3, [r7, #36]	; 0x24
 8001f16:	e7ec      	b.n	8001ef2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8001f18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	3b01      	subs	r3, #1
 8001f20:	683a      	ldr	r2, [r7, #0]
 8001f22:	4413      	add	r3, r2
 8001f24:	2200      	movs	r2, #0
 8001f26:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8001f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f2a:	3b01      	subs	r3, #1
 8001f2c:	683a      	ldr	r2, [r7, #0]
 8001f2e:	441a      	add	r2, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8001f34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	4413      	add	r3, r2
 8001f3a:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	4413      	add	r3, r2
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	3220      	adds	r2, #32
 8001f4a:	6812      	ldr	r2, [r2, #0]
 8001f4c:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8001f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f50:	3301      	adds	r3, #1
 8001f52:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f54:	e7ba      	b.n	8001ecc <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8001f56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3738      	adds	r7, #56	; 0x38
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	4b03      	ldr	r3, [pc, #12]	; (8001f78 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	0800c138 	.word	0x0800c138

08001f7c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	4b03      	ldr	r3, [pc, #12]	; (8001f94 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8001f86:	4618      	mov	r0, r3
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	0800be48 	.word	0x0800be48

08001f98 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8001f98:	b480      	push	{r7}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	60b9      	str	r1, [r7, #8]
 8001fa2:	607a      	str	r2, [r7, #4]
 8001fa4:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	68ba      	ldr	r2, [r7, #8]
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	687a      	ldr	r2, [r7, #4]
 8001fb0:	605a      	str	r2, [r3, #4]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	683a      	ldr	r2, [r7, #0]
 8001fb6:	611a      	str	r2, [r3, #16]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3714      	adds	r7, #20
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr

08001fc6 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	b082      	sub	sp, #8
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
 8001fce:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	68d8      	ldr	r0, [r3, #12]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	6891      	ldr	r1, [r2, #8]
 8001fe0:	683a      	ldr	r2, [r7, #0]
 8001fe2:	4798      	blx	r3
 8001fe4:	4603      	mov	r3, r0
  };
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3708      	adds	r7, #8
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}

08001fee <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8001fee:	b480      	push	{r7}
 8001ff0:	b083      	sub	sp, #12
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	691b      	ldr	r3, [r3, #16]
  }
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	370c      	adds	r7, #12
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr

08002006 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8002006:	b480      	push	{r7}
 8002008:	b083      	sub	sp, #12
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800201c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002020:	4618      	mov	r0, r3
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 1024;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
      huart(&huart4), rind(0), twind(0), tfind(0){
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	4a0a      	ldr	r2, [pc, #40]	; (8002060 <_ZN13STM32HardwareC1Ev+0x34>)
 8002038:	601a      	str	r2, [r3, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	f8c3 2608 	str.w	r2, [r3, #1544]	; 0x608
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
    }
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4618      	mov	r0, r3
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr
 8002060:	20000124 	.word	0x20000124

08002064 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f000 f804 	bl	800207a <_ZN13STM32Hardware10reset_rbufEv>
    }
 8002072:	bf00      	nop
 8002074:	3708      	adds	r7, #8
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}

0800207a <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 800207a:	b580      	push	{r7, lr}
 800207c:	b082      	sub	sp, #8
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6818      	ldr	r0, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	3304      	adds	r3, #4
 800208a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800208e:	4619      	mov	r1, r3
 8002090:	f006 fd44 	bl	8008b1c <HAL_UART_Receive_DMA>
    }
 8002094:	bf00      	nop
 8002096:	3708      	adds	r7, #8
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}

0800209c <_ZN13STM32Hardware4readEv>:

    int read(){
 800209c:	b590      	push	{r4, r7, lr}
 800209e:	b085      	sub	sp, #20
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
      int c = -1;
 80020a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020a8:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f7ff ffa8 	bl	8002006 <_ZN13STM32Hardware10getRdmaIndEv>
 80020b6:	4603      	mov	r3, r0
 80020b8:	429c      	cmp	r4, r3
 80020ba:	bf14      	ite	ne
 80020bc:	2301      	movne	r3, #1
 80020be:	2300      	moveq	r3, #0
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d012      	beq.n	80020ec <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80020cc:	1c59      	adds	r1, r3, #1
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	4413      	add	r3, r2
 80020d8:	791b      	ldrb	r3, [r3, #4]
 80020da:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80020e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 80020ec:	68fb      	ldr	r3, [r7, #12]
    }
 80020ee:	4618      	mov	r0, r3
 80020f0:	3714      	adds	r7, #20
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd90      	pop	{r4, r7, pc}
	...

080020f8 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002108:	b2db      	uxtb	r3, r3
 800210a:	2b20      	cmp	r3, #32
 800210c:	d108      	bne.n	8002120 <_ZN13STM32Hardware5flushEv+0x28>
 800210e:	4b28      	ldr	r3, [pc, #160]	; (80021b0 <_ZN13STM32Hardware5flushEv+0xb8>)
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	f083 0301 	eor.w	r3, r3, #1
 8002116:	b2db      	uxtb	r3, r3
 8002118:	2b00      	cmp	r3, #0
 800211a:	d001      	beq.n	8002120 <_ZN13STM32Hardware5flushEv+0x28>
 800211c:	2301      	movs	r3, #1
 800211e:	e000      	b.n	8002122 <_ZN13STM32Hardware5flushEv+0x2a>
 8002120:	2300      	movs	r3, #0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d03f      	beq.n	80021a6 <_ZN13STM32Hardware5flushEv+0xae>
        mutex = true;
 8002126:	4b22      	ldr	r3, [pc, #136]	; (80021b0 <_ZN13STM32Hardware5flushEv+0xb8>)
 8002128:	2201      	movs	r2, #1
 800212a:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	f8d3 2608 	ldr.w	r2, [r3, #1544]	; 0x608
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	f8d3 360c 	ldr.w	r3, [r3, #1548]	; 0x60c
 8002138:	429a      	cmp	r2, r3
 800213a:	d031      	beq.n	80021a0 <_ZN13STM32Hardware5flushEv+0xa8>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f8d3 260c 	ldr.w	r2, [r3, #1548]	; 0x60c
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
 8002148:	429a      	cmp	r2, r3
 800214a:	d20a      	bcs.n	8002162 <_ZN13STM32Hardware5flushEv+0x6a>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
 8002152:	b29a      	uxth	r2, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f8d3 360c 	ldr.w	r3, [r3, #1548]	; 0x60c
 800215a:	b29b      	uxth	r3, r3
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	b29b      	uxth	r3, r3
 8002160:	e006      	b.n	8002170 <_ZN13STM32Hardware5flushEv+0x78>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f8d3 360c 	ldr.w	r3, [r3, #1548]	; 0x60c
 8002168:	b29b      	uxth	r3, r3
 800216a:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 800216e:	b29b      	uxth	r3, r3
 8002170:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6818      	ldr	r0, [r3, #0]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	f8d3 360c 	ldr.w	r3, [r3, #1548]	; 0x60c
 800217c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	4413      	add	r3, r2
 8002184:	89fa      	ldrh	r2, [r7, #14]
 8002186:	4619      	mov	r1, r3
 8002188:	f006 fc4a 	bl	8008a20 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f8d3 260c 	ldr.w	r2, [r3, #1548]	; 0x60c
 8002192:	89fb      	ldrh	r3, [r7, #14]
 8002194:	4413      	add	r3, r2
 8002196:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f8c3 260c 	str.w	r2, [r3, #1548]	; 0x60c
        }
        mutex = false;
 80021a0:	4b03      	ldr	r3, [pc, #12]	; (80021b0 <_ZN13STM32Hardware5flushEv+0xb8>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	701a      	strb	r2, [r3, #0]
      }
    }
 80021a6:	bf00      	nop
 80021a8:	3710      	adds	r7, #16
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	20000228 	.word	0x20000228

080021b4 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b086      	sub	sp, #24
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	607a      	str	r2, [r7, #4]
      int n = length;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021ca:	bfa8      	it	ge
 80021cc:	f44f 6380 	movge.w	r3, #1024	; 0x400
 80021d0:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
 80021d8:	f5c3 6280 	rsb	r2, r3, #1024	; 0x400
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	4293      	cmp	r3, r2
 80021e0:	bf28      	it	cs
 80021e2:	4613      	movcs	r3, r2
 80021e4:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
 80021ec:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80021f0:	68fa      	ldr	r2, [r7, #12]
 80021f2:	4413      	add	r3, r2
 80021f4:	693a      	ldr	r2, [r7, #16]
 80021f6:	68b9      	ldr	r1, [r7, #8]
 80021f8:	4618      	mov	r0, r3
 80021fa:	f009 fc29 	bl	800ba50 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	f8d3 2608 	ldr.w	r2, [r3, #1544]	; 0x608
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	4413      	add	r3, r2
 8002208:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f8c3 2608 	str.w	r2, [r3, #1544]	; 0x608

      if(n != n_tail){
 8002212:	697a      	ldr	r2, [r7, #20]
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	429a      	cmp	r2, r3
 8002218:	d00b      	beq.n	8002232 <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	f503 7002 	add.w	r0, r3, #520	; 0x208
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	68ba      	ldr	r2, [r7, #8]
 8002224:	18d1      	adds	r1, r2, r3
 8002226:	697a      	ldr	r2, [r7, #20]
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	461a      	mov	r2, r3
 800222e:	f009 fc0f 	bl	800ba50 <memcpy>
      }

      flush();
 8002232:	68f8      	ldr	r0, [r7, #12]
 8002234:	f7ff ff60 	bl	80020f8 <_ZN13STM32Hardware5flushEv>
    }
 8002238:	bf00      	nop
 800223a:	3718      	adds	r7, #24
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}

08002240 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	f004 fc8a 	bl	8006b60 <HAL_GetTick>
 800224c:	4603      	mov	r3, r0
 800224e:	4618      	mov	r0, r3
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
	...

08002258 <_ZN8std_msgs5Int32C1Ev>:
  {
    public:
      typedef int32_t _data_type;
      _data_type data;

    Int32():
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
      data(0)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	4618      	mov	r0, r3
 8002264:	f7ff f858 	bl	8001318 <_ZN3ros3MsgC1Ev>
 8002268:	4a05      	ldr	r2, [pc, #20]	; (8002280 <_ZN8std_msgs5Int32C1Ev+0x28>)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	601a      	str	r2, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	605a      	str	r2, [r3, #4]
    {
    }
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	4618      	mov	r0, r3
 8002278:	3708      	adds	r7, #8
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	0800c248 	.word	0x0800c248

08002284 <_ZNK8std_msgs5Int329serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002284:	b480      	push	{r7}
 8002286:	b085      	sub	sp, #20
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800228e:	2300      	movs	r3, #0
 8002290:	60fb      	str	r3, [r7, #12]
      union {
        int32_t real;
        uint32_t base;
      } u_data;
      u_data.real = this->data;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	60bb      	str	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8002298:	68b9      	ldr	r1, [r7, #8]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	683a      	ldr	r2, [r7, #0]
 800229e:	4413      	add	r3, r2
 80022a0:	b2ca      	uxtb	r2, r1
 80022a2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	0a19      	lsrs	r1, r3, #8
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	3301      	adds	r3, #1
 80022ac:	683a      	ldr	r2, [r7, #0]
 80022ae:	4413      	add	r3, r2
 80022b0:	b2ca      	uxtb	r2, r1
 80022b2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_data.base >> (8 * 2)) & 0xFF;
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	0c19      	lsrs	r1, r3, #16
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	3302      	adds	r3, #2
 80022bc:	683a      	ldr	r2, [r7, #0]
 80022be:	4413      	add	r3, r2
 80022c0:	b2ca      	uxtb	r2, r1
 80022c2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_data.base >> (8 * 3)) & 0xFF;
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	0e19      	lsrs	r1, r3, #24
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	3303      	adds	r3, #3
 80022cc:	683a      	ldr	r2, [r7, #0]
 80022ce:	4413      	add	r3, r2
 80022d0:	b2ca      	uxtb	r2, r1
 80022d2:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	3304      	adds	r3, #4
 80022d8:	60fb      	str	r3, [r7, #12]
      return offset;
 80022da:	68fb      	ldr	r3, [r7, #12]
    }
 80022dc:	4618      	mov	r0, r3
 80022de:	3714      	adds	r7, #20
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <_ZN8std_msgs5Int3211deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80022e8:	b480      	push	{r7}
 80022ea:	b085      	sub	sp, #20
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80022f2:	2300      	movs	r3, #0
 80022f4:	60fb      	str	r3, [r7, #12]
      union {
        int32_t real;
        uint32_t base;
      } u_data;
      u_data.base = 0;
 80022f6:	2300      	movs	r3, #0
 80022f8:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	68fa      	ldr	r2, [r7, #12]
 80022fe:	6839      	ldr	r1, [r7, #0]
 8002300:	440a      	add	r2, r1
 8002302:	7812      	ldrb	r2, [r2, #0]
 8002304:	4313      	orrs	r3, r2
 8002306:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002308:	68ba      	ldr	r2, [r7, #8]
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	3301      	adds	r3, #1
 800230e:	6839      	ldr	r1, [r7, #0]
 8002310:	440b      	add	r3, r1
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	021b      	lsls	r3, r3, #8
 8002316:	4313      	orrs	r3, r2
 8002318:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800231a:	68ba      	ldr	r2, [r7, #8]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	3302      	adds	r3, #2
 8002320:	6839      	ldr	r1, [r7, #0]
 8002322:	440b      	add	r3, r1
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	041b      	lsls	r3, r3, #16
 8002328:	4313      	orrs	r3, r2
 800232a:	60bb      	str	r3, [r7, #8]
      u_data.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800232c:	68ba      	ldr	r2, [r7, #8]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	3303      	adds	r3, #3
 8002332:	6839      	ldr	r1, [r7, #0]
 8002334:	440b      	add	r3, r1
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	061b      	lsls	r3, r3, #24
 800233a:	4313      	orrs	r3, r2
 800233c:	60bb      	str	r3, [r7, #8]
      this->data = u_data.real;
 800233e:	68ba      	ldr	r2, [r7, #8]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	3304      	adds	r3, #4
 8002348:	60fb      	str	r3, [r7, #12]
     return offset;
 800234a:	68fb      	ldr	r3, [r7, #12]
    }
 800234c:	4618      	mov	r0, r3
 800234e:	3714      	adds	r7, #20
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <_ZN8std_msgs5Int327getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Int32"; };
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	4b03      	ldr	r3, [pc, #12]	; (8002370 <_ZN8std_msgs5Int327getTypeEv+0x18>)
 8002362:	4618      	mov	r0, r3
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	0800be6c 	.word	0x0800be6c

08002374 <_ZN8std_msgs5Int326getMD5Ev>:
    virtual const char * getMD5() override { return "da5909fbe378aeaf85e547e830cc1bb7"; };
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	4b03      	ldr	r3, [pc, #12]	; (800238c <_ZN8std_msgs5Int326getMD5Ev+0x18>)
 800237e:	4618      	mov	r0, r3
 8002380:	370c      	adds	r7, #12
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	0800be7c 	.word	0x0800be7c

08002390 <_ZN8std_msgs6HeaderC1Ev>:
      typedef ros::Time _stamp_type;
      _stamp_type stamp;
      typedef const char* _frame_id_type;
      _frame_id_type frame_id;

    Header():
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
      seq(0),
      stamp(),
      frame_id("")
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	4618      	mov	r0, r3
 800239c:	f7fe ffbc 	bl	8001318 <_ZN3ros3MsgC1Ev>
 80023a0:	4a09      	ldr	r2, [pc, #36]	; (80023c8 <_ZN8std_msgs6HeaderC1Ev+0x38>)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	601a      	str	r2, [r3, #0]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	605a      	str	r2, [r3, #4]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	3308      	adds	r3, #8
 80023b0:	4618      	mov	r0, r3
 80023b2:	f7fe ffa0 	bl	80012f6 <_ZN3ros4TimeC1Ev>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a04      	ldr	r2, [pc, #16]	; (80023cc <_ZN8std_msgs6HeaderC1Ev+0x3c>)
 80023ba:	611a      	str	r2, [r3, #16]
    {
    }
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	4618      	mov	r0, r3
 80023c0:	3708      	adds	r7, #8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	0800c230 	.word	0x0800c230
 80023cc:	0800bdcc 	.word	0x0800bdcc

080023d0 <_ZNK8std_msgs6Header9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80023da:	2300      	movs	r3, #0
 80023dc:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->seq >> (8 * 0)) & 0xFF;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6859      	ldr	r1, [r3, #4]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	683a      	ldr	r2, [r7, #0]
 80023e6:	4413      	add	r3, r2
 80023e8:	b2ca      	uxtb	r2, r1
 80023ea:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->seq >> (8 * 1)) & 0xFF;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	0a19      	lsrs	r1, r3, #8
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	3301      	adds	r3, #1
 80023f6:	683a      	ldr	r2, [r7, #0]
 80023f8:	4413      	add	r3, r2
 80023fa:	b2ca      	uxtb	r2, r1
 80023fc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->seq >> (8 * 2)) & 0xFF;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	0c19      	lsrs	r1, r3, #16
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	3302      	adds	r3, #2
 8002408:	683a      	ldr	r2, [r7, #0]
 800240a:	4413      	add	r3, r2
 800240c:	b2ca      	uxtb	r2, r1
 800240e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->seq >> (8 * 3)) & 0xFF;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	0e19      	lsrs	r1, r3, #24
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	3303      	adds	r3, #3
 800241a:	683a      	ldr	r2, [r7, #0]
 800241c:	4413      	add	r3, r2
 800241e:	b2ca      	uxtb	r2, r1
 8002420:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->seq);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	3304      	adds	r3, #4
 8002426:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.sec >> (8 * 0)) & 0xFF;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6899      	ldr	r1, [r3, #8]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	683a      	ldr	r2, [r7, #0]
 8002430:	4413      	add	r3, r2
 8002432:	b2ca      	uxtb	r2, r1
 8002434:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.sec >> (8 * 1)) & 0xFF;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	0a19      	lsrs	r1, r3, #8
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	3301      	adds	r3, #1
 8002440:	683a      	ldr	r2, [r7, #0]
 8002442:	4413      	add	r3, r2
 8002444:	b2ca      	uxtb	r2, r1
 8002446:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.sec >> (8 * 2)) & 0xFF;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	0c19      	lsrs	r1, r3, #16
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	3302      	adds	r3, #2
 8002452:	683a      	ldr	r2, [r7, #0]
 8002454:	4413      	add	r3, r2
 8002456:	b2ca      	uxtb	r2, r1
 8002458:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.sec >> (8 * 3)) & 0xFF;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	0e19      	lsrs	r1, r3, #24
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	3303      	adds	r3, #3
 8002464:	683a      	ldr	r2, [r7, #0]
 8002466:	4413      	add	r3, r2
 8002468:	b2ca      	uxtb	r2, r1
 800246a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.sec);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	3304      	adds	r3, #4
 8002470:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.nsec >> (8 * 0)) & 0xFF;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	68d9      	ldr	r1, [r3, #12]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	683a      	ldr	r2, [r7, #0]
 800247a:	4413      	add	r3, r2
 800247c:	b2ca      	uxtb	r2, r1
 800247e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	0a19      	lsrs	r1, r3, #8
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	3301      	adds	r3, #1
 800248a:	683a      	ldr	r2, [r7, #0]
 800248c:	4413      	add	r3, r2
 800248e:	b2ca      	uxtb	r2, r1
 8002490:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	0c19      	lsrs	r1, r3, #16
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	3302      	adds	r3, #2
 800249c:	683a      	ldr	r2, [r7, #0]
 800249e:	4413      	add	r3, r2
 80024a0:	b2ca      	uxtb	r2, r1
 80024a2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	0e19      	lsrs	r1, r3, #24
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	3303      	adds	r3, #3
 80024ae:	683a      	ldr	r2, [r7, #0]
 80024b0:	4413      	add	r3, r2
 80024b2:	b2ca      	uxtb	r2, r1
 80024b4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.nsec);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	3304      	adds	r3, #4
 80024ba:	60fb      	str	r3, [r7, #12]
      uint32_t length_frame_id = strlen(this->frame_id);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	691b      	ldr	r3, [r3, #16]
 80024c0:	4618      	mov	r0, r3
 80024c2:	f7fd fe81 	bl	80001c8 <strlen>
 80024c6:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_frame_id);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	683a      	ldr	r2, [r7, #0]
 80024cc:	4413      	add	r3, r2
 80024ce:	68b9      	ldr	r1, [r7, #8]
 80024d0:	4618      	mov	r0, r3
 80024d2:	f003 f95b 	bl	800578c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	3304      	adds	r3, #4
 80024da:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->frame_id, length_frame_id);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	683a      	ldr	r2, [r7, #0]
 80024e0:	18d0      	adds	r0, r2, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	691b      	ldr	r3, [r3, #16]
 80024e6:	68ba      	ldr	r2, [r7, #8]
 80024e8:	4619      	mov	r1, r3
 80024ea:	f009 fab1 	bl	800ba50 <memcpy>
      offset += length_frame_id;
 80024ee:	68fa      	ldr	r2, [r7, #12]
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	4413      	add	r3, r2
 80024f4:	60fb      	str	r3, [r7, #12]
      return offset;
 80024f6:	68fb      	ldr	r3, [r7, #12]
    }
 80024f8:	4618      	mov	r0, r3
 80024fa:	3710      	adds	r7, #16
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}

08002500 <_ZN8std_msgs6Header11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002500:	b580      	push	{r7, lr}
 8002502:	b086      	sub	sp, #24
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800250a:	2300      	movs	r3, #0
 800250c:	613b      	str	r3, [r7, #16]
      this->seq =  ((uint32_t) (*(inbuffer + offset)));
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	683a      	ldr	r2, [r7, #0]
 8002512:	4413      	add	r3, r2
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	461a      	mov	r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685a      	ldr	r2, [r3, #4]
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	3301      	adds	r3, #1
 8002524:	6839      	ldr	r1, [r7, #0]
 8002526:	440b      	add	r3, r1
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	021b      	lsls	r3, r3, #8
 800252c:	431a      	orrs	r2, r3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685a      	ldr	r2, [r3, #4]
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	3302      	adds	r3, #2
 800253a:	6839      	ldr	r1, [r7, #0]
 800253c:	440b      	add	r3, r1
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	041b      	lsls	r3, r3, #16
 8002542:	431a      	orrs	r2, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685a      	ldr	r2, [r3, #4]
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	3303      	adds	r3, #3
 8002550:	6839      	ldr	r1, [r7, #0]
 8002552:	440b      	add	r3, r1
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	061b      	lsls	r3, r3, #24
 8002558:	431a      	orrs	r2, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->seq);
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	3304      	adds	r3, #4
 8002562:	613b      	str	r3, [r7, #16]
      this->stamp.sec =  ((uint32_t) (*(inbuffer + offset)));
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	683a      	ldr	r2, [r7, #0]
 8002568:	4413      	add	r3, r2
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	461a      	mov	r2, r3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	689a      	ldr	r2, [r3, #8]
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	3301      	adds	r3, #1
 800257a:	6839      	ldr	r1, [r7, #0]
 800257c:	440b      	add	r3, r1
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	021b      	lsls	r3, r3, #8
 8002582:	431a      	orrs	r2, r3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	689a      	ldr	r2, [r3, #8]
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	3302      	adds	r3, #2
 8002590:	6839      	ldr	r1, [r7, #0]
 8002592:	440b      	add	r3, r1
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	041b      	lsls	r3, r3, #16
 8002598:	431a      	orrs	r2, r3
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	689a      	ldr	r2, [r3, #8]
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	3303      	adds	r3, #3
 80025a6:	6839      	ldr	r1, [r7, #0]
 80025a8:	440b      	add	r3, r1
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	061b      	lsls	r3, r3, #24
 80025ae:	431a      	orrs	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->stamp.sec);
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	3304      	adds	r3, #4
 80025b8:	613b      	str	r3, [r7, #16]
      this->stamp.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	683a      	ldr	r2, [r7, #0]
 80025be:	4413      	add	r3, r2
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	461a      	mov	r2, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	68da      	ldr	r2, [r3, #12]
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	3301      	adds	r3, #1
 80025d0:	6839      	ldr	r1, [r7, #0]
 80025d2:	440b      	add	r3, r1
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	021b      	lsls	r3, r3, #8
 80025d8:	431a      	orrs	r2, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	68da      	ldr	r2, [r3, #12]
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	3302      	adds	r3, #2
 80025e6:	6839      	ldr	r1, [r7, #0]
 80025e8:	440b      	add	r3, r1
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	041b      	lsls	r3, r3, #16
 80025ee:	431a      	orrs	r2, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	68da      	ldr	r2, [r3, #12]
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	3303      	adds	r3, #3
 80025fc:	6839      	ldr	r1, [r7, #0]
 80025fe:	440b      	add	r3, r1
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	061b      	lsls	r3, r3, #24
 8002604:	431a      	orrs	r2, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stamp.nsec);
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	3304      	adds	r3, #4
 800260e:	613b      	str	r3, [r7, #16]
      uint32_t length_frame_id;
      arrToVar(length_frame_id, (inbuffer + offset));
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	683a      	ldr	r2, [r7, #0]
 8002614:	441a      	add	r2, r3
 8002616:	f107 030c 	add.w	r3, r7, #12
 800261a:	4611      	mov	r1, r2
 800261c:	4618      	mov	r0, r3
 800261e:	f003 f8d3 	bl	80057c8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	3304      	adds	r3, #4
 8002626:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	617b      	str	r3, [r7, #20]
 800262c:	693a      	ldr	r2, [r7, #16]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	4413      	add	r3, r2
 8002632:	697a      	ldr	r2, [r7, #20]
 8002634:	429a      	cmp	r2, r3
 8002636:	d20c      	bcs.n	8002652 <_ZN8std_msgs6Header11deserializeEPh+0x152>
          inbuffer[k-1]=inbuffer[k];
 8002638:	683a      	ldr	r2, [r7, #0]
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	441a      	add	r2, r3
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	3b01      	subs	r3, #1
 8002642:	6839      	ldr	r1, [r7, #0]
 8002644:	440b      	add	r3, r1
 8002646:	7812      	ldrb	r2, [r2, #0]
 8002648:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	3301      	adds	r3, #1
 800264e:	617b      	str	r3, [r7, #20]
 8002650:	e7ec      	b.n	800262c <_ZN8std_msgs6Header11deserializeEPh+0x12c>
      }
      inbuffer[offset+length_frame_id-1]=0;
 8002652:	693a      	ldr	r2, [r7, #16]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	4413      	add	r3, r2
 8002658:	3b01      	subs	r3, #1
 800265a:	683a      	ldr	r2, [r7, #0]
 800265c:	4413      	add	r3, r2
 800265e:	2200      	movs	r2, #0
 8002660:	701a      	strb	r2, [r3, #0]
      this->frame_id = (char *)(inbuffer + offset-1);
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	3b01      	subs	r3, #1
 8002666:	683a      	ldr	r2, [r7, #0]
 8002668:	441a      	add	r2, r3
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	611a      	str	r2, [r3, #16]
      offset += length_frame_id;
 800266e:	693a      	ldr	r2, [r7, #16]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	4413      	add	r3, r2
 8002674:	613b      	str	r3, [r7, #16]
     return offset;
 8002676:	693b      	ldr	r3, [r7, #16]
    }
 8002678:	4618      	mov	r0, r3
 800267a:	3718      	adds	r7, #24
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}

08002680 <_ZN8std_msgs6Header7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Header"; };
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	4b03      	ldr	r3, [pc, #12]	; (8002698 <_ZN8std_msgs6Header7getTypeEv+0x18>)
 800268a:	4618      	mov	r0, r3
 800268c:	370c      	adds	r7, #12
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	0800bea0 	.word	0x0800bea0

0800269c <_ZN8std_msgs6Header6getMD5Ev>:
    virtual const char * getMD5() override { return "2176decaecbce78abc3b96ef049fabed"; };
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	4b03      	ldr	r3, [pc, #12]	; (80026b4 <_ZN8std_msgs6Header6getMD5Ev+0x18>)
 80026a6:	4618      	mov	r0, r3
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	0800beb0 	.word	0x0800beb0

080026b8 <_ZN13geometry_msgs5PointC1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Point():
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7fe fe28 	bl	8001318 <_ZN3ros3MsgC1Ev>
 80026c8:	4a0e      	ldr	r2, [pc, #56]	; (8002704 <_ZN13geometry_msgs5PointC1Ev+0x4c>)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	601a      	str	r2, [r3, #0]
 80026ce:	6879      	ldr	r1, [r7, #4]
 80026d0:	f04f 0200 	mov.w	r2, #0
 80026d4:	f04f 0300 	mov.w	r3, #0
 80026d8:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80026dc:	6879      	ldr	r1, [r7, #4]
 80026de:	f04f 0200 	mov.w	r2, #0
 80026e2:	f04f 0300 	mov.w	r3, #0
 80026e6:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80026ea:	6879      	ldr	r1, [r7, #4]
 80026ec:	f04f 0200 	mov.w	r2, #0
 80026f0:	f04f 0300 	mov.w	r3, #0
 80026f4:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	4618      	mov	r0, r3
 80026fc:	3708      	adds	r7, #8
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	0800c218 	.word	0x0800c218

08002708 <_ZNK13geometry_msgs5Point9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002708:	b480      	push	{r7}
 800270a:	b08b      	sub	sp, #44	; 0x2c
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002712:	2300      	movs	r3, #0
 8002714:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800271c:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8002720:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002724:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002726:	6838      	ldr	r0, [r7, #0]
 8002728:	4401      	add	r1, r0
 800272a:	b2d3      	uxtb	r3, r2
 800272c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 800272e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002732:	f04f 0200 	mov.w	r2, #0
 8002736:	f04f 0300 	mov.w	r3, #0
 800273a:	0a02      	lsrs	r2, r0, #8
 800273c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002740:	0a0b      	lsrs	r3, r1, #8
 8002742:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002744:	3101      	adds	r1, #1
 8002746:	6838      	ldr	r0, [r7, #0]
 8002748:	4401      	add	r1, r0
 800274a:	b2d3      	uxtb	r3, r2
 800274c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 800274e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002752:	f04f 0200 	mov.w	r2, #0
 8002756:	f04f 0300 	mov.w	r3, #0
 800275a:	0c02      	lsrs	r2, r0, #16
 800275c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002760:	0c0b      	lsrs	r3, r1, #16
 8002762:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002764:	3102      	adds	r1, #2
 8002766:	6838      	ldr	r0, [r7, #0]
 8002768:	4401      	add	r1, r0
 800276a:	b2d3      	uxtb	r3, r2
 800276c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 800276e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002772:	f04f 0200 	mov.w	r2, #0
 8002776:	f04f 0300 	mov.w	r3, #0
 800277a:	0e02      	lsrs	r2, r0, #24
 800277c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002780:	0e0b      	lsrs	r3, r1, #24
 8002782:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002784:	3103      	adds	r1, #3
 8002786:	6838      	ldr	r0, [r7, #0]
 8002788:	4401      	add	r1, r0
 800278a:	b2d3      	uxtb	r3, r2
 800278c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 800278e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002792:	f04f 0200 	mov.w	r2, #0
 8002796:	f04f 0300 	mov.w	r3, #0
 800279a:	000a      	movs	r2, r1
 800279c:	2300      	movs	r3, #0
 800279e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027a0:	3104      	adds	r1, #4
 80027a2:	6838      	ldr	r0, [r7, #0]
 80027a4:	4401      	add	r1, r0
 80027a6:	b2d3      	uxtb	r3, r2
 80027a8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 80027aa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80027ae:	f04f 0200 	mov.w	r2, #0
 80027b2:	f04f 0300 	mov.w	r3, #0
 80027b6:	0a0a      	lsrs	r2, r1, #8
 80027b8:	2300      	movs	r3, #0
 80027ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027bc:	3105      	adds	r1, #5
 80027be:	6838      	ldr	r0, [r7, #0]
 80027c0:	4401      	add	r1, r0
 80027c2:	b2d3      	uxtb	r3, r2
 80027c4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 80027c6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80027ca:	f04f 0200 	mov.w	r2, #0
 80027ce:	f04f 0300 	mov.w	r3, #0
 80027d2:	0c0a      	lsrs	r2, r1, #16
 80027d4:	2300      	movs	r3, #0
 80027d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027d8:	3106      	adds	r1, #6
 80027da:	6838      	ldr	r0, [r7, #0]
 80027dc:	4401      	add	r1, r0
 80027de:	b2d3      	uxtb	r3, r2
 80027e0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 80027e2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80027e6:	f04f 0200 	mov.w	r2, #0
 80027ea:	f04f 0300 	mov.w	r3, #0
 80027ee:	0e0a      	lsrs	r2, r1, #24
 80027f0:	2300      	movs	r3, #0
 80027f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027f4:	3107      	adds	r1, #7
 80027f6:	6838      	ldr	r0, [r7, #0]
 80027f8:	4401      	add	r1, r0
 80027fa:	b2d3      	uxtb	r3, r2
 80027fc:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 80027fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002800:	3308      	adds	r3, #8
 8002802:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800280a:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 800280e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002812:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002814:	6838      	ldr	r0, [r7, #0]
 8002816:	4401      	add	r1, r0
 8002818:	b2d3      	uxtb	r3, r2
 800281a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 800281c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002820:	f04f 0200 	mov.w	r2, #0
 8002824:	f04f 0300 	mov.w	r3, #0
 8002828:	0a02      	lsrs	r2, r0, #8
 800282a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800282e:	0a0b      	lsrs	r3, r1, #8
 8002830:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002832:	3101      	adds	r1, #1
 8002834:	6838      	ldr	r0, [r7, #0]
 8002836:	4401      	add	r1, r0
 8002838:	b2d3      	uxtb	r3, r2
 800283a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 800283c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002840:	f04f 0200 	mov.w	r2, #0
 8002844:	f04f 0300 	mov.w	r3, #0
 8002848:	0c02      	lsrs	r2, r0, #16
 800284a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800284e:	0c0b      	lsrs	r3, r1, #16
 8002850:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002852:	3102      	adds	r1, #2
 8002854:	6838      	ldr	r0, [r7, #0]
 8002856:	4401      	add	r1, r0
 8002858:	b2d3      	uxtb	r3, r2
 800285a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 800285c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002860:	f04f 0200 	mov.w	r2, #0
 8002864:	f04f 0300 	mov.w	r3, #0
 8002868:	0e02      	lsrs	r2, r0, #24
 800286a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800286e:	0e0b      	lsrs	r3, r1, #24
 8002870:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002872:	3103      	adds	r1, #3
 8002874:	6838      	ldr	r0, [r7, #0]
 8002876:	4401      	add	r1, r0
 8002878:	b2d3      	uxtb	r3, r2
 800287a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 800287c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002880:	f04f 0200 	mov.w	r2, #0
 8002884:	f04f 0300 	mov.w	r3, #0
 8002888:	000a      	movs	r2, r1
 800288a:	2300      	movs	r3, #0
 800288c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800288e:	3104      	adds	r1, #4
 8002890:	6838      	ldr	r0, [r7, #0]
 8002892:	4401      	add	r1, r0
 8002894:	b2d3      	uxtb	r3, r2
 8002896:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8002898:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800289c:	f04f 0200 	mov.w	r2, #0
 80028a0:	f04f 0300 	mov.w	r3, #0
 80028a4:	0a0a      	lsrs	r2, r1, #8
 80028a6:	2300      	movs	r3, #0
 80028a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028aa:	3105      	adds	r1, #5
 80028ac:	6838      	ldr	r0, [r7, #0]
 80028ae:	4401      	add	r1, r0
 80028b0:	b2d3      	uxtb	r3, r2
 80028b2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 80028b4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80028b8:	f04f 0200 	mov.w	r2, #0
 80028bc:	f04f 0300 	mov.w	r3, #0
 80028c0:	0c0a      	lsrs	r2, r1, #16
 80028c2:	2300      	movs	r3, #0
 80028c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028c6:	3106      	adds	r1, #6
 80028c8:	6838      	ldr	r0, [r7, #0]
 80028ca:	4401      	add	r1, r0
 80028cc:	b2d3      	uxtb	r3, r2
 80028ce:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 80028d0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80028d4:	f04f 0200 	mov.w	r2, #0
 80028d8:	f04f 0300 	mov.w	r3, #0
 80028dc:	0e0a      	lsrs	r2, r1, #24
 80028de:	2300      	movs	r3, #0
 80028e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028e2:	3107      	adds	r1, #7
 80028e4:	6838      	ldr	r0, [r7, #0]
 80028e6:	4401      	add	r1, r0
 80028e8:	b2d3      	uxtb	r3, r2
 80028ea:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 80028ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ee:	3308      	adds	r3, #8
 80028f0:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80028f8:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 80028fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002900:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002902:	6838      	ldr	r0, [r7, #0]
 8002904:	4401      	add	r1, r0
 8002906:	b2d3      	uxtb	r3, r2
 8002908:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 800290a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800290e:	f04f 0200 	mov.w	r2, #0
 8002912:	f04f 0300 	mov.w	r3, #0
 8002916:	0a02      	lsrs	r2, r0, #8
 8002918:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800291c:	0a0b      	lsrs	r3, r1, #8
 800291e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002920:	3101      	adds	r1, #1
 8002922:	6838      	ldr	r0, [r7, #0]
 8002924:	4401      	add	r1, r0
 8002926:	b2d3      	uxtb	r3, r2
 8002928:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 800292a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800292e:	f04f 0200 	mov.w	r2, #0
 8002932:	f04f 0300 	mov.w	r3, #0
 8002936:	0c02      	lsrs	r2, r0, #16
 8002938:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800293c:	0c0b      	lsrs	r3, r1, #16
 800293e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002940:	3102      	adds	r1, #2
 8002942:	6838      	ldr	r0, [r7, #0]
 8002944:	4401      	add	r1, r0
 8002946:	b2d3      	uxtb	r3, r2
 8002948:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 800294a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800294e:	f04f 0200 	mov.w	r2, #0
 8002952:	f04f 0300 	mov.w	r3, #0
 8002956:	0e02      	lsrs	r2, r0, #24
 8002958:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800295c:	0e0b      	lsrs	r3, r1, #24
 800295e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002960:	3103      	adds	r1, #3
 8002962:	6838      	ldr	r0, [r7, #0]
 8002964:	4401      	add	r1, r0
 8002966:	b2d3      	uxtb	r3, r2
 8002968:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 800296a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800296e:	f04f 0200 	mov.w	r2, #0
 8002972:	f04f 0300 	mov.w	r3, #0
 8002976:	000a      	movs	r2, r1
 8002978:	2300      	movs	r3, #0
 800297a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800297c:	3104      	adds	r1, #4
 800297e:	6838      	ldr	r0, [r7, #0]
 8002980:	4401      	add	r1, r0
 8002982:	b2d3      	uxtb	r3, r2
 8002984:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8002986:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800298a:	f04f 0200 	mov.w	r2, #0
 800298e:	f04f 0300 	mov.w	r3, #0
 8002992:	0a0a      	lsrs	r2, r1, #8
 8002994:	2300      	movs	r3, #0
 8002996:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002998:	3105      	adds	r1, #5
 800299a:	6838      	ldr	r0, [r7, #0]
 800299c:	4401      	add	r1, r0
 800299e:	b2d3      	uxtb	r3, r2
 80029a0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 80029a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80029a6:	f04f 0200 	mov.w	r2, #0
 80029aa:	f04f 0300 	mov.w	r3, #0
 80029ae:	0c0a      	lsrs	r2, r1, #16
 80029b0:	2300      	movs	r3, #0
 80029b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029b4:	3106      	adds	r1, #6
 80029b6:	6838      	ldr	r0, [r7, #0]
 80029b8:	4401      	add	r1, r0
 80029ba:	b2d3      	uxtb	r3, r2
 80029bc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 80029be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80029c2:	f04f 0200 	mov.w	r2, #0
 80029c6:	f04f 0300 	mov.w	r3, #0
 80029ca:	0e0a      	lsrs	r2, r1, #24
 80029cc:	2300      	movs	r3, #0
 80029ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80029d0:	3107      	adds	r1, #7
 80029d2:	6838      	ldr	r0, [r7, #0]
 80029d4:	4401      	add	r1, r0
 80029d6:	b2d3      	uxtb	r3, r2
 80029d8:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 80029da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029dc:	3308      	adds	r3, #8
 80029de:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 80029e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80029e2:	4618      	mov	r0, r3
 80029e4:	372c      	adds	r7, #44	; 0x2c
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr

080029ee <_ZN13geometry_msgs5Point11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80029ee:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80029f2:	b0eb      	sub	sp, #428	; 0x1ac
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 80029fa:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 80029fe:	2300      	movs	r3, #0
 8002a00:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8002a04:	f04f 0200 	mov.w	r2, #0
 8002a08:	f04f 0300 	mov.w	r3, #0
 8002a0c:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002a10:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002a14:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002a18:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002a1c:	4413      	add	r3, r2
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	2200      	movs	r2, #0
 8002a24:	461c      	mov	r4, r3
 8002a26:	4615      	mov	r5, r2
 8002a28:	ea40 0804 	orr.w	r8, r0, r4
 8002a2c:	ea41 0905 	orr.w	r9, r1, r5
 8002a30:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002a34:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002a38:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002a3c:	1c5a      	adds	r2, r3, #1
 8002a3e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002a42:	4413      	add	r3, r2
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	2200      	movs	r2, #0
 8002a4a:	469a      	mov	sl, r3
 8002a4c:	4693      	mov	fp, r2
 8002a4e:	f04f 0200 	mov.w	r2, #0
 8002a52:	f04f 0300 	mov.w	r3, #0
 8002a56:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8002a5a:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8002a5e:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8002a62:	ea40 0402 	orr.w	r4, r0, r2
 8002a66:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 8002a6a:	430b      	orrs	r3, r1
 8002a6c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002a70:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8002a74:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002a78:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002a7c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002a80:	1c9a      	adds	r2, r3, #2
 8002a82:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002a86:	4413      	add	r3, r2
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8002a92:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 8002a96:	f04f 0200 	mov.w	r2, #0
 8002a9a:	f04f 0300 	mov.w	r3, #0
 8002a9e:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 8002aa2:	464c      	mov	r4, r9
 8002aa4:	0423      	lsls	r3, r4, #16
 8002aa6:	4644      	mov	r4, r8
 8002aa8:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002aac:	4644      	mov	r4, r8
 8002aae:	0422      	lsls	r2, r4, #16
 8002ab0:	ea40 0402 	orr.w	r4, r0, r2
 8002ab4:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 8002ab8:	430b      	orrs	r3, r1
 8002aba:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8002abe:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 8002ac2:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002ac6:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002aca:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002ace:	1cda      	adds	r2, r3, #3
 8002ad0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002ad4:	4413      	add	r3, r2
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	2200      	movs	r2, #0
 8002adc:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8002ae0:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8002ae4:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8002ae8:	4623      	mov	r3, r4
 8002aea:	0a1b      	lsrs	r3, r3, #8
 8002aec:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8002af0:	4623      	mov	r3, r4
 8002af2:	061b      	lsls	r3, r3, #24
 8002af4:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002af8:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 8002afc:	4623      	mov	r3, r4
 8002afe:	4303      	orrs	r3, r0
 8002b00:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002b04:	462b      	mov	r3, r5
 8002b06:	430b      	orrs	r3, r1
 8002b08:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002b0c:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 8002b10:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002b14:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002b18:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002b1c:	1d1a      	adds	r2, r3, #4
 8002b1e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002b22:	4413      	add	r3, r2
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8002b2e:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002b32:	f04f 0200 	mov.w	r2, #0
 8002b36:	f04f 0300 	mov.w	r3, #0
 8002b3a:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 8002b3e:	0023      	movs	r3, r4
 8002b40:	2200      	movs	r2, #0
 8002b42:	ea40 0402 	orr.w	r4, r0, r2
 8002b46:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 8002b4a:	430b      	orrs	r3, r1
 8002b4c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8002b50:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8002b54:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002b58:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002b5c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002b60:	1d5a      	adds	r2, r3, #5
 8002b62:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002b66:	4413      	add	r3, r2
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8002b72:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8002b76:	f04f 0200 	mov.w	r2, #0
 8002b7a:	f04f 0300 	mov.w	r3, #0
 8002b7e:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 8002b82:	0223      	lsls	r3, r4, #8
 8002b84:	2200      	movs	r2, #0
 8002b86:	ea40 0402 	orr.w	r4, r0, r2
 8002b8a:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 8002b8e:	430b      	orrs	r3, r1
 8002b90:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8002b94:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8002b98:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002b9c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002ba0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002ba4:	1d9a      	adds	r2, r3, #6
 8002ba6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002baa:	4413      	add	r3, r2
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002bb6:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8002bba:	f04f 0200 	mov.w	r2, #0
 8002bbe:	f04f 0300 	mov.w	r3, #0
 8002bc2:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 8002bc6:	0423      	lsls	r3, r4, #16
 8002bc8:	2200      	movs	r2, #0
 8002bca:	ea40 0402 	orr.w	r4, r0, r2
 8002bce:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 8002bd2:	430b      	orrs	r3, r1
 8002bd4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002bd8:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 8002bdc:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002be0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002be4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002be8:	1dda      	adds	r2, r3, #7
 8002bea:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002bee:	4413      	add	r3, r2
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8002bfa:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002bfe:	f04f 0200 	mov.w	r2, #0
 8002c02:	f04f 0300 	mov.w	r3, #0
 8002c06:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 8002c0a:	0623      	lsls	r3, r4, #24
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	ea40 0402 	orr.w	r4, r0, r2
 8002c12:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 8002c16:	430b      	orrs	r3, r1
 8002c18:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002c1c:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8002c20:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 8002c24:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8002c28:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002c2c:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8002c30:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002c34:	3308      	adds	r3, #8
 8002c36:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8002c3a:	f04f 0200 	mov.w	r2, #0
 8002c3e:	f04f 0300 	mov.w	r3, #0
 8002c42:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002c46:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002c4a:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002c4e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002c52:	4413      	add	r3, r2
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002c5e:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8002c62:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8002c66:	4623      	mov	r3, r4
 8002c68:	4303      	orrs	r3, r0
 8002c6a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002c6e:	462b      	mov	r3, r5
 8002c70:	430b      	orrs	r3, r1
 8002c72:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002c76:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8002c7a:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002c7e:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002c82:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002c86:	1c5a      	adds	r2, r3, #1
 8002c88:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002c8c:	4413      	add	r3, r2
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	2200      	movs	r2, #0
 8002c94:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002c98:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8002c9c:	f04f 0200 	mov.w	r2, #0
 8002ca0:	f04f 0300 	mov.w	r3, #0
 8002ca4:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8002ca8:	464c      	mov	r4, r9
 8002caa:	0223      	lsls	r3, r4, #8
 8002cac:	4644      	mov	r4, r8
 8002cae:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002cb2:	4644      	mov	r4, r8
 8002cb4:	0222      	lsls	r2, r4, #8
 8002cb6:	ea40 0402 	orr.w	r4, r0, r2
 8002cba:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 8002cbe:	430b      	orrs	r3, r1
 8002cc0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002cc4:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8002cc8:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002ccc:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002cd0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002cd4:	1c9a      	adds	r2, r3, #2
 8002cd6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002cda:	4413      	add	r3, r2
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002ce6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002cea:	f04f 0200 	mov.w	r2, #0
 8002cee:	f04f 0300 	mov.w	r3, #0
 8002cf2:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8002cf6:	464c      	mov	r4, r9
 8002cf8:	0423      	lsls	r3, r4, #16
 8002cfa:	4644      	mov	r4, r8
 8002cfc:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002d00:	4644      	mov	r4, r8
 8002d02:	0422      	lsls	r2, r4, #16
 8002d04:	ea40 0402 	orr.w	r4, r0, r2
 8002d08:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8002d0c:	430b      	orrs	r3, r1
 8002d0e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002d12:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8002d16:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002d1a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002d1e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002d22:	1cda      	adds	r2, r3, #3
 8002d24:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002d28:	4413      	add	r3, r2
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002d34:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002d38:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8002d3c:	4623      	mov	r3, r4
 8002d3e:	0a1b      	lsrs	r3, r3, #8
 8002d40:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002d44:	4623      	mov	r3, r4
 8002d46:	061b      	lsls	r3, r3, #24
 8002d48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002d4c:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8002d50:	4623      	mov	r3, r4
 8002d52:	4303      	orrs	r3, r0
 8002d54:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002d58:	462b      	mov	r3, r5
 8002d5a:	430b      	orrs	r3, r1
 8002d5c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002d60:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8002d64:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002d68:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002d6c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002d70:	1d1a      	adds	r2, r3, #4
 8002d72:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002d76:	4413      	add	r3, r2
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002d82:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002d86:	f04f 0200 	mov.w	r2, #0
 8002d8a:	f04f 0300 	mov.w	r3, #0
 8002d8e:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8002d92:	0023      	movs	r3, r4
 8002d94:	2200      	movs	r2, #0
 8002d96:	ea40 0402 	orr.w	r4, r0, r2
 8002d9a:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8002d9e:	430b      	orrs	r3, r1
 8002da0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8002da4:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8002da8:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002dac:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002db0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002db4:	1d5a      	adds	r2, r3, #5
 8002db6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002dba:	4413      	add	r3, r2
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002dc6:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8002dca:	f04f 0200 	mov.w	r2, #0
 8002dce:	f04f 0300 	mov.w	r3, #0
 8002dd2:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8002dd6:	0223      	lsls	r3, r4, #8
 8002dd8:	2200      	movs	r2, #0
 8002dda:	ea40 0402 	orr.w	r4, r0, r2
 8002dde:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8002de2:	430b      	orrs	r3, r1
 8002de4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002de8:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8002dec:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002df0:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002df4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002df8:	1d9a      	adds	r2, r3, #6
 8002dfa:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002dfe:	4413      	add	r3, r2
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	b2db      	uxtb	r3, r3
 8002e04:	2200      	movs	r2, #0
 8002e06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002e0a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002e0e:	f04f 0200 	mov.w	r2, #0
 8002e12:	f04f 0300 	mov.w	r3, #0
 8002e16:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8002e1a:	0423      	lsls	r3, r4, #16
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	ea40 0402 	orr.w	r4, r0, r2
 8002e22:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8002e26:	430b      	orrs	r3, r1
 8002e28:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002e2c:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8002e30:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002e34:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002e38:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002e3c:	1dda      	adds	r2, r3, #7
 8002e3e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002e42:	4413      	add	r3, r2
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002e4e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002e52:	f04f 0200 	mov.w	r2, #0
 8002e56:	f04f 0300 	mov.w	r3, #0
 8002e5a:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8002e5e:	0623      	lsls	r3, r4, #24
 8002e60:	2200      	movs	r2, #0
 8002e62:	ea40 0402 	orr.w	r4, r0, r2
 8002e66:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8002e6a:	430b      	orrs	r3, r1
 8002e6c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002e70:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8002e74:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 8002e78:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8002e7c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8002e80:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8002e84:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002e88:	3308      	adds	r3, #8
 8002e8a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8002e8e:	f04f 0200 	mov.w	r2, #0
 8002e92:	f04f 0300 	mov.w	r3, #0
 8002e96:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002e9a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002e9e:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8002ea2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002ea6:	4413      	add	r3, r2
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	2200      	movs	r2, #0
 8002eae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002eb2:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002eb6:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8002eba:	4623      	mov	r3, r4
 8002ebc:	4303      	orrs	r3, r0
 8002ebe:	67bb      	str	r3, [r7, #120]	; 0x78
 8002ec0:	462b      	mov	r3, r5
 8002ec2:	430b      	orrs	r3, r1
 8002ec4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002ec6:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8002eca:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002ece:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002ed2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002ed6:	1c5a      	adds	r2, r3, #1
 8002ed8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002edc:	4413      	add	r3, r2
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	673b      	str	r3, [r7, #112]	; 0x70
 8002ee6:	677a      	str	r2, [r7, #116]	; 0x74
 8002ee8:	f04f 0200 	mov.w	r2, #0
 8002eec:	f04f 0300 	mov.w	r3, #0
 8002ef0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002ef4:	464c      	mov	r4, r9
 8002ef6:	0223      	lsls	r3, r4, #8
 8002ef8:	4644      	mov	r4, r8
 8002efa:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002efe:	4644      	mov	r4, r8
 8002f00:	0222      	lsls	r2, r4, #8
 8002f02:	ea40 0402 	orr.w	r4, r0, r2
 8002f06:	66bc      	str	r4, [r7, #104]	; 0x68
 8002f08:	430b      	orrs	r3, r1
 8002f0a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002f0c:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8002f10:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002f14:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002f18:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002f1c:	1c9a      	adds	r2, r3, #2
 8002f1e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002f22:	4413      	add	r3, r2
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	2200      	movs	r2, #0
 8002f2a:	663b      	str	r3, [r7, #96]	; 0x60
 8002f2c:	667a      	str	r2, [r7, #100]	; 0x64
 8002f2e:	f04f 0200 	mov.w	r2, #0
 8002f32:	f04f 0300 	mov.w	r3, #0
 8002f36:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002f3a:	464c      	mov	r4, r9
 8002f3c:	0423      	lsls	r3, r4, #16
 8002f3e:	4644      	mov	r4, r8
 8002f40:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8002f44:	4644      	mov	r4, r8
 8002f46:	0422      	lsls	r2, r4, #16
 8002f48:	ea40 0402 	orr.w	r4, r0, r2
 8002f4c:	65bc      	str	r4, [r7, #88]	; 0x58
 8002f4e:	430b      	orrs	r3, r1
 8002f50:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f52:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8002f56:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002f5a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002f5e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002f62:	1cda      	adds	r2, r3, #3
 8002f64:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002f68:	4413      	add	r3, r2
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	2200      	movs	r2, #0
 8002f70:	653b      	str	r3, [r7, #80]	; 0x50
 8002f72:	657a      	str	r2, [r7, #84]	; 0x54
 8002f74:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8002f78:	4623      	mov	r3, r4
 8002f7a:	0a1b      	lsrs	r3, r3, #8
 8002f7c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f7e:	4623      	mov	r3, r4
 8002f80:	061b      	lsls	r3, r3, #24
 8002f82:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f84:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8002f88:	4623      	mov	r3, r4
 8002f8a:	4303      	orrs	r3, r0
 8002f8c:	643b      	str	r3, [r7, #64]	; 0x40
 8002f8e:	462b      	mov	r3, r5
 8002f90:	430b      	orrs	r3, r1
 8002f92:	647b      	str	r3, [r7, #68]	; 0x44
 8002f94:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8002f98:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002f9c:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002fa0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002fa4:	1d1a      	adds	r2, r3, #4
 8002fa6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002faa:	4413      	add	r3, r2
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	63bb      	str	r3, [r7, #56]	; 0x38
 8002fb4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002fb6:	f04f 0200 	mov.w	r2, #0
 8002fba:	f04f 0300 	mov.w	r3, #0
 8002fbe:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8002fc0:	0023      	movs	r3, r4
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	ea40 0402 	orr.w	r4, r0, r2
 8002fc8:	633c      	str	r4, [r7, #48]	; 0x30
 8002fca:	430b      	orrs	r3, r1
 8002fcc:	637b      	str	r3, [r7, #52]	; 0x34
 8002fce:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8002fd2:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002fd6:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8002fda:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002fde:	1d5a      	adds	r2, r3, #5
 8002fe0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8002fe4:	4413      	add	r3, r2
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	2200      	movs	r2, #0
 8002fec:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fee:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ff0:	f04f 0200 	mov.w	r2, #0
 8002ff4:	f04f 0300 	mov.w	r3, #0
 8002ff8:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8002ffa:	0223      	lsls	r3, r4, #8
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	ea40 0402 	orr.w	r4, r0, r2
 8003002:	623c      	str	r4, [r7, #32]
 8003004:	430b      	orrs	r3, r1
 8003006:	627b      	str	r3, [r7, #36]	; 0x24
 8003008:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800300c:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003010:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8003014:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003018:	3306      	adds	r3, #6
 800301a:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 800301e:	4413      	add	r3, r2
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	b2db      	uxtb	r3, r3
 8003024:	2200      	movs	r2, #0
 8003026:	61bb      	str	r3, [r7, #24]
 8003028:	61fa      	str	r2, [r7, #28]
 800302a:	f04f 0200 	mov.w	r2, #0
 800302e:	f04f 0300 	mov.w	r3, #0
 8003032:	69bc      	ldr	r4, [r7, #24]
 8003034:	0423      	lsls	r3, r4, #16
 8003036:	2200      	movs	r2, #0
 8003038:	ea40 0402 	orr.w	r4, r0, r2
 800303c:	613c      	str	r4, [r7, #16]
 800303e:	430b      	orrs	r3, r1
 8003040:	617b      	str	r3, [r7, #20]
 8003042:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003046:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800304a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 800304e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003052:	3307      	adds	r3, #7
 8003054:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8003058:	4413      	add	r3, r2
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	b2db      	uxtb	r3, r3
 800305e:	2200      	movs	r2, #0
 8003060:	60bb      	str	r3, [r7, #8]
 8003062:	60fa      	str	r2, [r7, #12]
 8003064:	f04f 0200 	mov.w	r2, #0
 8003068:	f04f 0300 	mov.w	r3, #0
 800306c:	68bc      	ldr	r4, [r7, #8]
 800306e:	0623      	lsls	r3, r4, #24
 8003070:	2200      	movs	r2, #0
 8003072:	ea40 0402 	orr.w	r4, r0, r2
 8003076:	603c      	str	r4, [r7, #0]
 8003078:	430b      	orrs	r3, r1
 800307a:	607b      	str	r3, [r7, #4]
 800307c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003080:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 8003084:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8003088:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 800308c:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 8003090:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003094:	3308      	adds	r3, #8
 8003096:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 800309a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 800309e:	4618      	mov	r0, r3
 80030a0:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 80030a4:	46bd      	mov	sp, r7
 80030a6:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80030aa:	4770      	bx	lr

080030ac <_ZN13geometry_msgs5Point7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Point"; };
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	4b03      	ldr	r3, [pc, #12]	; (80030c4 <_ZN13geometry_msgs5Point7getTypeEv+0x18>)
 80030b6:	4618      	mov	r0, r3
 80030b8:	370c      	adds	r7, #12
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr
 80030c2:	bf00      	nop
 80030c4:	0800bed4 	.word	0x0800bed4

080030c8 <_ZN13geometry_msgs5Point6getMD5Ev>:
    virtual const char * getMD5() override { return "4a842b65f413084dc2b10fb484ea7f17"; };
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	4b03      	ldr	r3, [pc, #12]	; (80030e0 <_ZN13geometry_msgs5Point6getMD5Ev+0x18>)
 80030d2:	4618      	mov	r0, r3
 80030d4:	370c      	adds	r7, #12
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
 80030de:	bf00      	nop
 80030e0:	0800bee8 	.word	0x0800bee8

080030e4 <_ZN13geometry_msgs10QuaternionC1Ev>:
      typedef double _z_type;
      _z_type z;
      typedef double _w_type;
      _w_type w;

    Quaternion():
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b082      	sub	sp, #8
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0),
      w(0)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7fe f912 	bl	8001318 <_ZN3ros3MsgC1Ev>
 80030f4:	4a11      	ldr	r2, [pc, #68]	; (800313c <_ZN13geometry_msgs10QuaternionC1Ev+0x58>)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	601a      	str	r2, [r3, #0]
 80030fa:	6879      	ldr	r1, [r7, #4]
 80030fc:	f04f 0200 	mov.w	r2, #0
 8003100:	f04f 0300 	mov.w	r3, #0
 8003104:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8003108:	6879      	ldr	r1, [r7, #4]
 800310a:	f04f 0200 	mov.w	r2, #0
 800310e:	f04f 0300 	mov.w	r3, #0
 8003112:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8003116:	6879      	ldr	r1, [r7, #4]
 8003118:	f04f 0200 	mov.w	r2, #0
 800311c:	f04f 0300 	mov.w	r3, #0
 8003120:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8003124:	6879      	ldr	r1, [r7, #4]
 8003126:	f04f 0200 	mov.w	r2, #0
 800312a:	f04f 0300 	mov.w	r3, #0
 800312e:	e9c1 2308 	strd	r2, r3, [r1, #32]
    {
    }
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4618      	mov	r0, r3
 8003136:	3708      	adds	r7, #8
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	0800c200 	.word	0x0800c200

08003140 <_ZNK13geometry_msgs10Quaternion9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8003140:	b480      	push	{r7}
 8003142:	b08d      	sub	sp, #52	; 0x34
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800314a:	2300      	movs	r3, #0
 800314c:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8003154:	e9c7 2308 	strd	r2, r3, [r7, #32]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8003158:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800315c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800315e:	6838      	ldr	r0, [r7, #0]
 8003160:	4401      	add	r1, r0
 8003162:	b2d3      	uxtb	r3, r2
 8003164:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8003166:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800316a:	f04f 0200 	mov.w	r2, #0
 800316e:	f04f 0300 	mov.w	r3, #0
 8003172:	0a02      	lsrs	r2, r0, #8
 8003174:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003178:	0a0b      	lsrs	r3, r1, #8
 800317a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800317c:	3101      	adds	r1, #1
 800317e:	6838      	ldr	r0, [r7, #0]
 8003180:	4401      	add	r1, r0
 8003182:	b2d3      	uxtb	r3, r2
 8003184:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8003186:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800318a:	f04f 0200 	mov.w	r2, #0
 800318e:	f04f 0300 	mov.w	r3, #0
 8003192:	0c02      	lsrs	r2, r0, #16
 8003194:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003198:	0c0b      	lsrs	r3, r1, #16
 800319a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800319c:	3102      	adds	r1, #2
 800319e:	6838      	ldr	r0, [r7, #0]
 80031a0:	4401      	add	r1, r0
 80031a2:	b2d3      	uxtb	r3, r2
 80031a4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 80031a6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80031aa:	f04f 0200 	mov.w	r2, #0
 80031ae:	f04f 0300 	mov.w	r3, #0
 80031b2:	0e02      	lsrs	r2, r0, #24
 80031b4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80031b8:	0e0b      	lsrs	r3, r1, #24
 80031ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80031bc:	3103      	adds	r1, #3
 80031be:	6838      	ldr	r0, [r7, #0]
 80031c0:	4401      	add	r1, r0
 80031c2:	b2d3      	uxtb	r3, r2
 80031c4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 80031c6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80031ca:	f04f 0200 	mov.w	r2, #0
 80031ce:	f04f 0300 	mov.w	r3, #0
 80031d2:	000a      	movs	r2, r1
 80031d4:	2300      	movs	r3, #0
 80031d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80031d8:	3104      	adds	r1, #4
 80031da:	6838      	ldr	r0, [r7, #0]
 80031dc:	4401      	add	r1, r0
 80031de:	b2d3      	uxtb	r3, r2
 80031e0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 80031e2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80031e6:	f04f 0200 	mov.w	r2, #0
 80031ea:	f04f 0300 	mov.w	r3, #0
 80031ee:	0a0a      	lsrs	r2, r1, #8
 80031f0:	2300      	movs	r3, #0
 80031f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80031f4:	3105      	adds	r1, #5
 80031f6:	6838      	ldr	r0, [r7, #0]
 80031f8:	4401      	add	r1, r0
 80031fa:	b2d3      	uxtb	r3, r2
 80031fc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 80031fe:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003202:	f04f 0200 	mov.w	r2, #0
 8003206:	f04f 0300 	mov.w	r3, #0
 800320a:	0c0a      	lsrs	r2, r1, #16
 800320c:	2300      	movs	r3, #0
 800320e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003210:	3106      	adds	r1, #6
 8003212:	6838      	ldr	r0, [r7, #0]
 8003214:	4401      	add	r1, r0
 8003216:	b2d3      	uxtb	r3, r2
 8003218:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 800321a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800321e:	f04f 0200 	mov.w	r2, #0
 8003222:	f04f 0300 	mov.w	r3, #0
 8003226:	0e0a      	lsrs	r2, r1, #24
 8003228:	2300      	movs	r3, #0
 800322a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800322c:	3107      	adds	r1, #7
 800322e:	6838      	ldr	r0, [r7, #0]
 8003230:	4401      	add	r1, r0
 8003232:	b2d3      	uxtb	r3, r2
 8003234:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 8003236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003238:	3308      	adds	r3, #8
 800323a:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003242:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8003246:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800324a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800324c:	6838      	ldr	r0, [r7, #0]
 800324e:	4401      	add	r1, r0
 8003250:	b2d3      	uxtb	r3, r2
 8003252:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8003254:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003258:	f04f 0200 	mov.w	r2, #0
 800325c:	f04f 0300 	mov.w	r3, #0
 8003260:	0a02      	lsrs	r2, r0, #8
 8003262:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003266:	0a0b      	lsrs	r3, r1, #8
 8003268:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800326a:	3101      	adds	r1, #1
 800326c:	6838      	ldr	r0, [r7, #0]
 800326e:	4401      	add	r1, r0
 8003270:	b2d3      	uxtb	r3, r2
 8003272:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8003274:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003278:	f04f 0200 	mov.w	r2, #0
 800327c:	f04f 0300 	mov.w	r3, #0
 8003280:	0c02      	lsrs	r2, r0, #16
 8003282:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003286:	0c0b      	lsrs	r3, r1, #16
 8003288:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800328a:	3102      	adds	r1, #2
 800328c:	6838      	ldr	r0, [r7, #0]
 800328e:	4401      	add	r1, r0
 8003290:	b2d3      	uxtb	r3, r2
 8003292:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8003294:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003298:	f04f 0200 	mov.w	r2, #0
 800329c:	f04f 0300 	mov.w	r3, #0
 80032a0:	0e02      	lsrs	r2, r0, #24
 80032a2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80032a6:	0e0b      	lsrs	r3, r1, #24
 80032a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80032aa:	3103      	adds	r1, #3
 80032ac:	6838      	ldr	r0, [r7, #0]
 80032ae:	4401      	add	r1, r0
 80032b0:	b2d3      	uxtb	r3, r2
 80032b2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 80032b4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80032b8:	f04f 0200 	mov.w	r2, #0
 80032bc:	f04f 0300 	mov.w	r3, #0
 80032c0:	000a      	movs	r2, r1
 80032c2:	2300      	movs	r3, #0
 80032c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80032c6:	3104      	adds	r1, #4
 80032c8:	6838      	ldr	r0, [r7, #0]
 80032ca:	4401      	add	r1, r0
 80032cc:	b2d3      	uxtb	r3, r2
 80032ce:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 80032d0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80032d4:	f04f 0200 	mov.w	r2, #0
 80032d8:	f04f 0300 	mov.w	r3, #0
 80032dc:	0a0a      	lsrs	r2, r1, #8
 80032de:	2300      	movs	r3, #0
 80032e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80032e2:	3105      	adds	r1, #5
 80032e4:	6838      	ldr	r0, [r7, #0]
 80032e6:	4401      	add	r1, r0
 80032e8:	b2d3      	uxtb	r3, r2
 80032ea:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 80032ec:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80032f0:	f04f 0200 	mov.w	r2, #0
 80032f4:	f04f 0300 	mov.w	r3, #0
 80032f8:	0c0a      	lsrs	r2, r1, #16
 80032fa:	2300      	movs	r3, #0
 80032fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80032fe:	3106      	adds	r1, #6
 8003300:	6838      	ldr	r0, [r7, #0]
 8003302:	4401      	add	r1, r0
 8003304:	b2d3      	uxtb	r3, r2
 8003306:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8003308:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800330c:	f04f 0200 	mov.w	r2, #0
 8003310:	f04f 0300 	mov.w	r3, #0
 8003314:	0e0a      	lsrs	r2, r1, #24
 8003316:	2300      	movs	r3, #0
 8003318:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800331a:	3107      	adds	r1, #7
 800331c:	6838      	ldr	r0, [r7, #0]
 800331e:	4401      	add	r1, r0
 8003320:	b2d3      	uxtb	r3, r2
 8003322:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 8003324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003326:	3308      	adds	r3, #8
 8003328:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003330:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8003334:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003338:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800333a:	6838      	ldr	r0, [r7, #0]
 800333c:	4401      	add	r1, r0
 800333e:	b2d3      	uxtb	r3, r2
 8003340:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8003342:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003346:	f04f 0200 	mov.w	r2, #0
 800334a:	f04f 0300 	mov.w	r3, #0
 800334e:	0a02      	lsrs	r2, r0, #8
 8003350:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003354:	0a0b      	lsrs	r3, r1, #8
 8003356:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003358:	3101      	adds	r1, #1
 800335a:	6838      	ldr	r0, [r7, #0]
 800335c:	4401      	add	r1, r0
 800335e:	b2d3      	uxtb	r3, r2
 8003360:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8003362:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003366:	f04f 0200 	mov.w	r2, #0
 800336a:	f04f 0300 	mov.w	r3, #0
 800336e:	0c02      	lsrs	r2, r0, #16
 8003370:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003374:	0c0b      	lsrs	r3, r1, #16
 8003376:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003378:	3102      	adds	r1, #2
 800337a:	6838      	ldr	r0, [r7, #0]
 800337c:	4401      	add	r1, r0
 800337e:	b2d3      	uxtb	r3, r2
 8003380:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8003382:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003386:	f04f 0200 	mov.w	r2, #0
 800338a:	f04f 0300 	mov.w	r3, #0
 800338e:	0e02      	lsrs	r2, r0, #24
 8003390:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003394:	0e0b      	lsrs	r3, r1, #24
 8003396:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003398:	3103      	adds	r1, #3
 800339a:	6838      	ldr	r0, [r7, #0]
 800339c:	4401      	add	r1, r0
 800339e:	b2d3      	uxtb	r3, r2
 80033a0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 80033a2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80033a6:	f04f 0200 	mov.w	r2, #0
 80033aa:	f04f 0300 	mov.w	r3, #0
 80033ae:	000a      	movs	r2, r1
 80033b0:	2300      	movs	r3, #0
 80033b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80033b4:	3104      	adds	r1, #4
 80033b6:	6838      	ldr	r0, [r7, #0]
 80033b8:	4401      	add	r1, r0
 80033ba:	b2d3      	uxtb	r3, r2
 80033bc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 80033be:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80033c2:	f04f 0200 	mov.w	r2, #0
 80033c6:	f04f 0300 	mov.w	r3, #0
 80033ca:	0a0a      	lsrs	r2, r1, #8
 80033cc:	2300      	movs	r3, #0
 80033ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80033d0:	3105      	adds	r1, #5
 80033d2:	6838      	ldr	r0, [r7, #0]
 80033d4:	4401      	add	r1, r0
 80033d6:	b2d3      	uxtb	r3, r2
 80033d8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 80033da:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80033de:	f04f 0200 	mov.w	r2, #0
 80033e2:	f04f 0300 	mov.w	r3, #0
 80033e6:	0c0a      	lsrs	r2, r1, #16
 80033e8:	2300      	movs	r3, #0
 80033ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80033ec:	3106      	adds	r1, #6
 80033ee:	6838      	ldr	r0, [r7, #0]
 80033f0:	4401      	add	r1, r0
 80033f2:	b2d3      	uxtb	r3, r2
 80033f4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 80033f6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80033fa:	f04f 0200 	mov.w	r2, #0
 80033fe:	f04f 0300 	mov.w	r3, #0
 8003402:	0e0a      	lsrs	r2, r1, #24
 8003404:	2300      	movs	r3, #0
 8003406:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003408:	3107      	adds	r1, #7
 800340a:	6838      	ldr	r0, [r7, #0]
 800340c:	4401      	add	r1, r0
 800340e:	b2d3      	uxtb	r3, r2
 8003410:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 8003412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003414:	3308      	adds	r3, #8
 8003416:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_w;
      u_w.real = this->w;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800341e:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_w.base >> (8 * 0)) & 0xFF;
 8003422:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003426:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003428:	6838      	ldr	r0, [r7, #0]
 800342a:	4401      	add	r1, r0
 800342c:	b2d3      	uxtb	r3, r2
 800342e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_w.base >> (8 * 1)) & 0xFF;
 8003430:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003434:	f04f 0200 	mov.w	r2, #0
 8003438:	f04f 0300 	mov.w	r3, #0
 800343c:	0a02      	lsrs	r2, r0, #8
 800343e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003442:	0a0b      	lsrs	r3, r1, #8
 8003444:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003446:	3101      	adds	r1, #1
 8003448:	6838      	ldr	r0, [r7, #0]
 800344a:	4401      	add	r1, r0
 800344c:	b2d3      	uxtb	r3, r2
 800344e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_w.base >> (8 * 2)) & 0xFF;
 8003450:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003454:	f04f 0200 	mov.w	r2, #0
 8003458:	f04f 0300 	mov.w	r3, #0
 800345c:	0c02      	lsrs	r2, r0, #16
 800345e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003462:	0c0b      	lsrs	r3, r1, #16
 8003464:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003466:	3102      	adds	r1, #2
 8003468:	6838      	ldr	r0, [r7, #0]
 800346a:	4401      	add	r1, r0
 800346c:	b2d3      	uxtb	r3, r2
 800346e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_w.base >> (8 * 3)) & 0xFF;
 8003470:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003474:	f04f 0200 	mov.w	r2, #0
 8003478:	f04f 0300 	mov.w	r3, #0
 800347c:	0e02      	lsrs	r2, r0, #24
 800347e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003482:	0e0b      	lsrs	r3, r1, #24
 8003484:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003486:	3103      	adds	r1, #3
 8003488:	6838      	ldr	r0, [r7, #0]
 800348a:	4401      	add	r1, r0
 800348c:	b2d3      	uxtb	r3, r2
 800348e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_w.base >> (8 * 4)) & 0xFF;
 8003490:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003494:	f04f 0200 	mov.w	r2, #0
 8003498:	f04f 0300 	mov.w	r3, #0
 800349c:	000a      	movs	r2, r1
 800349e:	2300      	movs	r3, #0
 80034a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80034a2:	3104      	adds	r1, #4
 80034a4:	6838      	ldr	r0, [r7, #0]
 80034a6:	4401      	add	r1, r0
 80034a8:	b2d3      	uxtb	r3, r2
 80034aa:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_w.base >> (8 * 5)) & 0xFF;
 80034ac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80034b0:	f04f 0200 	mov.w	r2, #0
 80034b4:	f04f 0300 	mov.w	r3, #0
 80034b8:	0a0a      	lsrs	r2, r1, #8
 80034ba:	2300      	movs	r3, #0
 80034bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80034be:	3105      	adds	r1, #5
 80034c0:	6838      	ldr	r0, [r7, #0]
 80034c2:	4401      	add	r1, r0
 80034c4:	b2d3      	uxtb	r3, r2
 80034c6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_w.base >> (8 * 6)) & 0xFF;
 80034c8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80034cc:	f04f 0200 	mov.w	r2, #0
 80034d0:	f04f 0300 	mov.w	r3, #0
 80034d4:	0c0a      	lsrs	r2, r1, #16
 80034d6:	2300      	movs	r3, #0
 80034d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80034da:	3106      	adds	r1, #6
 80034dc:	6838      	ldr	r0, [r7, #0]
 80034de:	4401      	add	r1, r0
 80034e0:	b2d3      	uxtb	r3, r2
 80034e2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_w.base >> (8 * 7)) & 0xFF;
 80034e4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80034e8:	f04f 0200 	mov.w	r2, #0
 80034ec:	f04f 0300 	mov.w	r3, #0
 80034f0:	0e0a      	lsrs	r2, r1, #24
 80034f2:	2300      	movs	r3, #0
 80034f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80034f6:	3107      	adds	r1, #7
 80034f8:	6838      	ldr	r0, [r7, #0]
 80034fa:	4401      	add	r1, r0
 80034fc:	b2d3      	uxtb	r3, r2
 80034fe:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->w);
 8003500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003502:	3308      	adds	r3, #8
 8003504:	62fb      	str	r3, [r7, #44]	; 0x2c
      return offset;
 8003506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8003508:	4618      	mov	r0, r3
 800350a:	3734      	adds	r7, #52	; 0x34
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <_ZN13geometry_msgs10Quaternion11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8003514:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003518:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 800351c:	af00      	add	r7, sp, #0
 800351e:	f8c7 020c 	str.w	r0, [r7, #524]	; 0x20c
 8003522:	f8c7 1208 	str.w	r1, [r7, #520]	; 0x208
    {
      int offset = 0;
 8003526:	2300      	movs	r3, #0
 8003528:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 800352c:	f04f 0200 	mov.w	r2, #0
 8003530:	f04f 0300 	mov.w	r3, #0
 8003534:	e9c7 238a 	strd	r2, r3, [r7, #552]	; 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003538:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 800353c:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 8003540:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8003544:	4413      	add	r3, r2
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	b2db      	uxtb	r3, r3
 800354a:	2200      	movs	r2, #0
 800354c:	461c      	mov	r4, r3
 800354e:	4615      	mov	r5, r2
 8003550:	ea40 0804 	orr.w	r8, r0, r4
 8003554:	ea41 0905 	orr.w	r9, r1, r5
 8003558:	e9c7 898a 	strd	r8, r9, [r7, #552]	; 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800355c:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 8003560:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8003564:	1c5a      	adds	r2, r3, #1
 8003566:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800356a:	4413      	add	r3, r2
 800356c:	781b      	ldrb	r3, [r3, #0]
 800356e:	b2db      	uxtb	r3, r3
 8003570:	2200      	movs	r2, #0
 8003572:	469a      	mov	sl, r3
 8003574:	4693      	mov	fp, r2
 8003576:	f04f 0200 	mov.w	r2, #0
 800357a:	f04f 0300 	mov.w	r3, #0
 800357e:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8003582:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8003586:	ea4f 220a 	mov.w	r2, sl, lsl #8
 800358a:	ea40 0402 	orr.w	r4, r0, r2
 800358e:	f8c7 4200 	str.w	r4, [r7, #512]	; 0x200
 8003592:	430b      	orrs	r3, r1
 8003594:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8003598:	e9d7 3480 	ldrd	r3, r4, [r7, #512]	; 0x200
 800359c:	e9c7 348a 	strd	r3, r4, [r7, #552]	; 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80035a0:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 80035a4:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80035a8:	1c9a      	adds	r2, r3, #2
 80035aa:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80035ae:	4413      	add	r3, r2
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	2200      	movs	r2, #0
 80035b6:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
 80035ba:	f8c7 21fc 	str.w	r2, [r7, #508]	; 0x1fc
 80035be:	f04f 0200 	mov.w	r2, #0
 80035c2:	f04f 0300 	mov.w	r3, #0
 80035c6:	e9d7 897e 	ldrd	r8, r9, [r7, #504]	; 0x1f8
 80035ca:	464c      	mov	r4, r9
 80035cc:	0423      	lsls	r3, r4, #16
 80035ce:	4644      	mov	r4, r8
 80035d0:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80035d4:	4644      	mov	r4, r8
 80035d6:	0422      	lsls	r2, r4, #16
 80035d8:	ea40 0402 	orr.w	r4, r0, r2
 80035dc:	f8c7 41f0 	str.w	r4, [r7, #496]	; 0x1f0
 80035e0:	430b      	orrs	r3, r1
 80035e2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 80035e6:	e9d7 347c 	ldrd	r3, r4, [r7, #496]	; 0x1f0
 80035ea:	e9c7 348a 	strd	r3, r4, [r7, #552]	; 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80035ee:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 80035f2:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80035f6:	1cda      	adds	r2, r3, #3
 80035f8:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80035fc:	4413      	add	r3, r2
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	b2db      	uxtb	r3, r3
 8003602:	2200      	movs	r2, #0
 8003604:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8003608:	f8c7 21ec 	str.w	r2, [r7, #492]	; 0x1ec
 800360c:	e9d7 457a 	ldrd	r4, r5, [r7, #488]	; 0x1e8
 8003610:	4623      	mov	r3, r4
 8003612:	0a1b      	lsrs	r3, r3, #8
 8003614:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003618:	4623      	mov	r3, r4
 800361a:	061b      	lsls	r3, r3, #24
 800361c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003620:	e9d7 4578 	ldrd	r4, r5, [r7, #480]	; 0x1e0
 8003624:	4623      	mov	r3, r4
 8003626:	4303      	orrs	r3, r0
 8003628:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 800362c:	462b      	mov	r3, r5
 800362e:	430b      	orrs	r3, r1
 8003630:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003634:	e9d7 3476 	ldrd	r3, r4, [r7, #472]	; 0x1d8
 8003638:	e9c7 348a 	strd	r3, r4, [r7, #552]	; 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800363c:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 8003640:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8003644:	1d1a      	adds	r2, r3, #4
 8003646:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800364a:	4413      	add	r3, r2
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	b2db      	uxtb	r3, r3
 8003650:	2200      	movs	r2, #0
 8003652:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8003656:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
 800365a:	f04f 0200 	mov.w	r2, #0
 800365e:	f04f 0300 	mov.w	r3, #0
 8003662:	f8d7 41d0 	ldr.w	r4, [r7, #464]	; 0x1d0
 8003666:	0023      	movs	r3, r4
 8003668:	2200      	movs	r2, #0
 800366a:	ea40 0402 	orr.w	r4, r0, r2
 800366e:	f8c7 41c8 	str.w	r4, [r7, #456]	; 0x1c8
 8003672:	430b      	orrs	r3, r1
 8003674:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 8003678:	e9d7 3472 	ldrd	r3, r4, [r7, #456]	; 0x1c8
 800367c:	e9c7 348a 	strd	r3, r4, [r7, #552]	; 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003680:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 8003684:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8003688:	1d5a      	adds	r2, r3, #5
 800368a:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800368e:	4413      	add	r3, r2
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	b2db      	uxtb	r3, r3
 8003694:	2200      	movs	r2, #0
 8003696:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800369a:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 800369e:	f04f 0200 	mov.w	r2, #0
 80036a2:	f04f 0300 	mov.w	r3, #0
 80036a6:	f8d7 41c0 	ldr.w	r4, [r7, #448]	; 0x1c0
 80036aa:	0223      	lsls	r3, r4, #8
 80036ac:	2200      	movs	r2, #0
 80036ae:	ea40 0402 	orr.w	r4, r0, r2
 80036b2:	f8c7 41b8 	str.w	r4, [r7, #440]	; 0x1b8
 80036b6:	430b      	orrs	r3, r1
 80036b8:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80036bc:	e9d7 346e 	ldrd	r3, r4, [r7, #440]	; 0x1b8
 80036c0:	e9c7 348a 	strd	r3, r4, [r7, #552]	; 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80036c4:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 80036c8:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80036cc:	1d9a      	adds	r2, r3, #6
 80036ce:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80036d2:	4413      	add	r3, r2
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	2200      	movs	r2, #0
 80036da:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 80036de:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 80036e2:	f04f 0200 	mov.w	r2, #0
 80036e6:	f04f 0300 	mov.w	r3, #0
 80036ea:	f8d7 41b0 	ldr.w	r4, [r7, #432]	; 0x1b0
 80036ee:	0423      	lsls	r3, r4, #16
 80036f0:	2200      	movs	r2, #0
 80036f2:	ea40 0402 	orr.w	r4, r0, r2
 80036f6:	f8c7 41a8 	str.w	r4, [r7, #424]	; 0x1a8
 80036fa:	430b      	orrs	r3, r1
 80036fc:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8003700:	e9d7 346a 	ldrd	r3, r4, [r7, #424]	; 0x1a8
 8003704:	e9c7 348a 	strd	r3, r4, [r7, #552]	; 0x228
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003708:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 800370c:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8003710:	1dda      	adds	r2, r3, #7
 8003712:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8003716:	4413      	add	r3, r2
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	b2db      	uxtb	r3, r3
 800371c:	2200      	movs	r2, #0
 800371e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003722:	f8c7 21a4 	str.w	r2, [r7, #420]	; 0x1a4
 8003726:	f04f 0200 	mov.w	r2, #0
 800372a:	f04f 0300 	mov.w	r3, #0
 800372e:	f8d7 41a0 	ldr.w	r4, [r7, #416]	; 0x1a0
 8003732:	0623      	lsls	r3, r4, #24
 8003734:	2200      	movs	r2, #0
 8003736:	ea40 0402 	orr.w	r4, r0, r2
 800373a:	f8c7 4198 	str.w	r4, [r7, #408]	; 0x198
 800373e:	430b      	orrs	r3, r1
 8003740:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003744:	e9d7 3466 	ldrd	r3, r4, [r7, #408]	; 0x198
 8003748:	e9c7 348a 	strd	r3, r4, [r7, #552]	; 0x228
      this->x = u_x.real;
 800374c:	e9d7 018a 	ldrd	r0, r1, [r7, #552]	; 0x228
 8003750:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8003754:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8003758:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 800375c:	3308      	adds	r3, #8
 800375e:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8003762:	f04f 0200 	mov.w	r2, #0
 8003766:	f04f 0300 	mov.w	r3, #0
 800376a:	e9c7 2388 	strd	r2, r3, [r7, #544]	; 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800376e:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 8003772:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 8003776:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800377a:	4413      	add	r3, r2
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	b2db      	uxtb	r3, r3
 8003780:	2200      	movs	r2, #0
 8003782:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8003786:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 800378a:	e9d7 4564 	ldrd	r4, r5, [r7, #400]	; 0x190
 800378e:	4623      	mov	r3, r4
 8003790:	4303      	orrs	r3, r0
 8003792:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8003796:	462b      	mov	r3, r5
 8003798:	430b      	orrs	r3, r1
 800379a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 800379e:	e9d7 3462 	ldrd	r3, r4, [r7, #392]	; 0x188
 80037a2:	e9c7 3488 	strd	r3, r4, [r7, #544]	; 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80037a6:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 80037aa:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80037ae:	1c5a      	adds	r2, r3, #1
 80037b0:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80037b4:	4413      	add	r3, r2
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	2200      	movs	r2, #0
 80037bc:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80037c0:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 80037c4:	f04f 0200 	mov.w	r2, #0
 80037c8:	f04f 0300 	mov.w	r3, #0
 80037cc:	e9d7 8960 	ldrd	r8, r9, [r7, #384]	; 0x180
 80037d0:	464c      	mov	r4, r9
 80037d2:	0223      	lsls	r3, r4, #8
 80037d4:	4644      	mov	r4, r8
 80037d6:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80037da:	4644      	mov	r4, r8
 80037dc:	0222      	lsls	r2, r4, #8
 80037de:	ea40 0402 	orr.w	r4, r0, r2
 80037e2:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 80037e6:	430b      	orrs	r3, r1
 80037e8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80037ec:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 80037f0:	e9c7 3488 	strd	r3, r4, [r7, #544]	; 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80037f4:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 80037f8:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80037fc:	1c9a      	adds	r2, r3, #2
 80037fe:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8003802:	4413      	add	r3, r2
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	b2db      	uxtb	r3, r3
 8003808:	2200      	movs	r2, #0
 800380a:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 800380e:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 8003812:	f04f 0200 	mov.w	r2, #0
 8003816:	f04f 0300 	mov.w	r3, #0
 800381a:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 800381e:	464c      	mov	r4, r9
 8003820:	0423      	lsls	r3, r4, #16
 8003822:	4644      	mov	r4, r8
 8003824:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003828:	4644      	mov	r4, r8
 800382a:	0422      	lsls	r2, r4, #16
 800382c:	ea40 0402 	orr.w	r4, r0, r2
 8003830:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 8003834:	430b      	orrs	r3, r1
 8003836:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 800383a:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 800383e:	e9c7 3488 	strd	r3, r4, [r7, #544]	; 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003842:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 8003846:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 800384a:	1cda      	adds	r2, r3, #3
 800384c:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8003850:	4413      	add	r3, r2
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	b2db      	uxtb	r3, r3
 8003856:	2200      	movs	r2, #0
 8003858:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 800385c:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8003860:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8003864:	4623      	mov	r3, r4
 8003866:	0a1b      	lsrs	r3, r3, #8
 8003868:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 800386c:	4623      	mov	r3, r4
 800386e:	061b      	lsls	r3, r3, #24
 8003870:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8003874:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 8003878:	4623      	mov	r3, r4
 800387a:	4303      	orrs	r3, r0
 800387c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003880:	462b      	mov	r3, r5
 8003882:	430b      	orrs	r3, r1
 8003884:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003888:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 800388c:	e9c7 3488 	strd	r3, r4, [r7, #544]	; 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003890:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 8003894:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8003898:	1d1a      	adds	r2, r3, #4
 800389a:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800389e:	4413      	add	r3, r2
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	2200      	movs	r2, #0
 80038a6:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 80038aa:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80038ae:	f04f 0200 	mov.w	r2, #0
 80038b2:	f04f 0300 	mov.w	r3, #0
 80038b6:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 80038ba:	0023      	movs	r3, r4
 80038bc:	2200      	movs	r2, #0
 80038be:	ea40 0402 	orr.w	r4, r0, r2
 80038c2:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 80038c6:	430b      	orrs	r3, r1
 80038c8:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80038cc:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 80038d0:	e9c7 3488 	strd	r3, r4, [r7, #544]	; 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 80038d4:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 80038d8:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80038dc:	1d5a      	adds	r2, r3, #5
 80038de:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80038e2:	4413      	add	r3, r2
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	2200      	movs	r2, #0
 80038ea:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80038ee:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 80038f2:	f04f 0200 	mov.w	r2, #0
 80038f6:	f04f 0300 	mov.w	r3, #0
 80038fa:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 80038fe:	0223      	lsls	r3, r4, #8
 8003900:	2200      	movs	r2, #0
 8003902:	ea40 0402 	orr.w	r4, r0, r2
 8003906:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 800390a:	430b      	orrs	r3, r1
 800390c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8003910:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8003914:	e9c7 3488 	strd	r3, r4, [r7, #544]	; 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003918:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 800391c:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8003920:	1d9a      	adds	r2, r3, #6
 8003922:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8003926:	4413      	add	r3, r2
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	b2db      	uxtb	r3, r3
 800392c:	2200      	movs	r2, #0
 800392e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003932:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8003936:	f04f 0200 	mov.w	r2, #0
 800393a:	f04f 0300 	mov.w	r3, #0
 800393e:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 8003942:	0423      	lsls	r3, r4, #16
 8003944:	2200      	movs	r2, #0
 8003946:	ea40 0402 	orr.w	r4, r0, r2
 800394a:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 800394e:	430b      	orrs	r3, r1
 8003950:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003954:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 8003958:	e9c7 3488 	strd	r3, r4, [r7, #544]	; 0x220
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 800395c:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 8003960:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8003964:	1dda      	adds	r2, r3, #7
 8003966:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800396a:	4413      	add	r3, r2
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	b2db      	uxtb	r3, r3
 8003970:	2200      	movs	r2, #0
 8003972:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8003976:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800397a:	f04f 0200 	mov.w	r2, #0
 800397e:	f04f 0300 	mov.w	r3, #0
 8003982:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 8003986:	0623      	lsls	r3, r4, #24
 8003988:	2200      	movs	r2, #0
 800398a:	ea40 0402 	orr.w	r4, r0, r2
 800398e:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 8003992:	430b      	orrs	r3, r1
 8003994:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8003998:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 800399c:	e9c7 3488 	strd	r3, r4, [r7, #544]	; 0x220
      this->y = u_y.real;
 80039a0:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	; 0x220
 80039a4:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80039a8:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 80039ac:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80039b0:	3308      	adds	r3, #8
 80039b2:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 80039b6:	f04f 0200 	mov.w	r2, #0
 80039ba:	f04f 0300 	mov.w	r3, #0
 80039be:	e9c7 2386 	strd	r2, r3, [r7, #536]	; 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80039c2:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 80039c6:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 80039ca:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80039ce:	4413      	add	r3, r2
 80039d0:	781b      	ldrb	r3, [r3, #0]
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	2200      	movs	r2, #0
 80039d6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80039da:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 80039de:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 80039e2:	4623      	mov	r3, r4
 80039e4:	4303      	orrs	r3, r0
 80039e6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80039ea:	462b      	mov	r3, r5
 80039ec:	430b      	orrs	r3, r1
 80039ee:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80039f2:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 80039f6:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80039fa:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 80039fe:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8003a02:	1c5a      	adds	r2, r3, #1
 8003a04:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8003a08:	4413      	add	r3, r2
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003a14:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8003a18:	f04f 0200 	mov.w	r2, #0
 8003a1c:	f04f 0300 	mov.w	r3, #0
 8003a20:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8003a24:	464c      	mov	r4, r9
 8003a26:	0223      	lsls	r3, r4, #8
 8003a28:	4644      	mov	r4, r8
 8003a2a:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003a2e:	4644      	mov	r4, r8
 8003a30:	0222      	lsls	r2, r4, #8
 8003a32:	ea40 0402 	orr.w	r4, r0, r2
 8003a36:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 8003a3a:	430b      	orrs	r3, r1
 8003a3c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003a40:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8003a44:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003a48:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 8003a4c:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8003a50:	1c9a      	adds	r2, r3, #2
 8003a52:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8003a56:	4413      	add	r3, r2
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003a62:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003a66:	f04f 0200 	mov.w	r2, #0
 8003a6a:	f04f 0300 	mov.w	r3, #0
 8003a6e:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8003a72:	464c      	mov	r4, r9
 8003a74:	0423      	lsls	r3, r4, #16
 8003a76:	4644      	mov	r4, r8
 8003a78:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003a7c:	4644      	mov	r4, r8
 8003a7e:	0422      	lsls	r2, r4, #16
 8003a80:	ea40 0402 	orr.w	r4, r0, r2
 8003a84:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8003a88:	430b      	orrs	r3, r1
 8003a8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003a8e:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8003a92:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003a96:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 8003a9a:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8003a9e:	1cda      	adds	r2, r3, #3
 8003aa0:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8003aa4:	4413      	add	r3, r2
 8003aa6:	781b      	ldrb	r3, [r3, #0]
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003ab0:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003ab4:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8003ab8:	4623      	mov	r3, r4
 8003aba:	0a1b      	lsrs	r3, r3, #8
 8003abc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003ac0:	4623      	mov	r3, r4
 8003ac2:	061b      	lsls	r3, r3, #24
 8003ac4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ac8:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8003acc:	4623      	mov	r3, r4
 8003ace:	4303      	orrs	r3, r0
 8003ad0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003ad4:	462b      	mov	r3, r5
 8003ad6:	430b      	orrs	r3, r1
 8003ad8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003adc:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8003ae0:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003ae4:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 8003ae8:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8003aec:	1d1a      	adds	r2, r3, #4
 8003aee:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8003af2:	4413      	add	r3, r2
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	2200      	movs	r2, #0
 8003afa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003afe:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003b02:	f04f 0200 	mov.w	r2, #0
 8003b06:	f04f 0300 	mov.w	r3, #0
 8003b0a:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8003b0e:	0023      	movs	r3, r4
 8003b10:	2200      	movs	r2, #0
 8003b12:	ea40 0402 	orr.w	r4, r0, r2
 8003b16:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8003b1a:	430b      	orrs	r3, r1
 8003b1c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003b20:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8003b24:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003b28:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 8003b2c:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8003b30:	1d5a      	adds	r2, r3, #5
 8003b32:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8003b36:	4413      	add	r3, r2
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	b2db      	uxtb	r3, r3
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b42:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8003b46:	f04f 0200 	mov.w	r2, #0
 8003b4a:	f04f 0300 	mov.w	r3, #0
 8003b4e:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8003b52:	0223      	lsls	r3, r4, #8
 8003b54:	2200      	movs	r2, #0
 8003b56:	ea40 0402 	orr.w	r4, r0, r2
 8003b5a:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8003b5e:	430b      	orrs	r3, r1
 8003b60:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003b64:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8003b68:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003b6c:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 8003b70:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8003b74:	1d9a      	adds	r2, r3, #6
 8003b76:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8003b7a:	4413      	add	r3, r2
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	2200      	movs	r2, #0
 8003b82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003b86:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003b8a:	f04f 0200 	mov.w	r2, #0
 8003b8e:	f04f 0300 	mov.w	r3, #0
 8003b92:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8003b96:	0423      	lsls	r3, r4, #16
 8003b98:	2200      	movs	r2, #0
 8003b9a:	ea40 0402 	orr.w	r4, r0, r2
 8003b9e:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8003ba2:	430b      	orrs	r3, r1
 8003ba4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003ba8:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8003bac:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003bb0:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 8003bb4:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8003bb8:	1dda      	adds	r2, r3, #7
 8003bba:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8003bbe:	4413      	add	r3, r2
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003bca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003bce:	f04f 0200 	mov.w	r2, #0
 8003bd2:	f04f 0300 	mov.w	r3, #0
 8003bd6:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8003bda:	0623      	lsls	r3, r4, #24
 8003bdc:	2200      	movs	r2, #0
 8003bde:	ea40 0402 	orr.w	r4, r0, r2
 8003be2:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8003be6:	430b      	orrs	r3, r1
 8003be8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003bec:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8003bf0:	e9c7 3486 	strd	r3, r4, [r7, #536]	; 0x218
      this->z = u_z.real;
 8003bf4:	e9d7 0186 	ldrd	r0, r1, [r7, #536]	; 0x218
 8003bf8:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8003bfc:	e9c3 0106 	strd	r0, r1, [r3, #24]
      offset += sizeof(this->z);
 8003c00:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8003c04:	3308      	adds	r3, #8
 8003c06:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
      union {
        double real;
        uint64_t base;
      } u_w;
      u_w.base = 0;
 8003c0a:	f04f 0200 	mov.w	r2, #0
 8003c0e:	f04f 0300 	mov.w	r3, #0
 8003c12:	e9c7 2384 	strd	r2, r3, [r7, #528]	; 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003c16:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	; 0x210
 8003c1a:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 8003c1e:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8003c22:	4413      	add	r3, r2
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003c2e:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003c32:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8003c36:	4623      	mov	r3, r4
 8003c38:	4303      	orrs	r3, r0
 8003c3a:	67bb      	str	r3, [r7, #120]	; 0x78
 8003c3c:	462b      	mov	r3, r5
 8003c3e:	430b      	orrs	r3, r1
 8003c40:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003c42:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8003c46:	e9c7 3484 	strd	r3, r4, [r7, #528]	; 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003c4a:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	; 0x210
 8003c4e:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8003c52:	1c5a      	adds	r2, r3, #1
 8003c54:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8003c58:	4413      	add	r3, r2
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	2200      	movs	r2, #0
 8003c60:	673b      	str	r3, [r7, #112]	; 0x70
 8003c62:	677a      	str	r2, [r7, #116]	; 0x74
 8003c64:	f04f 0200 	mov.w	r2, #0
 8003c68:	f04f 0300 	mov.w	r3, #0
 8003c6c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003c70:	464c      	mov	r4, r9
 8003c72:	0223      	lsls	r3, r4, #8
 8003c74:	4644      	mov	r4, r8
 8003c76:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003c7a:	4644      	mov	r4, r8
 8003c7c:	0222      	lsls	r2, r4, #8
 8003c7e:	ea40 0402 	orr.w	r4, r0, r2
 8003c82:	66bc      	str	r4, [r7, #104]	; 0x68
 8003c84:	430b      	orrs	r3, r1
 8003c86:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c88:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8003c8c:	e9c7 3484 	strd	r3, r4, [r7, #528]	; 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003c90:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	; 0x210
 8003c94:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8003c98:	1c9a      	adds	r2, r3, #2
 8003c9a:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8003c9e:	4413      	add	r3, r2
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	663b      	str	r3, [r7, #96]	; 0x60
 8003ca8:	667a      	str	r2, [r7, #100]	; 0x64
 8003caa:	f04f 0200 	mov.w	r2, #0
 8003cae:	f04f 0300 	mov.w	r3, #0
 8003cb2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003cb6:	464c      	mov	r4, r9
 8003cb8:	0423      	lsls	r3, r4, #16
 8003cba:	4644      	mov	r4, r8
 8003cbc:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8003cc0:	4644      	mov	r4, r8
 8003cc2:	0422      	lsls	r2, r4, #16
 8003cc4:	ea40 0402 	orr.w	r4, r0, r2
 8003cc8:	65bc      	str	r4, [r7, #88]	; 0x58
 8003cca:	430b      	orrs	r3, r1
 8003ccc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003cce:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8003cd2:	e9c7 3484 	strd	r3, r4, [r7, #528]	; 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003cd6:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	; 0x210
 8003cda:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8003cde:	1cda      	adds	r2, r3, #3
 8003ce0:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8003ce4:	4413      	add	r3, r2
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	2200      	movs	r2, #0
 8003cec:	653b      	str	r3, [r7, #80]	; 0x50
 8003cee:	657a      	str	r2, [r7, #84]	; 0x54
 8003cf0:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8003cf4:	4623      	mov	r3, r4
 8003cf6:	0a1b      	lsrs	r3, r3, #8
 8003cf8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cfa:	4623      	mov	r3, r4
 8003cfc:	061b      	lsls	r3, r3, #24
 8003cfe:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d00:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8003d04:	4623      	mov	r3, r4
 8003d06:	4303      	orrs	r3, r0
 8003d08:	643b      	str	r3, [r7, #64]	; 0x40
 8003d0a:	462b      	mov	r3, r5
 8003d0c:	430b      	orrs	r3, r1
 8003d0e:	647b      	str	r3, [r7, #68]	; 0x44
 8003d10:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8003d14:	e9c7 3484 	strd	r3, r4, [r7, #528]	; 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003d18:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	; 0x210
 8003d1c:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8003d20:	1d1a      	adds	r2, r3, #4
 8003d22:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8003d26:	4413      	add	r3, r2
 8003d28:	781b      	ldrb	r3, [r3, #0]
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003d30:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003d32:	f04f 0200 	mov.w	r2, #0
 8003d36:	f04f 0300 	mov.w	r3, #0
 8003d3a:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8003d3c:	0023      	movs	r3, r4
 8003d3e:	2200      	movs	r2, #0
 8003d40:	ea40 0402 	orr.w	r4, r0, r2
 8003d44:	633c      	str	r4, [r7, #48]	; 0x30
 8003d46:	430b      	orrs	r3, r1
 8003d48:	637b      	str	r3, [r7, #52]	; 0x34
 8003d4a:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8003d4e:	e9c7 3484 	strd	r3, r4, [r7, #528]	; 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003d52:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	; 0x210
 8003d56:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8003d5a:	1d5a      	adds	r2, r3, #5
 8003d5c:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8003d60:	4413      	add	r3, r2
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	2200      	movs	r2, #0
 8003d68:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d6a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d6c:	f04f 0200 	mov.w	r2, #0
 8003d70:	f04f 0300 	mov.w	r3, #0
 8003d74:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8003d76:	0223      	lsls	r3, r4, #8
 8003d78:	2200      	movs	r2, #0
 8003d7a:	ea40 0402 	orr.w	r4, r0, r2
 8003d7e:	623c      	str	r4, [r7, #32]
 8003d80:	430b      	orrs	r3, r1
 8003d82:	627b      	str	r3, [r7, #36]	; 0x24
 8003d84:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003d88:	e9c7 3484 	strd	r3, r4, [r7, #528]	; 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003d8c:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	; 0x210
 8003d90:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8003d94:	3306      	adds	r3, #6
 8003d96:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 8003d9a:	4413      	add	r3, r2
 8003d9c:	781b      	ldrb	r3, [r3, #0]
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	2200      	movs	r2, #0
 8003da2:	61bb      	str	r3, [r7, #24]
 8003da4:	61fa      	str	r2, [r7, #28]
 8003da6:	f04f 0200 	mov.w	r2, #0
 8003daa:	f04f 0300 	mov.w	r3, #0
 8003dae:	69bc      	ldr	r4, [r7, #24]
 8003db0:	0423      	lsls	r3, r4, #16
 8003db2:	2200      	movs	r2, #0
 8003db4:	ea40 0402 	orr.w	r4, r0, r2
 8003db8:	613c      	str	r4, [r7, #16]
 8003dba:	430b      	orrs	r3, r1
 8003dbc:	617b      	str	r3, [r7, #20]
 8003dbe:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8003dc2:	e9c7 3484 	strd	r3, r4, [r7, #528]	; 0x210
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003dc6:	e9d7 0184 	ldrd	r0, r1, [r7, #528]	; 0x210
 8003dca:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8003dce:	3307      	adds	r3, #7
 8003dd0:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 8003dd4:	4413      	add	r3, r2
 8003dd6:	781b      	ldrb	r3, [r3, #0]
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	2200      	movs	r2, #0
 8003ddc:	60bb      	str	r3, [r7, #8]
 8003dde:	60fa      	str	r2, [r7, #12]
 8003de0:	f04f 0200 	mov.w	r2, #0
 8003de4:	f04f 0300 	mov.w	r3, #0
 8003de8:	68bc      	ldr	r4, [r7, #8]
 8003dea:	0623      	lsls	r3, r4, #24
 8003dec:	2200      	movs	r2, #0
 8003dee:	ea40 0402 	orr.w	r4, r0, r2
 8003df2:	603c      	str	r4, [r7, #0]
 8003df4:	430b      	orrs	r3, r1
 8003df6:	607b      	str	r3, [r7, #4]
 8003df8:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003dfc:	e9c7 3484 	strd	r3, r4, [r7, #528]	; 0x210
      this->w = u_w.real;
 8003e00:	e9d7 2384 	ldrd	r2, r3, [r7, #528]	; 0x210
 8003e04:	f8d7 120c 	ldr.w	r1, [r7, #524]	; 0x20c
 8003e08:	e9c1 2308 	strd	r2, r3, [r1, #32]
      offset += sizeof(this->w);
 8003e0c:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8003e10:	3308      	adds	r3, #8
 8003e12:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
     return offset;
 8003e16:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
    }
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f507 770f 	add.w	r7, r7, #572	; 0x23c
 8003e20:	46bd      	mov	sp, r7
 8003e22:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003e26:	4770      	bx	lr

08003e28 <_ZN13geometry_msgs10Quaternion7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Quaternion"; };
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
 8003e30:	4b03      	ldr	r3, [pc, #12]	; (8003e40 <_ZN13geometry_msgs10Quaternion7getTypeEv+0x18>)
 8003e32:	4618      	mov	r0, r3
 8003e34:	370c      	adds	r7, #12
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	0800bf0c 	.word	0x0800bf0c

08003e44 <_ZN13geometry_msgs10Quaternion6getMD5Ev>:
    virtual const char * getMD5() override { return "a779879fadf0160734f906b8c19c7004"; };
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	4b03      	ldr	r3, [pc, #12]	; (8003e5c <_ZN13geometry_msgs10Quaternion6getMD5Ev+0x18>)
 8003e4e:	4618      	mov	r0, r3
 8003e50:	370c      	adds	r7, #12
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr
 8003e5a:	bf00      	nop
 8003e5c:	0800bf28 	.word	0x0800bf28

08003e60 <_ZN13geometry_msgs4PoseC1Ev>:
      typedef geometry_msgs::Point _position_type;
      _position_type position;
      typedef geometry_msgs::Quaternion _orientation_type;
      _orientation_type orientation;

    Pose():
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b082      	sub	sp, #8
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
      position(),
      orientation()
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f7fd fa54 	bl	8001318 <_ZN3ros3MsgC1Ev>
 8003e70:	4a08      	ldr	r2, [pc, #32]	; (8003e94 <_ZN13geometry_msgs4PoseC1Ev+0x34>)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	601a      	str	r2, [r3, #0]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	3308      	adds	r3, #8
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7fe fc1c 	bl	80026b8 <_ZN13geometry_msgs5PointC1Ev>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	3328      	adds	r3, #40	; 0x28
 8003e84:	4618      	mov	r0, r3
 8003e86:	f7ff f92d 	bl	80030e4 <_ZN13geometry_msgs10QuaternionC1Ev>
    {
    }
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3708      	adds	r7, #8
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	0800c1e8 	.word	0x0800c1e8

08003e98 <_ZNK13geometry_msgs4Pose9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b084      	sub	sp, #16
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	60fb      	str	r3, [r7, #12]
      offset += this->position.serialize(outbuffer + offset);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f103 0008 	add.w	r0, r3, #8
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	683a      	ldr	r2, [r7, #0]
 8003eb0:	4413      	add	r3, r2
 8003eb2:	4619      	mov	r1, r3
 8003eb4:	f7fe fc28 	bl	8002708 <_ZNK13geometry_msgs5Point9serializeEPh>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	4413      	add	r3, r2
 8003ebe:	60fb      	str	r3, [r7, #12]
      offset += this->orientation.serialize(outbuffer + offset);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	683a      	ldr	r2, [r7, #0]
 8003eca:	4413      	add	r3, r2
 8003ecc:	4619      	mov	r1, r3
 8003ece:	f7ff f937 	bl	8003140 <_ZNK13geometry_msgs10Quaternion9serializeEPh>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	4413      	add	r3, r2
 8003ed8:	60fb      	str	r3, [r7, #12]
      return offset;
 8003eda:	68fb      	ldr	r3, [r7, #12]
    }
 8003edc:	4618      	mov	r0, r3
 8003ede:	3710      	adds	r7, #16
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <_ZN13geometry_msgs4Pose11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	60fb      	str	r3, [r7, #12]
      offset += this->position.deserialize(inbuffer + offset);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f103 0008 	add.w	r0, r3, #8
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	683a      	ldr	r2, [r7, #0]
 8003efc:	4413      	add	r3, r2
 8003efe:	4619      	mov	r1, r3
 8003f00:	f7fe fd75 	bl	80029ee <_ZN13geometry_msgs5Point11deserializeEPh>
 8003f04:	4602      	mov	r2, r0
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	4413      	add	r3, r2
 8003f0a:	60fb      	str	r3, [r7, #12]
      offset += this->orientation.deserialize(inbuffer + offset);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	683a      	ldr	r2, [r7, #0]
 8003f16:	4413      	add	r3, r2
 8003f18:	4619      	mov	r1, r3
 8003f1a:	f7ff fafb 	bl	8003514 <_ZN13geometry_msgs10Quaternion11deserializeEPh>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	4413      	add	r3, r2
 8003f24:	60fb      	str	r3, [r7, #12]
     return offset;
 8003f26:	68fb      	ldr	r3, [r7, #12]
    }
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3710      	adds	r7, #16
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <_ZN13geometry_msgs4Pose7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Pose"; };
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	4b03      	ldr	r3, [pc, #12]	; (8003f48 <_ZN13geometry_msgs4Pose7getTypeEv+0x18>)
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	370c      	adds	r7, #12
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr
 8003f46:	bf00      	nop
 8003f48:	0800bf4c 	.word	0x0800bf4c

08003f4c <_ZN13geometry_msgs4Pose6getMD5Ev>:
    virtual const char * getMD5() override { return "e45d45a5a1ce597b249e23fb30fc871f"; };
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	4b03      	ldr	r3, [pc, #12]	; (8003f64 <_ZN13geometry_msgs4Pose6getMD5Ev+0x18>)
 8003f56:	4618      	mov	r0, r3
 8003f58:	370c      	adds	r7, #12
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	0800bf60 	.word	0x0800bf60

08003f68 <_ZN13geometry_msgs18PoseWithCovarianceC1Ev>:
    public:
      typedef geometry_msgs::Pose _pose_type;
      _pose_type pose;
      double covariance[36];

    PoseWithCovariance():
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b082      	sub	sp, #8
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
      pose(),
      covariance()
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4618      	mov	r0, r3
 8003f74:	f7fd f9d0 	bl	8001318 <_ZN3ros3MsgC1Ev>
 8003f78:	4a0d      	ldr	r2, [pc, #52]	; (8003fb0 <_ZN13geometry_msgs18PoseWithCovarianceC1Ev+0x48>)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	601a      	str	r2, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	3308      	adds	r3, #8
 8003f82:	4618      	mov	r0, r3
 8003f84:	f7ff ff6c 	bl	8003e60 <_ZN13geometry_msgs4PoseC1Ev>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f103 0258 	add.w	r2, r3, #88	; 0x58
 8003f8e:	2323      	movs	r3, #35	; 0x23
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	db08      	blt.n	8003fa6 <_ZN13geometry_msgs18PoseWithCovarianceC1Ev+0x3e>
 8003f94:	f04f 0000 	mov.w	r0, #0
 8003f98:	f04f 0100 	mov.w	r1, #0
 8003f9c:	e9c2 0100 	strd	r0, r1, [r2]
 8003fa0:	3208      	adds	r2, #8
 8003fa2:	3b01      	subs	r3, #1
 8003fa4:	e7f4      	b.n	8003f90 <_ZN13geometry_msgs18PoseWithCovarianceC1Ev+0x28>
    {
    }
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3708      	adds	r7, #8
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	0800c1d0 	.word	0x0800c1d0

08003fb4 <_ZNK13geometry_msgs18PoseWithCovariance9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b086      	sub	sp, #24
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	617b      	str	r3, [r7, #20]
      offset += this->pose.serialize(outbuffer + offset);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	f103 0008 	add.w	r0, r3, #8
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	683a      	ldr	r2, [r7, #0]
 8003fcc:	4413      	add	r3, r2
 8003fce:	4619      	mov	r1, r3
 8003fd0:	f7ff ff62 	bl	8003e98 <_ZNK13geometry_msgs4Pose9serializeEPh>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	4413      	add	r3, r2
 8003fda:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 36; i++){
 8003fdc:	2300      	movs	r3, #0
 8003fde:	613b      	str	r3, [r7, #16]
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	2b23      	cmp	r3, #35	; 0x23
 8003fe4:	d87e      	bhi.n	80040e4 <_ZNK13geometry_msgs18PoseWithCovariance9serializeEPh+0x130>
      union {
        double real;
        uint64_t base;
      } u_covariancei;
      u_covariancei.real = this->covariance[i];
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	330b      	adds	r3, #11
 8003fec:	00db      	lsls	r3, r3, #3
 8003fee:	4413      	add	r3, r2
 8003ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff4:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_covariancei.base >> (8 * 0)) & 0xFF;
 8003ff8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ffc:	6979      	ldr	r1, [r7, #20]
 8003ffe:	6838      	ldr	r0, [r7, #0]
 8004000:	4401      	add	r1, r0
 8004002:	b2d3      	uxtb	r3, r2
 8004004:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_covariancei.base >> (8 * 1)) & 0xFF;
 8004006:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800400a:	f04f 0200 	mov.w	r2, #0
 800400e:	f04f 0300 	mov.w	r3, #0
 8004012:	0a02      	lsrs	r2, r0, #8
 8004014:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004018:	0a0b      	lsrs	r3, r1, #8
 800401a:	6979      	ldr	r1, [r7, #20]
 800401c:	3101      	adds	r1, #1
 800401e:	6838      	ldr	r0, [r7, #0]
 8004020:	4401      	add	r1, r0
 8004022:	b2d3      	uxtb	r3, r2
 8004024:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_covariancei.base >> (8 * 2)) & 0xFF;
 8004026:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800402a:	f04f 0200 	mov.w	r2, #0
 800402e:	f04f 0300 	mov.w	r3, #0
 8004032:	0c02      	lsrs	r2, r0, #16
 8004034:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004038:	0c0b      	lsrs	r3, r1, #16
 800403a:	6979      	ldr	r1, [r7, #20]
 800403c:	3102      	adds	r1, #2
 800403e:	6838      	ldr	r0, [r7, #0]
 8004040:	4401      	add	r1, r0
 8004042:	b2d3      	uxtb	r3, r2
 8004044:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_covariancei.base >> (8 * 3)) & 0xFF;
 8004046:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800404a:	f04f 0200 	mov.w	r2, #0
 800404e:	f04f 0300 	mov.w	r3, #0
 8004052:	0e02      	lsrs	r2, r0, #24
 8004054:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004058:	0e0b      	lsrs	r3, r1, #24
 800405a:	6979      	ldr	r1, [r7, #20]
 800405c:	3103      	adds	r1, #3
 800405e:	6838      	ldr	r0, [r7, #0]
 8004060:	4401      	add	r1, r0
 8004062:	b2d3      	uxtb	r3, r2
 8004064:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_covariancei.base >> (8 * 4)) & 0xFF;
 8004066:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800406a:	f04f 0200 	mov.w	r2, #0
 800406e:	f04f 0300 	mov.w	r3, #0
 8004072:	000a      	movs	r2, r1
 8004074:	2300      	movs	r3, #0
 8004076:	6979      	ldr	r1, [r7, #20]
 8004078:	3104      	adds	r1, #4
 800407a:	6838      	ldr	r0, [r7, #0]
 800407c:	4401      	add	r1, r0
 800407e:	b2d3      	uxtb	r3, r2
 8004080:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_covariancei.base >> (8 * 5)) & 0xFF;
 8004082:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004086:	f04f 0200 	mov.w	r2, #0
 800408a:	f04f 0300 	mov.w	r3, #0
 800408e:	0a0a      	lsrs	r2, r1, #8
 8004090:	2300      	movs	r3, #0
 8004092:	6979      	ldr	r1, [r7, #20]
 8004094:	3105      	adds	r1, #5
 8004096:	6838      	ldr	r0, [r7, #0]
 8004098:	4401      	add	r1, r0
 800409a:	b2d3      	uxtb	r3, r2
 800409c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_covariancei.base >> (8 * 6)) & 0xFF;
 800409e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80040a2:	f04f 0200 	mov.w	r2, #0
 80040a6:	f04f 0300 	mov.w	r3, #0
 80040aa:	0c0a      	lsrs	r2, r1, #16
 80040ac:	2300      	movs	r3, #0
 80040ae:	6979      	ldr	r1, [r7, #20]
 80040b0:	3106      	adds	r1, #6
 80040b2:	6838      	ldr	r0, [r7, #0]
 80040b4:	4401      	add	r1, r0
 80040b6:	b2d3      	uxtb	r3, r2
 80040b8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_covariancei.base >> (8 * 7)) & 0xFF;
 80040ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80040be:	f04f 0200 	mov.w	r2, #0
 80040c2:	f04f 0300 	mov.w	r3, #0
 80040c6:	0e0a      	lsrs	r2, r1, #24
 80040c8:	2300      	movs	r3, #0
 80040ca:	6979      	ldr	r1, [r7, #20]
 80040cc:	3107      	adds	r1, #7
 80040ce:	6838      	ldr	r0, [r7, #0]
 80040d0:	4401      	add	r1, r0
 80040d2:	b2d3      	uxtb	r3, r2
 80040d4:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->covariance[i]);
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	3308      	adds	r3, #8
 80040da:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 36; i++){
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	3301      	adds	r3, #1
 80040e0:	613b      	str	r3, [r7, #16]
 80040e2:	e77d      	b.n	8003fe0 <_ZNK13geometry_msgs18PoseWithCovariance9serializeEPh+0x2c>
      }
      return offset;
 80040e4:	697b      	ldr	r3, [r7, #20]
    }
 80040e6:	4618      	mov	r0, r3
 80040e8:	3718      	adds	r7, #24
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}

080040ee <_ZN13geometry_msgs18PoseWithCovariance11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80040ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040f2:	b0a3      	sub	sp, #140	; 0x8c
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6778      	str	r0, [r7, #116]	; 0x74
 80040f8:	6739      	str	r1, [r7, #112]	; 0x70
    {
      int offset = 0;
 80040fa:	2300      	movs	r3, #0
 80040fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      offset += this->pose.deserialize(inbuffer + offset);
 8004100:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004102:	f103 0008 	add.w	r0, r3, #8
 8004106:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800410a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800410c:	4413      	add	r3, r2
 800410e:	4619      	mov	r1, r3
 8004110:	f7ff fee8 	bl	8003ee4 <_ZN13geometry_msgs4Pose11deserializeEPh>
 8004114:	4602      	mov	r2, r0
 8004116:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800411a:	4413      	add	r3, r2
 800411c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      for( uint32_t i = 0; i < 36; i++){
 8004120:	2300      	movs	r3, #0
 8004122:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004126:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800412a:	2b23      	cmp	r3, #35	; 0x23
 800412c:	f200 80f8 	bhi.w	8004320 <_ZN13geometry_msgs18PoseWithCovariance11deserializeEPh+0x232>
      union {
        double real;
        uint64_t base;
      } u_covariancei;
      u_covariancei.base = 0;
 8004130:	f04f 0200 	mov.w	r2, #0
 8004134:	f04f 0300 	mov.w	r3, #0
 8004138:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800413c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8004140:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004144:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004146:	4413      	add	r3, r2
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	b2db      	uxtb	r3, r3
 800414c:	2200      	movs	r2, #0
 800414e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004150:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004152:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004154:	4303      	orrs	r3, r0
 8004156:	65bb      	str	r3, [r7, #88]	; 0x58
 8004158:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800415a:	430b      	orrs	r3, r1
 800415c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800415e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004162:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004166:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800416a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800416e:	1c5a      	adds	r2, r3, #1
 8004170:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004172:	4413      	add	r3, r2
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	b2db      	uxtb	r3, r3
 8004178:	2200      	movs	r2, #0
 800417a:	469a      	mov	sl, r3
 800417c:	4693      	mov	fp, r2
 800417e:	f04f 0200 	mov.w	r2, #0
 8004182:	f04f 0300 	mov.w	r3, #0
 8004186:	ea4f 230b 	mov.w	r3, fp, lsl #8
 800418a:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 800418e:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8004192:	ea40 0602 	orr.w	r6, r0, r2
 8004196:	653e      	str	r6, [r7, #80]	; 0x50
 8004198:	430b      	orrs	r3, r1
 800419a:	657b      	str	r3, [r7, #84]	; 0x54
 800419c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80041a0:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80041a4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80041a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80041ac:	1c9a      	adds	r2, r3, #2
 80041ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041b0:	4413      	add	r3, r2
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	b2db      	uxtb	r3, r3
 80041b6:	2200      	movs	r2, #0
 80041b8:	4698      	mov	r8, r3
 80041ba:	4691      	mov	r9, r2
 80041bc:	f04f 0200 	mov.w	r2, #0
 80041c0:	f04f 0300 	mov.w	r3, #0
 80041c4:	ea4f 4309 	mov.w	r3, r9, lsl #16
 80041c8:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 80041cc:	ea4f 4208 	mov.w	r2, r8, lsl #16
 80041d0:	ea40 0602 	orr.w	r6, r0, r2
 80041d4:	64be      	str	r6, [r7, #72]	; 0x48
 80041d6:	430b      	orrs	r3, r1
 80041d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041da:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80041de:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80041e2:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80041e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80041ea:	1cda      	adds	r2, r3, #3
 80041ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041ee:	4413      	add	r3, r2
 80041f0:	781b      	ldrb	r3, [r3, #0]
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	2200      	movs	r2, #0
 80041f6:	663b      	str	r3, [r7, #96]	; 0x60
 80041f8:	667a      	str	r2, [r7, #100]	; 0x64
 80041fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80041fc:	0a1d      	lsrs	r5, r3, #8
 80041fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004200:	061c      	lsls	r4, r3, #24
 8004202:	ea40 0304 	orr.w	r3, r0, r4
 8004206:	643b      	str	r3, [r7, #64]	; 0x40
 8004208:	ea41 0305 	orr.w	r3, r1, r5
 800420c:	647b      	str	r3, [r7, #68]	; 0x44
 800420e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004212:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8004216:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800421a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800421e:	1d1a      	adds	r2, r3, #4
 8004220:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004222:	4413      	add	r3, r2
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	b2db      	uxtb	r3, r3
 8004228:	2200      	movs	r2, #0
 800422a:	63bb      	str	r3, [r7, #56]	; 0x38
 800422c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800422e:	f04f 0200 	mov.w	r2, #0
 8004232:	f04f 0300 	mov.w	r3, #0
 8004236:	6bbe      	ldr	r6, [r7, #56]	; 0x38
 8004238:	0033      	movs	r3, r6
 800423a:	2200      	movs	r2, #0
 800423c:	ea40 0602 	orr.w	r6, r0, r2
 8004240:	633e      	str	r6, [r7, #48]	; 0x30
 8004242:	430b      	orrs	r3, r1
 8004244:	637b      	str	r3, [r7, #52]	; 0x34
 8004246:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800424a:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800424e:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8004252:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004256:	1d5a      	adds	r2, r3, #5
 8004258:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800425a:	4413      	add	r3, r2
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	b2db      	uxtb	r3, r3
 8004260:	2200      	movs	r2, #0
 8004262:	62bb      	str	r3, [r7, #40]	; 0x28
 8004264:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004266:	f04f 0200 	mov.w	r2, #0
 800426a:	f04f 0300 	mov.w	r3, #0
 800426e:	6abe      	ldr	r6, [r7, #40]	; 0x28
 8004270:	0233      	lsls	r3, r6, #8
 8004272:	2200      	movs	r2, #0
 8004274:	ea40 0602 	orr.w	r6, r0, r2
 8004278:	623e      	str	r6, [r7, #32]
 800427a:	430b      	orrs	r3, r1
 800427c:	627b      	str	r3, [r7, #36]	; 0x24
 800427e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004282:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8004286:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800428a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800428e:	1d9a      	adds	r2, r3, #6
 8004290:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004292:	4413      	add	r3, r2
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	b2db      	uxtb	r3, r3
 8004298:	2200      	movs	r2, #0
 800429a:	61bb      	str	r3, [r7, #24]
 800429c:	61fa      	str	r2, [r7, #28]
 800429e:	f04f 0200 	mov.w	r2, #0
 80042a2:	f04f 0300 	mov.w	r3, #0
 80042a6:	69be      	ldr	r6, [r7, #24]
 80042a8:	0433      	lsls	r3, r6, #16
 80042aa:	2200      	movs	r2, #0
 80042ac:	ea40 0602 	orr.w	r6, r0, r2
 80042b0:	613e      	str	r6, [r7, #16]
 80042b2:	430b      	orrs	r3, r1
 80042b4:	617b      	str	r3, [r7, #20]
 80042b6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80042ba:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80042be:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80042c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80042c6:	1dda      	adds	r2, r3, #7
 80042c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80042ca:	4413      	add	r3, r2
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	2200      	movs	r2, #0
 80042d2:	60bb      	str	r3, [r7, #8]
 80042d4:	60fa      	str	r2, [r7, #12]
 80042d6:	f04f 0200 	mov.w	r2, #0
 80042da:	f04f 0300 	mov.w	r3, #0
 80042de:	68be      	ldr	r6, [r7, #8]
 80042e0:	0633      	lsls	r3, r6, #24
 80042e2:	2200      	movs	r2, #0
 80042e4:	ea40 0602 	orr.w	r6, r0, r2
 80042e8:	603e      	str	r6, [r7, #0]
 80042ea:	430b      	orrs	r3, r1
 80042ec:	607b      	str	r3, [r7, #4]
 80042ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042f2:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
      this->covariance[i] = u_covariancei.real;
 80042f6:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80042fa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80042fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004300:	330b      	adds	r3, #11
 8004302:	00db      	lsls	r3, r3, #3
 8004304:	4413      	add	r3, r2
 8004306:	e9c3 0100 	strd	r0, r1, [r3]
      offset += sizeof(this->covariance[i]);
 800430a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800430e:	3308      	adds	r3, #8
 8004310:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      for( uint32_t i = 0; i < 36; i++){
 8004314:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004318:	3301      	adds	r3, #1
 800431a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800431e:	e702      	b.n	8004126 <_ZN13geometry_msgs18PoseWithCovariance11deserializeEPh+0x38>
      }
     return offset;
 8004320:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    }
 8004324:	4618      	mov	r0, r3
 8004326:	378c      	adds	r7, #140	; 0x8c
 8004328:	46bd      	mov	sp, r7
 800432a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08004330 <_ZN13geometry_msgs18PoseWithCovariance7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/PoseWithCovariance"; };
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	4b03      	ldr	r3, [pc, #12]	; (8004348 <_ZN13geometry_msgs18PoseWithCovariance7getTypeEv+0x18>)
 800433a:	4618      	mov	r0, r3
 800433c:	370c      	adds	r7, #12
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr
 8004346:	bf00      	nop
 8004348:	0800bf84 	.word	0x0800bf84

0800434c <_ZN13geometry_msgs18PoseWithCovariance6getMD5Ev>:
    virtual const char * getMD5() override { return "c23e848cf1b7533a8d7c259073a97e6f"; };
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	4b03      	ldr	r3, [pc, #12]	; (8004364 <_ZN13geometry_msgs18PoseWithCovariance6getMD5Ev+0x18>)
 8004356:	4618      	mov	r0, r3
 8004358:	370c      	adds	r7, #12
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr
 8004362:	bf00      	nop
 8004364:	0800bfa8 	.word	0x0800bfa8

08004368 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4618      	mov	r0, r3
 8004374:	f7fc ffd0 	bl	8001318 <_ZN3ros3MsgC1Ev>
 8004378:	4a0e      	ldr	r2, [pc, #56]	; (80043b4 <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	601a      	str	r2, [r3, #0]
 800437e:	6879      	ldr	r1, [r7, #4]
 8004380:	f04f 0200 	mov.w	r2, #0
 8004384:	f04f 0300 	mov.w	r3, #0
 8004388:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800438c:	6879      	ldr	r1, [r7, #4]
 800438e:	f04f 0200 	mov.w	r2, #0
 8004392:	f04f 0300 	mov.w	r3, #0
 8004396:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800439a:	6879      	ldr	r1, [r7, #4]
 800439c:	f04f 0200 	mov.w	r2, #0
 80043a0:	f04f 0300 	mov.w	r3, #0
 80043a4:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	4618      	mov	r0, r3
 80043ac:	3708      	adds	r7, #8
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	bf00      	nop
 80043b4:	0800c1b8 	.word	0x0800c1b8

080043b8 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80043b8:	b480      	push	{r7}
 80043ba:	b08b      	sub	sp, #44	; 0x2c
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80043c2:	2300      	movs	r3, #0
 80043c4:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80043cc:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 80043d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80043d6:	6838      	ldr	r0, [r7, #0]
 80043d8:	4401      	add	r1, r0
 80043da:	b2d3      	uxtb	r3, r2
 80043dc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 80043de:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80043e2:	f04f 0200 	mov.w	r2, #0
 80043e6:	f04f 0300 	mov.w	r3, #0
 80043ea:	0a02      	lsrs	r2, r0, #8
 80043ec:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80043f0:	0a0b      	lsrs	r3, r1, #8
 80043f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80043f4:	3101      	adds	r1, #1
 80043f6:	6838      	ldr	r0, [r7, #0]
 80043f8:	4401      	add	r1, r0
 80043fa:	b2d3      	uxtb	r3, r2
 80043fc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 80043fe:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004402:	f04f 0200 	mov.w	r2, #0
 8004406:	f04f 0300 	mov.w	r3, #0
 800440a:	0c02      	lsrs	r2, r0, #16
 800440c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004410:	0c0b      	lsrs	r3, r1, #16
 8004412:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004414:	3102      	adds	r1, #2
 8004416:	6838      	ldr	r0, [r7, #0]
 8004418:	4401      	add	r1, r0
 800441a:	b2d3      	uxtb	r3, r2
 800441c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 800441e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004422:	f04f 0200 	mov.w	r2, #0
 8004426:	f04f 0300 	mov.w	r3, #0
 800442a:	0e02      	lsrs	r2, r0, #24
 800442c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004430:	0e0b      	lsrs	r3, r1, #24
 8004432:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004434:	3103      	adds	r1, #3
 8004436:	6838      	ldr	r0, [r7, #0]
 8004438:	4401      	add	r1, r0
 800443a:	b2d3      	uxtb	r3, r2
 800443c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 800443e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004442:	f04f 0200 	mov.w	r2, #0
 8004446:	f04f 0300 	mov.w	r3, #0
 800444a:	000a      	movs	r2, r1
 800444c:	2300      	movs	r3, #0
 800444e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004450:	3104      	adds	r1, #4
 8004452:	6838      	ldr	r0, [r7, #0]
 8004454:	4401      	add	r1, r0
 8004456:	b2d3      	uxtb	r3, r2
 8004458:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 800445a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800445e:	f04f 0200 	mov.w	r2, #0
 8004462:	f04f 0300 	mov.w	r3, #0
 8004466:	0a0a      	lsrs	r2, r1, #8
 8004468:	2300      	movs	r3, #0
 800446a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800446c:	3105      	adds	r1, #5
 800446e:	6838      	ldr	r0, [r7, #0]
 8004470:	4401      	add	r1, r0
 8004472:	b2d3      	uxtb	r3, r2
 8004474:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8004476:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800447a:	f04f 0200 	mov.w	r2, #0
 800447e:	f04f 0300 	mov.w	r3, #0
 8004482:	0c0a      	lsrs	r2, r1, #16
 8004484:	2300      	movs	r3, #0
 8004486:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004488:	3106      	adds	r1, #6
 800448a:	6838      	ldr	r0, [r7, #0]
 800448c:	4401      	add	r1, r0
 800448e:	b2d3      	uxtb	r3, r2
 8004490:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8004492:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004496:	f04f 0200 	mov.w	r2, #0
 800449a:	f04f 0300 	mov.w	r3, #0
 800449e:	0e0a      	lsrs	r2, r1, #24
 80044a0:	2300      	movs	r3, #0
 80044a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80044a4:	3107      	adds	r1, #7
 80044a6:	6838      	ldr	r0, [r7, #0]
 80044a8:	4401      	add	r1, r0
 80044aa:	b2d3      	uxtb	r3, r2
 80044ac:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 80044ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b0:	3308      	adds	r3, #8
 80044b2:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80044ba:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 80044be:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80044c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80044c4:	6838      	ldr	r0, [r7, #0]
 80044c6:	4401      	add	r1, r0
 80044c8:	b2d3      	uxtb	r3, r2
 80044ca:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 80044cc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80044d0:	f04f 0200 	mov.w	r2, #0
 80044d4:	f04f 0300 	mov.w	r3, #0
 80044d8:	0a02      	lsrs	r2, r0, #8
 80044da:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80044de:	0a0b      	lsrs	r3, r1, #8
 80044e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80044e2:	3101      	adds	r1, #1
 80044e4:	6838      	ldr	r0, [r7, #0]
 80044e6:	4401      	add	r1, r0
 80044e8:	b2d3      	uxtb	r3, r2
 80044ea:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 80044ec:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80044f0:	f04f 0200 	mov.w	r2, #0
 80044f4:	f04f 0300 	mov.w	r3, #0
 80044f8:	0c02      	lsrs	r2, r0, #16
 80044fa:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80044fe:	0c0b      	lsrs	r3, r1, #16
 8004500:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004502:	3102      	adds	r1, #2
 8004504:	6838      	ldr	r0, [r7, #0]
 8004506:	4401      	add	r1, r0
 8004508:	b2d3      	uxtb	r3, r2
 800450a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 800450c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004510:	f04f 0200 	mov.w	r2, #0
 8004514:	f04f 0300 	mov.w	r3, #0
 8004518:	0e02      	lsrs	r2, r0, #24
 800451a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800451e:	0e0b      	lsrs	r3, r1, #24
 8004520:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004522:	3103      	adds	r1, #3
 8004524:	6838      	ldr	r0, [r7, #0]
 8004526:	4401      	add	r1, r0
 8004528:	b2d3      	uxtb	r3, r2
 800452a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 800452c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004530:	f04f 0200 	mov.w	r2, #0
 8004534:	f04f 0300 	mov.w	r3, #0
 8004538:	000a      	movs	r2, r1
 800453a:	2300      	movs	r3, #0
 800453c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800453e:	3104      	adds	r1, #4
 8004540:	6838      	ldr	r0, [r7, #0]
 8004542:	4401      	add	r1, r0
 8004544:	b2d3      	uxtb	r3, r2
 8004546:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 8004548:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800454c:	f04f 0200 	mov.w	r2, #0
 8004550:	f04f 0300 	mov.w	r3, #0
 8004554:	0a0a      	lsrs	r2, r1, #8
 8004556:	2300      	movs	r3, #0
 8004558:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800455a:	3105      	adds	r1, #5
 800455c:	6838      	ldr	r0, [r7, #0]
 800455e:	4401      	add	r1, r0
 8004560:	b2d3      	uxtb	r3, r2
 8004562:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 8004564:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004568:	f04f 0200 	mov.w	r2, #0
 800456c:	f04f 0300 	mov.w	r3, #0
 8004570:	0c0a      	lsrs	r2, r1, #16
 8004572:	2300      	movs	r3, #0
 8004574:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004576:	3106      	adds	r1, #6
 8004578:	6838      	ldr	r0, [r7, #0]
 800457a:	4401      	add	r1, r0
 800457c:	b2d3      	uxtb	r3, r2
 800457e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8004580:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004584:	f04f 0200 	mov.w	r2, #0
 8004588:	f04f 0300 	mov.w	r3, #0
 800458c:	0e0a      	lsrs	r2, r1, #24
 800458e:	2300      	movs	r3, #0
 8004590:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004592:	3107      	adds	r1, #7
 8004594:	6838      	ldr	r0, [r7, #0]
 8004596:	4401      	add	r1, r0
 8004598:	b2d3      	uxtb	r3, r2
 800459a:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 800459c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459e:	3308      	adds	r3, #8
 80045a0:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80045a8:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 80045ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80045b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80045b2:	6838      	ldr	r0, [r7, #0]
 80045b4:	4401      	add	r1, r0
 80045b6:	b2d3      	uxtb	r3, r2
 80045b8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 80045ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80045be:	f04f 0200 	mov.w	r2, #0
 80045c2:	f04f 0300 	mov.w	r3, #0
 80045c6:	0a02      	lsrs	r2, r0, #8
 80045c8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80045cc:	0a0b      	lsrs	r3, r1, #8
 80045ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80045d0:	3101      	adds	r1, #1
 80045d2:	6838      	ldr	r0, [r7, #0]
 80045d4:	4401      	add	r1, r0
 80045d6:	b2d3      	uxtb	r3, r2
 80045d8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 80045da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80045de:	f04f 0200 	mov.w	r2, #0
 80045e2:	f04f 0300 	mov.w	r3, #0
 80045e6:	0c02      	lsrs	r2, r0, #16
 80045e8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80045ec:	0c0b      	lsrs	r3, r1, #16
 80045ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80045f0:	3102      	adds	r1, #2
 80045f2:	6838      	ldr	r0, [r7, #0]
 80045f4:	4401      	add	r1, r0
 80045f6:	b2d3      	uxtb	r3, r2
 80045f8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 80045fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80045fe:	f04f 0200 	mov.w	r2, #0
 8004602:	f04f 0300 	mov.w	r3, #0
 8004606:	0e02      	lsrs	r2, r0, #24
 8004608:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800460c:	0e0b      	lsrs	r3, r1, #24
 800460e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004610:	3103      	adds	r1, #3
 8004612:	6838      	ldr	r0, [r7, #0]
 8004614:	4401      	add	r1, r0
 8004616:	b2d3      	uxtb	r3, r2
 8004618:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 800461a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800461e:	f04f 0200 	mov.w	r2, #0
 8004622:	f04f 0300 	mov.w	r3, #0
 8004626:	000a      	movs	r2, r1
 8004628:	2300      	movs	r3, #0
 800462a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800462c:	3104      	adds	r1, #4
 800462e:	6838      	ldr	r0, [r7, #0]
 8004630:	4401      	add	r1, r0
 8004632:	b2d3      	uxtb	r3, r2
 8004634:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 8004636:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800463a:	f04f 0200 	mov.w	r2, #0
 800463e:	f04f 0300 	mov.w	r3, #0
 8004642:	0a0a      	lsrs	r2, r1, #8
 8004644:	2300      	movs	r3, #0
 8004646:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004648:	3105      	adds	r1, #5
 800464a:	6838      	ldr	r0, [r7, #0]
 800464c:	4401      	add	r1, r0
 800464e:	b2d3      	uxtb	r3, r2
 8004650:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 8004652:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004656:	f04f 0200 	mov.w	r2, #0
 800465a:	f04f 0300 	mov.w	r3, #0
 800465e:	0c0a      	lsrs	r2, r1, #16
 8004660:	2300      	movs	r3, #0
 8004662:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004664:	3106      	adds	r1, #6
 8004666:	6838      	ldr	r0, [r7, #0]
 8004668:	4401      	add	r1, r0
 800466a:	b2d3      	uxtb	r3, r2
 800466c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 800466e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004672:	f04f 0200 	mov.w	r2, #0
 8004676:	f04f 0300 	mov.w	r3, #0
 800467a:	0e0a      	lsrs	r2, r1, #24
 800467c:	2300      	movs	r3, #0
 800467e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004680:	3107      	adds	r1, #7
 8004682:	6838      	ldr	r0, [r7, #0]
 8004684:	4401      	add	r1, r0
 8004686:	b2d3      	uxtb	r3, r2
 8004688:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 800468a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468c:	3308      	adds	r3, #8
 800468e:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 8004690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8004692:	4618      	mov	r0, r3
 8004694:	372c      	adds	r7, #44	; 0x2c
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr

0800469e <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800469e:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80046a2:	b0eb      	sub	sp, #428	; 0x1ac
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 80046aa:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 80046ae:	2300      	movs	r3, #0
 80046b0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 80046b4:	f04f 0200 	mov.w	r2, #0
 80046b8:	f04f 0300 	mov.w	r3, #0
 80046bc:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80046c0:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80046c4:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 80046c8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80046cc:	4413      	add	r3, r2
 80046ce:	781b      	ldrb	r3, [r3, #0]
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	2200      	movs	r2, #0
 80046d4:	461c      	mov	r4, r3
 80046d6:	4615      	mov	r5, r2
 80046d8:	ea40 0804 	orr.w	r8, r0, r4
 80046dc:	ea41 0905 	orr.w	r9, r1, r5
 80046e0:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80046e4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80046e8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80046ec:	1c5a      	adds	r2, r3, #1
 80046ee:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80046f2:	4413      	add	r3, r2
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	2200      	movs	r2, #0
 80046fa:	469a      	mov	sl, r3
 80046fc:	4693      	mov	fp, r2
 80046fe:	f04f 0200 	mov.w	r2, #0
 8004702:	f04f 0300 	mov.w	r3, #0
 8004706:	ea4f 230b 	mov.w	r3, fp, lsl #8
 800470a:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 800470e:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8004712:	ea40 0402 	orr.w	r4, r0, r2
 8004716:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 800471a:	430b      	orrs	r3, r1
 800471c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8004720:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 8004724:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004728:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800472c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8004730:	1c9a      	adds	r2, r3, #2
 8004732:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004736:	4413      	add	r3, r2
 8004738:	781b      	ldrb	r3, [r3, #0]
 800473a:	b2db      	uxtb	r3, r3
 800473c:	2200      	movs	r2, #0
 800473e:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8004742:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 8004746:	f04f 0200 	mov.w	r2, #0
 800474a:	f04f 0300 	mov.w	r3, #0
 800474e:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 8004752:	464c      	mov	r4, r9
 8004754:	0423      	lsls	r3, r4, #16
 8004756:	4644      	mov	r4, r8
 8004758:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 800475c:	4644      	mov	r4, r8
 800475e:	0422      	lsls	r2, r4, #16
 8004760:	ea40 0402 	orr.w	r4, r0, r2
 8004764:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 8004768:	430b      	orrs	r3, r1
 800476a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 800476e:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 8004772:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004776:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800477a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800477e:	1cda      	adds	r2, r3, #3
 8004780:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004784:	4413      	add	r3, r2
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	b2db      	uxtb	r3, r3
 800478a:	2200      	movs	r2, #0
 800478c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8004790:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8004794:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8004798:	4623      	mov	r3, r4
 800479a:	0a1b      	lsrs	r3, r3, #8
 800479c:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 80047a0:	4623      	mov	r3, r4
 80047a2:	061b      	lsls	r3, r3, #24
 80047a4:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80047a8:	e9d7 4556 	ldrd	r4, r5, [r7, #344]	; 0x158
 80047ac:	4623      	mov	r3, r4
 80047ae:	4303      	orrs	r3, r0
 80047b0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80047b4:	462b      	mov	r3, r5
 80047b6:	430b      	orrs	r3, r1
 80047b8:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80047bc:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 80047c0:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 80047c4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80047c8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80047cc:	1d1a      	adds	r2, r3, #4
 80047ce:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80047d2:	4413      	add	r3, r2
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	2200      	movs	r2, #0
 80047da:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 80047de:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80047e2:	f04f 0200 	mov.w	r2, #0
 80047e6:	f04f 0300 	mov.w	r3, #0
 80047ea:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 80047ee:	0023      	movs	r3, r4
 80047f0:	2200      	movs	r2, #0
 80047f2:	ea40 0402 	orr.w	r4, r0, r2
 80047f6:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 80047fa:	430b      	orrs	r3, r1
 80047fc:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8004800:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8004804:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8004808:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800480c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8004810:	1d5a      	adds	r2, r3, #5
 8004812:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004816:	4413      	add	r3, r2
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	b2db      	uxtb	r3, r3
 800481c:	2200      	movs	r2, #0
 800481e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8004822:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8004826:	f04f 0200 	mov.w	r2, #0
 800482a:	f04f 0300 	mov.w	r3, #0
 800482e:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 8004832:	0223      	lsls	r3, r4, #8
 8004834:	2200      	movs	r2, #0
 8004836:	ea40 0402 	orr.w	r4, r0, r2
 800483a:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 800483e:	430b      	orrs	r3, r1
 8004840:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8004844:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8004848:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800484c:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8004850:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8004854:	1d9a      	adds	r2, r3, #6
 8004856:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800485a:	4413      	add	r3, r2
 800485c:	781b      	ldrb	r3, [r3, #0]
 800485e:	b2db      	uxtb	r3, r3
 8004860:	2200      	movs	r2, #0
 8004862:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004866:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 800486a:	f04f 0200 	mov.w	r2, #0
 800486e:	f04f 0300 	mov.w	r3, #0
 8004872:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 8004876:	0423      	lsls	r3, r4, #16
 8004878:	2200      	movs	r2, #0
 800487a:	ea40 0402 	orr.w	r4, r0, r2
 800487e:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 8004882:	430b      	orrs	r3, r1
 8004884:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004888:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 800488c:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8004890:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8004894:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8004898:	1dda      	adds	r2, r3, #7
 800489a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800489e:	4413      	add	r3, r2
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	2200      	movs	r2, #0
 80048a6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80048aa:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80048ae:	f04f 0200 	mov.w	r2, #0
 80048b2:	f04f 0300 	mov.w	r3, #0
 80048b6:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 80048ba:	0623      	lsls	r3, r4, #24
 80048bc:	2200      	movs	r2, #0
 80048be:	ea40 0402 	orr.w	r4, r0, r2
 80048c2:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 80048c6:	430b      	orrs	r3, r1
 80048c8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80048cc:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 80048d0:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 80048d4:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80048d8:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80048dc:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 80048e0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80048e4:	3308      	adds	r3, #8
 80048e6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 80048ea:	f04f 0200 	mov.w	r2, #0
 80048ee:	f04f 0300 	mov.w	r3, #0
 80048f2:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80048f6:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80048fa:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 80048fe:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004902:	4413      	add	r3, r2
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	b2db      	uxtb	r3, r3
 8004908:	2200      	movs	r2, #0
 800490a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800490e:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8004912:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8004916:	4623      	mov	r3, r4
 8004918:	4303      	orrs	r3, r0
 800491a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800491e:	462b      	mov	r3, r5
 8004920:	430b      	orrs	r3, r1
 8004922:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004926:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 800492a:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800492e:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8004932:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8004936:	1c5a      	adds	r2, r3, #1
 8004938:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800493c:	4413      	add	r3, r2
 800493e:	781b      	ldrb	r3, [r3, #0]
 8004940:	b2db      	uxtb	r3, r3
 8004942:	2200      	movs	r2, #0
 8004944:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004948:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 800494c:	f04f 0200 	mov.w	r2, #0
 8004950:	f04f 0300 	mov.w	r3, #0
 8004954:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8004958:	464c      	mov	r4, r9
 800495a:	0223      	lsls	r3, r4, #8
 800495c:	4644      	mov	r4, r8
 800495e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004962:	4644      	mov	r4, r8
 8004964:	0222      	lsls	r2, r4, #8
 8004966:	ea40 0402 	orr.w	r4, r0, r2
 800496a:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 800496e:	430b      	orrs	r3, r1
 8004970:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004974:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8004978:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800497c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8004980:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8004984:	1c9a      	adds	r2, r3, #2
 8004986:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800498a:	4413      	add	r3, r2
 800498c:	781b      	ldrb	r3, [r3, #0]
 800498e:	b2db      	uxtb	r3, r3
 8004990:	2200      	movs	r2, #0
 8004992:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004996:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800499a:	f04f 0200 	mov.w	r2, #0
 800499e:	f04f 0300 	mov.w	r3, #0
 80049a2:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 80049a6:	464c      	mov	r4, r9
 80049a8:	0423      	lsls	r3, r4, #16
 80049aa:	4644      	mov	r4, r8
 80049ac:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 80049b0:	4644      	mov	r4, r8
 80049b2:	0422      	lsls	r2, r4, #16
 80049b4:	ea40 0402 	orr.w	r4, r0, r2
 80049b8:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 80049bc:	430b      	orrs	r3, r1
 80049be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80049c2:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 80049c6:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80049ca:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 80049ce:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80049d2:	1cda      	adds	r2, r3, #3
 80049d4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80049d8:	4413      	add	r3, r2
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	2200      	movs	r2, #0
 80049e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80049e4:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80049e8:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80049ec:	4623      	mov	r3, r4
 80049ee:	0a1b      	lsrs	r3, r3, #8
 80049f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80049f4:	4623      	mov	r3, r4
 80049f6:	061b      	lsls	r3, r3, #24
 80049f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80049fc:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8004a00:	4623      	mov	r3, r4
 8004a02:	4303      	orrs	r3, r0
 8004a04:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a08:	462b      	mov	r3, r5
 8004a0a:	430b      	orrs	r3, r1
 8004a0c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004a10:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8004a14:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8004a18:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8004a1c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8004a20:	1d1a      	adds	r2, r3, #4
 8004a22:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004a26:	4413      	add	r3, r2
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	b2db      	uxtb	r3, r3
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a32:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004a36:	f04f 0200 	mov.w	r2, #0
 8004a3a:	f04f 0300 	mov.w	r3, #0
 8004a3e:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8004a42:	0023      	movs	r3, r4
 8004a44:	2200      	movs	r2, #0
 8004a46:	ea40 0402 	orr.w	r4, r0, r2
 8004a4a:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8004a4e:	430b      	orrs	r3, r1
 8004a50:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004a54:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8004a58:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8004a5c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8004a60:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8004a64:	1d5a      	adds	r2, r3, #5
 8004a66:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004a6a:	4413      	add	r3, r2
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	2200      	movs	r2, #0
 8004a72:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004a76:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8004a7a:	f04f 0200 	mov.w	r2, #0
 8004a7e:	f04f 0300 	mov.w	r3, #0
 8004a82:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8004a86:	0223      	lsls	r3, r4, #8
 8004a88:	2200      	movs	r2, #0
 8004a8a:	ea40 0402 	orr.w	r4, r0, r2
 8004a8e:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8004a92:	430b      	orrs	r3, r1
 8004a94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004a98:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8004a9c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8004aa0:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8004aa4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8004aa8:	1d9a      	adds	r2, r3, #6
 8004aaa:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004aae:	4413      	add	r3, r2
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004aba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004abe:	f04f 0200 	mov.w	r2, #0
 8004ac2:	f04f 0300 	mov.w	r3, #0
 8004ac6:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8004aca:	0423      	lsls	r3, r4, #16
 8004acc:	2200      	movs	r2, #0
 8004ace:	ea40 0402 	orr.w	r4, r0, r2
 8004ad2:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8004ad6:	430b      	orrs	r3, r1
 8004ad8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004adc:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8004ae0:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8004ae4:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8004ae8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8004aec:	1dda      	adds	r2, r3, #7
 8004aee:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004af2:	4413      	add	r3, r2
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	2200      	movs	r2, #0
 8004afa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004afe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004b02:	f04f 0200 	mov.w	r2, #0
 8004b06:	f04f 0300 	mov.w	r3, #0
 8004b0a:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8004b0e:	0623      	lsls	r3, r4, #24
 8004b10:	2200      	movs	r2, #0
 8004b12:	ea40 0402 	orr.w	r4, r0, r2
 8004b16:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8004b1a:	430b      	orrs	r3, r1
 8004b1c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004b20:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8004b24:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 8004b28:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8004b2c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8004b30:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8004b34:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8004b38:	3308      	adds	r3, #8
 8004b3a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8004b3e:	f04f 0200 	mov.w	r2, #0
 8004b42:	f04f 0300 	mov.w	r3, #0
 8004b46:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8004b4a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8004b4e:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8004b52:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004b56:	4413      	add	r3, r2
 8004b58:	781b      	ldrb	r3, [r3, #0]
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004b62:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004b66:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	; 0x80
 8004b6a:	4623      	mov	r3, r4
 8004b6c:	4303      	orrs	r3, r0
 8004b6e:	67bb      	str	r3, [r7, #120]	; 0x78
 8004b70:	462b      	mov	r3, r5
 8004b72:	430b      	orrs	r3, r1
 8004b74:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004b76:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8004b7a:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004b7e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8004b82:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8004b86:	1c5a      	adds	r2, r3, #1
 8004b88:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004b8c:	4413      	add	r3, r2
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	2200      	movs	r2, #0
 8004b94:	673b      	str	r3, [r7, #112]	; 0x70
 8004b96:	677a      	str	r2, [r7, #116]	; 0x74
 8004b98:	f04f 0200 	mov.w	r2, #0
 8004b9c:	f04f 0300 	mov.w	r3, #0
 8004ba0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004ba4:	464c      	mov	r4, r9
 8004ba6:	0223      	lsls	r3, r4, #8
 8004ba8:	4644      	mov	r4, r8
 8004baa:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004bae:	4644      	mov	r4, r8
 8004bb0:	0222      	lsls	r2, r4, #8
 8004bb2:	ea40 0402 	orr.w	r4, r0, r2
 8004bb6:	66bc      	str	r4, [r7, #104]	; 0x68
 8004bb8:	430b      	orrs	r3, r1
 8004bba:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004bbc:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8004bc0:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8004bc4:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8004bc8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8004bcc:	1c9a      	adds	r2, r3, #2
 8004bce:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004bd2:	4413      	add	r3, r2
 8004bd4:	781b      	ldrb	r3, [r3, #0]
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	2200      	movs	r2, #0
 8004bda:	663b      	str	r3, [r7, #96]	; 0x60
 8004bdc:	667a      	str	r2, [r7, #100]	; 0x64
 8004bde:	f04f 0200 	mov.w	r2, #0
 8004be2:	f04f 0300 	mov.w	r3, #0
 8004be6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004bea:	464c      	mov	r4, r9
 8004bec:	0423      	lsls	r3, r4, #16
 8004bee:	4644      	mov	r4, r8
 8004bf0:	ea43 4314 	orr.w	r3, r3, r4, lsr #16
 8004bf4:	4644      	mov	r4, r8
 8004bf6:	0422      	lsls	r2, r4, #16
 8004bf8:	ea40 0402 	orr.w	r4, r0, r2
 8004bfc:	65bc      	str	r4, [r7, #88]	; 0x58
 8004bfe:	430b      	orrs	r3, r1
 8004c00:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c02:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8004c06:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8004c0a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8004c0e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8004c12:	1cda      	adds	r2, r3, #3
 8004c14:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004c18:	4413      	add	r3, r2
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	2200      	movs	r2, #0
 8004c20:	653b      	str	r3, [r7, #80]	; 0x50
 8004c22:	657a      	str	r2, [r7, #84]	; 0x54
 8004c24:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8004c28:	4623      	mov	r3, r4
 8004c2a:	0a1b      	lsrs	r3, r3, #8
 8004c2c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c2e:	4623      	mov	r3, r4
 8004c30:	061b      	lsls	r3, r3, #24
 8004c32:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c34:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8004c38:	4623      	mov	r3, r4
 8004c3a:	4303      	orrs	r3, r0
 8004c3c:	643b      	str	r3, [r7, #64]	; 0x40
 8004c3e:	462b      	mov	r3, r5
 8004c40:	430b      	orrs	r3, r1
 8004c42:	647b      	str	r3, [r7, #68]	; 0x44
 8004c44:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8004c48:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8004c4c:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8004c50:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8004c54:	1d1a      	adds	r2, r3, #4
 8004c56:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004c5a:	4413      	add	r3, r2
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	b2db      	uxtb	r3, r3
 8004c60:	2200      	movs	r2, #0
 8004c62:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c64:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004c66:	f04f 0200 	mov.w	r2, #0
 8004c6a:	f04f 0300 	mov.w	r3, #0
 8004c6e:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8004c70:	0023      	movs	r3, r4
 8004c72:	2200      	movs	r2, #0
 8004c74:	ea40 0402 	orr.w	r4, r0, r2
 8004c78:	633c      	str	r4, [r7, #48]	; 0x30
 8004c7a:	430b      	orrs	r3, r1
 8004c7c:	637b      	str	r3, [r7, #52]	; 0x34
 8004c7e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8004c82:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8004c86:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8004c8a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8004c8e:	1d5a      	adds	r2, r3, #5
 8004c90:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004c94:	4413      	add	r3, r2
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c9e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ca0:	f04f 0200 	mov.w	r2, #0
 8004ca4:	f04f 0300 	mov.w	r3, #0
 8004ca8:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8004caa:	0223      	lsls	r3, r4, #8
 8004cac:	2200      	movs	r2, #0
 8004cae:	ea40 0402 	orr.w	r4, r0, r2
 8004cb2:	623c      	str	r4, [r7, #32]
 8004cb4:	430b      	orrs	r3, r1
 8004cb6:	627b      	str	r3, [r7, #36]	; 0x24
 8004cb8:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8004cbc:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8004cc0:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8004cc4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8004cc8:	3306      	adds	r3, #6
 8004cca:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8004cce:	4413      	add	r3, r2
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	61bb      	str	r3, [r7, #24]
 8004cd8:	61fa      	str	r2, [r7, #28]
 8004cda:	f04f 0200 	mov.w	r2, #0
 8004cde:	f04f 0300 	mov.w	r3, #0
 8004ce2:	69bc      	ldr	r4, [r7, #24]
 8004ce4:	0423      	lsls	r3, r4, #16
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	ea40 0402 	orr.w	r4, r0, r2
 8004cec:	613c      	str	r4, [r7, #16]
 8004cee:	430b      	orrs	r3, r1
 8004cf0:	617b      	str	r3, [r7, #20]
 8004cf2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8004cf6:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8004cfa:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8004cfe:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8004d02:	3307      	adds	r3, #7
 8004d04:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8004d08:	4413      	add	r3, r2
 8004d0a:	781b      	ldrb	r3, [r3, #0]
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	2200      	movs	r2, #0
 8004d10:	60bb      	str	r3, [r7, #8]
 8004d12:	60fa      	str	r2, [r7, #12]
 8004d14:	f04f 0200 	mov.w	r2, #0
 8004d18:	f04f 0300 	mov.w	r3, #0
 8004d1c:	68bc      	ldr	r4, [r7, #8]
 8004d1e:	0623      	lsls	r3, r4, #24
 8004d20:	2200      	movs	r2, #0
 8004d22:	ea40 0402 	orr.w	r4, r0, r2
 8004d26:	603c      	str	r4, [r7, #0]
 8004d28:	430b      	orrs	r3, r1
 8004d2a:	607b      	str	r3, [r7, #4]
 8004d2c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004d30:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 8004d34:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8004d38:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 8004d3c:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 8004d40:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8004d44:	3308      	adds	r3, #8
 8004d46:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 8004d4a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 8004d54:	46bd      	mov	sp, r7
 8004d56:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8004d5a:	4770      	bx	lr

08004d5c <_ZN13geometry_msgs7Vector37getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Vector3"; };
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	4b03      	ldr	r3, [pc, #12]	; (8004d74 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 8004d66:	4618      	mov	r0, r3
 8004d68:	370c      	adds	r7, #12
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr
 8004d72:	bf00      	nop
 8004d74:	0800bfcc 	.word	0x0800bfcc

08004d78 <_ZN13geometry_msgs7Vector36getMD5Ev>:
    virtual const char * getMD5() override { return "4a842b65f413084dc2b10fb484ea7f17"; };
 8004d78:	b480      	push	{r7}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	4b03      	ldr	r3, [pc, #12]	; (8004d90 <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 8004d82:	4618      	mov	r0, r3
 8004d84:	370c      	adds	r7, #12
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr
 8004d8e:	bf00      	nop
 8004d90:	0800bee8 	.word	0x0800bee8

08004d94 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b082      	sub	sp, #8
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f7fc faba 	bl	8001318 <_ZN3ros3MsgC1Ev>
 8004da4:	4a08      	ldr	r2, [pc, #32]	; (8004dc8 <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	601a      	str	r2, [r3, #0]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	3308      	adds	r3, #8
 8004dae:	4618      	mov	r0, r3
 8004db0:	f7ff fada 	bl	8004368 <_ZN13geometry_msgs7Vector3C1Ev>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	3328      	adds	r3, #40	; 0x28
 8004db8:	4618      	mov	r0, r3
 8004dba:	f7ff fad5 	bl	8004368 <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3708      	adds	r7, #8
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}
 8004dc8:	0800c1a0 	.word	0x0800c1a0

08004dcc <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b084      	sub	sp, #16
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f103 0008 	add.w	r0, r3, #8
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	683a      	ldr	r2, [r7, #0]
 8004de4:	4413      	add	r3, r2
 8004de6:	4619      	mov	r1, r3
 8004de8:	f7ff fae6 	bl	80043b8 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8004dec:	4602      	mov	r2, r0
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	4413      	add	r3, r2
 8004df2:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	683a      	ldr	r2, [r7, #0]
 8004dfe:	4413      	add	r3, r2
 8004e00:	4619      	mov	r1, r3
 8004e02:	f7ff fad9 	bl	80043b8 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8004e06:	4602      	mov	r2, r0
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	4413      	add	r3, r2
 8004e0c:	60fb      	str	r3, [r7, #12]
      return offset;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
    }
 8004e10:	4618      	mov	r0, r3
 8004e12:	3710      	adds	r7, #16
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}

08004e18 <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004e22:	2300      	movs	r3, #0
 8004e24:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f103 0008 	add.w	r0, r3, #8
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	683a      	ldr	r2, [r7, #0]
 8004e30:	4413      	add	r3, r2
 8004e32:	4619      	mov	r1, r3
 8004e34:	f7ff fc33 	bl	800469e <_ZN13geometry_msgs7Vector311deserializeEPh>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	4413      	add	r3, r2
 8004e3e:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f103 0028 	add.w	r0, r3, #40	; 0x28
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	683a      	ldr	r2, [r7, #0]
 8004e4a:	4413      	add	r3, r2
 8004e4c:	4619      	mov	r1, r3
 8004e4e:	f7ff fc26 	bl	800469e <_ZN13geometry_msgs7Vector311deserializeEPh>
 8004e52:	4602      	mov	r2, r0
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	4413      	add	r3, r2
 8004e58:	60fb      	str	r3, [r7, #12]
     return offset;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
    }
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3710      	adds	r7, #16
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}

08004e64 <_ZN13geometry_msgs5Twist7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Twist"; };
 8004e64:	b480      	push	{r7}
 8004e66:	b083      	sub	sp, #12
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	4b03      	ldr	r3, [pc, #12]	; (8004e7c <_ZN13geometry_msgs5Twist7getTypeEv+0x18>)
 8004e6e:	4618      	mov	r0, r3
 8004e70:	370c      	adds	r7, #12
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr
 8004e7a:	bf00      	nop
 8004e7c:	0800bfe4 	.word	0x0800bfe4

08004e80 <_ZN13geometry_msgs5Twist6getMD5Ev>:
    virtual const char * getMD5() override { return "9f195f881246fdfa2798d1d3eebca84a"; };
 8004e80:	b480      	push	{r7}
 8004e82:	b083      	sub	sp, #12
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	4b03      	ldr	r3, [pc, #12]	; (8004e98 <_ZN13geometry_msgs5Twist6getMD5Ev+0x18>)
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	370c      	adds	r7, #12
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr
 8004e96:	bf00      	nop
 8004e98:	0800bff8 	.word	0x0800bff8

08004e9c <_ZN13geometry_msgs19TwistWithCovarianceC1Ev>:
    public:
      typedef geometry_msgs::Twist _twist_type;
      _twist_type twist;
      double covariance[36];

    TwistWithCovariance():
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b082      	sub	sp, #8
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
      twist(),
      covariance()
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f7fc fa36 	bl	8001318 <_ZN3ros3MsgC1Ev>
 8004eac:	4a0d      	ldr	r2, [pc, #52]	; (8004ee4 <_ZN13geometry_msgs19TwistWithCovarianceC1Ev+0x48>)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	601a      	str	r2, [r3, #0]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	3308      	adds	r3, #8
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f7ff ff6c 	bl	8004d94 <_ZN13geometry_msgs5TwistC1Ev>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8004ec2:	2323      	movs	r3, #35	; 0x23
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	db08      	blt.n	8004eda <_ZN13geometry_msgs19TwistWithCovarianceC1Ev+0x3e>
 8004ec8:	f04f 0000 	mov.w	r0, #0
 8004ecc:	f04f 0100 	mov.w	r1, #0
 8004ed0:	e9c2 0100 	strd	r0, r1, [r2]
 8004ed4:	3208      	adds	r2, #8
 8004ed6:	3b01      	subs	r3, #1
 8004ed8:	e7f4      	b.n	8004ec4 <_ZN13geometry_msgs19TwistWithCovarianceC1Ev+0x28>
    {
    }
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4618      	mov	r0, r3
 8004ede:	3708      	adds	r7, #8
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}
 8004ee4:	0800c188 	.word	0x0800c188

08004ee8 <_ZNK13geometry_msgs19TwistWithCovariance9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b086      	sub	sp, #24
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	617b      	str	r3, [r7, #20]
      offset += this->twist.serialize(outbuffer + offset);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	f103 0008 	add.w	r0, r3, #8
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	683a      	ldr	r2, [r7, #0]
 8004f00:	4413      	add	r3, r2
 8004f02:	4619      	mov	r1, r3
 8004f04:	f7ff ff62 	bl	8004dcc <_ZNK13geometry_msgs5Twist9serializeEPh>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	4413      	add	r3, r2
 8004f0e:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 36; i++){
 8004f10:	2300      	movs	r3, #0
 8004f12:	613b      	str	r3, [r7, #16]
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	2b23      	cmp	r3, #35	; 0x23
 8004f18:	d87e      	bhi.n	8005018 <_ZNK13geometry_msgs19TwistWithCovariance9serializeEPh+0x130>
      union {
        double real;
        uint64_t base;
      } u_covariancei;
      u_covariancei.real = this->covariance[i];
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	330a      	adds	r3, #10
 8004f20:	00db      	lsls	r3, r3, #3
 8004f22:	4413      	add	r3, r2
 8004f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f28:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_covariancei.base >> (8 * 0)) & 0xFF;
 8004f2c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f30:	6979      	ldr	r1, [r7, #20]
 8004f32:	6838      	ldr	r0, [r7, #0]
 8004f34:	4401      	add	r1, r0
 8004f36:	b2d3      	uxtb	r3, r2
 8004f38:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_covariancei.base >> (8 * 1)) & 0xFF;
 8004f3a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004f3e:	f04f 0200 	mov.w	r2, #0
 8004f42:	f04f 0300 	mov.w	r3, #0
 8004f46:	0a02      	lsrs	r2, r0, #8
 8004f48:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004f4c:	0a0b      	lsrs	r3, r1, #8
 8004f4e:	6979      	ldr	r1, [r7, #20]
 8004f50:	3101      	adds	r1, #1
 8004f52:	6838      	ldr	r0, [r7, #0]
 8004f54:	4401      	add	r1, r0
 8004f56:	b2d3      	uxtb	r3, r2
 8004f58:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_covariancei.base >> (8 * 2)) & 0xFF;
 8004f5a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004f5e:	f04f 0200 	mov.w	r2, #0
 8004f62:	f04f 0300 	mov.w	r3, #0
 8004f66:	0c02      	lsrs	r2, r0, #16
 8004f68:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004f6c:	0c0b      	lsrs	r3, r1, #16
 8004f6e:	6979      	ldr	r1, [r7, #20]
 8004f70:	3102      	adds	r1, #2
 8004f72:	6838      	ldr	r0, [r7, #0]
 8004f74:	4401      	add	r1, r0
 8004f76:	b2d3      	uxtb	r3, r2
 8004f78:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_covariancei.base >> (8 * 3)) & 0xFF;
 8004f7a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004f7e:	f04f 0200 	mov.w	r2, #0
 8004f82:	f04f 0300 	mov.w	r3, #0
 8004f86:	0e02      	lsrs	r2, r0, #24
 8004f88:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8004f8c:	0e0b      	lsrs	r3, r1, #24
 8004f8e:	6979      	ldr	r1, [r7, #20]
 8004f90:	3103      	adds	r1, #3
 8004f92:	6838      	ldr	r0, [r7, #0]
 8004f94:	4401      	add	r1, r0
 8004f96:	b2d3      	uxtb	r3, r2
 8004f98:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_covariancei.base >> (8 * 4)) & 0xFF;
 8004f9a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004f9e:	f04f 0200 	mov.w	r2, #0
 8004fa2:	f04f 0300 	mov.w	r3, #0
 8004fa6:	000a      	movs	r2, r1
 8004fa8:	2300      	movs	r3, #0
 8004faa:	6979      	ldr	r1, [r7, #20]
 8004fac:	3104      	adds	r1, #4
 8004fae:	6838      	ldr	r0, [r7, #0]
 8004fb0:	4401      	add	r1, r0
 8004fb2:	b2d3      	uxtb	r3, r2
 8004fb4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_covariancei.base >> (8 * 5)) & 0xFF;
 8004fb6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004fba:	f04f 0200 	mov.w	r2, #0
 8004fbe:	f04f 0300 	mov.w	r3, #0
 8004fc2:	0a0a      	lsrs	r2, r1, #8
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	6979      	ldr	r1, [r7, #20]
 8004fc8:	3105      	adds	r1, #5
 8004fca:	6838      	ldr	r0, [r7, #0]
 8004fcc:	4401      	add	r1, r0
 8004fce:	b2d3      	uxtb	r3, r2
 8004fd0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_covariancei.base >> (8 * 6)) & 0xFF;
 8004fd2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004fd6:	f04f 0200 	mov.w	r2, #0
 8004fda:	f04f 0300 	mov.w	r3, #0
 8004fde:	0c0a      	lsrs	r2, r1, #16
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	6979      	ldr	r1, [r7, #20]
 8004fe4:	3106      	adds	r1, #6
 8004fe6:	6838      	ldr	r0, [r7, #0]
 8004fe8:	4401      	add	r1, r0
 8004fea:	b2d3      	uxtb	r3, r2
 8004fec:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_covariancei.base >> (8 * 7)) & 0xFF;
 8004fee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004ff2:	f04f 0200 	mov.w	r2, #0
 8004ff6:	f04f 0300 	mov.w	r3, #0
 8004ffa:	0e0a      	lsrs	r2, r1, #24
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	6979      	ldr	r1, [r7, #20]
 8005000:	3107      	adds	r1, #7
 8005002:	6838      	ldr	r0, [r7, #0]
 8005004:	4401      	add	r1, r0
 8005006:	b2d3      	uxtb	r3, r2
 8005008:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->covariance[i]);
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	3308      	adds	r3, #8
 800500e:	617b      	str	r3, [r7, #20]
      for( uint32_t i = 0; i < 36; i++){
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	3301      	adds	r3, #1
 8005014:	613b      	str	r3, [r7, #16]
 8005016:	e77d      	b.n	8004f14 <_ZNK13geometry_msgs19TwistWithCovariance9serializeEPh+0x2c>
      }
      return offset;
 8005018:	697b      	ldr	r3, [r7, #20]
    }
 800501a:	4618      	mov	r0, r3
 800501c:	3718      	adds	r7, #24
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}

08005022 <_ZN13geometry_msgs19TwistWithCovariance11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8005022:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005026:	b0a3      	sub	sp, #140	; 0x8c
 8005028:	af00      	add	r7, sp, #0
 800502a:	6778      	str	r0, [r7, #116]	; 0x74
 800502c:	6739      	str	r1, [r7, #112]	; 0x70
    {
      int offset = 0;
 800502e:	2300      	movs	r3, #0
 8005030:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      offset += this->twist.deserialize(inbuffer + offset);
 8005034:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005036:	f103 0008 	add.w	r0, r3, #8
 800503a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800503e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005040:	4413      	add	r3, r2
 8005042:	4619      	mov	r1, r3
 8005044:	f7ff fee8 	bl	8004e18 <_ZN13geometry_msgs5Twist11deserializeEPh>
 8005048:	4602      	mov	r2, r0
 800504a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800504e:	4413      	add	r3, r2
 8005050:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      for( uint32_t i = 0; i < 36; i++){
 8005054:	2300      	movs	r3, #0
 8005056:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800505a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800505e:	2b23      	cmp	r3, #35	; 0x23
 8005060:	f200 80f8 	bhi.w	8005254 <_ZN13geometry_msgs19TwistWithCovariance11deserializeEPh+0x232>
      union {
        double real;
        uint64_t base;
      } u_covariancei;
      u_covariancei.base = 0;
 8005064:	f04f 0200 	mov.w	r2, #0
 8005068:	f04f 0300 	mov.w	r3, #0
 800506c:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8005070:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8005074:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005078:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800507a:	4413      	add	r3, r2
 800507c:	781b      	ldrb	r3, [r3, #0]
 800507e:	b2db      	uxtb	r3, r3
 8005080:	2200      	movs	r2, #0
 8005082:	66bb      	str	r3, [r7, #104]	; 0x68
 8005084:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005086:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005088:	4303      	orrs	r3, r0
 800508a:	65bb      	str	r3, [r7, #88]	; 0x58
 800508c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800508e:	430b      	orrs	r3, r1
 8005090:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005092:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005096:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800509a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800509e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80050a2:	1c5a      	adds	r2, r3, #1
 80050a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80050a6:	4413      	add	r3, r2
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	2200      	movs	r2, #0
 80050ae:	469a      	mov	sl, r3
 80050b0:	4693      	mov	fp, r2
 80050b2:	f04f 0200 	mov.w	r2, #0
 80050b6:	f04f 0300 	mov.w	r3, #0
 80050ba:	ea4f 230b 	mov.w	r3, fp, lsl #8
 80050be:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 80050c2:	ea4f 220a 	mov.w	r2, sl, lsl #8
 80050c6:	ea40 0602 	orr.w	r6, r0, r2
 80050ca:	653e      	str	r6, [r7, #80]	; 0x50
 80050cc:	430b      	orrs	r3, r1
 80050ce:	657b      	str	r3, [r7, #84]	; 0x54
 80050d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80050d4:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80050d8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80050dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80050e0:	1c9a      	adds	r2, r3, #2
 80050e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80050e4:	4413      	add	r3, r2
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	2200      	movs	r2, #0
 80050ec:	4698      	mov	r8, r3
 80050ee:	4691      	mov	r9, r2
 80050f0:	f04f 0200 	mov.w	r2, #0
 80050f4:	f04f 0300 	mov.w	r3, #0
 80050f8:	ea4f 4309 	mov.w	r3, r9, lsl #16
 80050fc:	ea43 4318 	orr.w	r3, r3, r8, lsr #16
 8005100:	ea4f 4208 	mov.w	r2, r8, lsl #16
 8005104:	ea40 0602 	orr.w	r6, r0, r2
 8005108:	64be      	str	r6, [r7, #72]	; 0x48
 800510a:	430b      	orrs	r3, r1
 800510c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800510e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005112:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8005116:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800511a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800511e:	1cda      	adds	r2, r3, #3
 8005120:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005122:	4413      	add	r3, r2
 8005124:	781b      	ldrb	r3, [r3, #0]
 8005126:	b2db      	uxtb	r3, r3
 8005128:	2200      	movs	r2, #0
 800512a:	663b      	str	r3, [r7, #96]	; 0x60
 800512c:	667a      	str	r2, [r7, #100]	; 0x64
 800512e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005130:	0a1d      	lsrs	r5, r3, #8
 8005132:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005134:	061c      	lsls	r4, r3, #24
 8005136:	ea40 0304 	orr.w	r3, r0, r4
 800513a:	643b      	str	r3, [r7, #64]	; 0x40
 800513c:	ea41 0305 	orr.w	r3, r1, r5
 8005140:	647b      	str	r3, [r7, #68]	; 0x44
 8005142:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005146:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800514a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800514e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005152:	1d1a      	adds	r2, r3, #4
 8005154:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005156:	4413      	add	r3, r2
 8005158:	781b      	ldrb	r3, [r3, #0]
 800515a:	b2db      	uxtb	r3, r3
 800515c:	2200      	movs	r2, #0
 800515e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005160:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005162:	f04f 0200 	mov.w	r2, #0
 8005166:	f04f 0300 	mov.w	r3, #0
 800516a:	6bbe      	ldr	r6, [r7, #56]	; 0x38
 800516c:	0033      	movs	r3, r6
 800516e:	2200      	movs	r2, #0
 8005170:	ea40 0602 	orr.w	r6, r0, r2
 8005174:	633e      	str	r6, [r7, #48]	; 0x30
 8005176:	430b      	orrs	r3, r1
 8005178:	637b      	str	r3, [r7, #52]	; 0x34
 800517a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800517e:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8005182:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 8005186:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800518a:	1d5a      	adds	r2, r3, #5
 800518c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800518e:	4413      	add	r3, r2
 8005190:	781b      	ldrb	r3, [r3, #0]
 8005192:	b2db      	uxtb	r3, r3
 8005194:	2200      	movs	r2, #0
 8005196:	62bb      	str	r3, [r7, #40]	; 0x28
 8005198:	62fa      	str	r2, [r7, #44]	; 0x2c
 800519a:	f04f 0200 	mov.w	r2, #0
 800519e:	f04f 0300 	mov.w	r3, #0
 80051a2:	6abe      	ldr	r6, [r7, #40]	; 0x28
 80051a4:	0233      	lsls	r3, r6, #8
 80051a6:	2200      	movs	r2, #0
 80051a8:	ea40 0602 	orr.w	r6, r0, r2
 80051ac:	623e      	str	r6, [r7, #32]
 80051ae:	430b      	orrs	r3, r1
 80051b0:	627b      	str	r3, [r7, #36]	; 0x24
 80051b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80051b6:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80051ba:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80051be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80051c2:	1d9a      	adds	r2, r3, #6
 80051c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80051c6:	4413      	add	r3, r2
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	b2db      	uxtb	r3, r3
 80051cc:	2200      	movs	r2, #0
 80051ce:	61bb      	str	r3, [r7, #24]
 80051d0:	61fa      	str	r2, [r7, #28]
 80051d2:	f04f 0200 	mov.w	r2, #0
 80051d6:	f04f 0300 	mov.w	r3, #0
 80051da:	69be      	ldr	r6, [r7, #24]
 80051dc:	0433      	lsls	r3, r6, #16
 80051de:	2200      	movs	r2, #0
 80051e0:	ea40 0602 	orr.w	r6, r0, r2
 80051e4:	613e      	str	r6, [r7, #16]
 80051e6:	430b      	orrs	r3, r1
 80051e8:	617b      	str	r3, [r7, #20]
 80051ea:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80051ee:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
      u_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80051f2:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80051f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80051fa:	1dda      	adds	r2, r3, #7
 80051fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80051fe:	4413      	add	r3, r2
 8005200:	781b      	ldrb	r3, [r3, #0]
 8005202:	b2db      	uxtb	r3, r3
 8005204:	2200      	movs	r2, #0
 8005206:	60bb      	str	r3, [r7, #8]
 8005208:	60fa      	str	r2, [r7, #12]
 800520a:	f04f 0200 	mov.w	r2, #0
 800520e:	f04f 0300 	mov.w	r3, #0
 8005212:	68be      	ldr	r6, [r7, #8]
 8005214:	0633      	lsls	r3, r6, #24
 8005216:	2200      	movs	r2, #0
 8005218:	ea40 0602 	orr.w	r6, r0, r2
 800521c:	603e      	str	r6, [r7, #0]
 800521e:	430b      	orrs	r3, r1
 8005220:	607b      	str	r3, [r7, #4]
 8005222:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005226:	e9c7 231e 	strd	r2, r3, [r7, #120]	; 0x78
      this->covariance[i] = u_covariancei.real;
 800522a:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 800522e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005230:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005234:	330a      	adds	r3, #10
 8005236:	00db      	lsls	r3, r3, #3
 8005238:	4413      	add	r3, r2
 800523a:	e9c3 0100 	strd	r0, r1, [r3]
      offset += sizeof(this->covariance[i]);
 800523e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005242:	3308      	adds	r3, #8
 8005244:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      for( uint32_t i = 0; i < 36; i++){
 8005248:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800524c:	3301      	adds	r3, #1
 800524e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005252:	e702      	b.n	800505a <_ZN13geometry_msgs19TwistWithCovariance11deserializeEPh+0x38>
      }
     return offset;
 8005254:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    }
 8005258:	4618      	mov	r0, r3
 800525a:	378c      	adds	r7, #140	; 0x8c
 800525c:	46bd      	mov	sp, r7
 800525e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08005264 <_ZN13geometry_msgs19TwistWithCovariance7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/TwistWithCovariance"; };
 8005264:	b480      	push	{r7}
 8005266:	b083      	sub	sp, #12
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	4b03      	ldr	r3, [pc, #12]	; (800527c <_ZN13geometry_msgs19TwistWithCovariance7getTypeEv+0x18>)
 800526e:	4618      	mov	r0, r3
 8005270:	370c      	adds	r7, #12
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr
 800527a:	bf00      	nop
 800527c:	0800c01c 	.word	0x0800c01c

08005280 <_ZN13geometry_msgs19TwistWithCovariance6getMD5Ev>:
    virtual const char * getMD5() override { return "1fe8a28e6890a4cc3ae4c3ca5c7d82e6"; };
 8005280:	b480      	push	{r7}
 8005282:	b083      	sub	sp, #12
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
 8005288:	4b03      	ldr	r3, [pc, #12]	; (8005298 <_ZN13geometry_msgs19TwistWithCovariance6getMD5Ev+0x18>)
 800528a:	4618      	mov	r0, r3
 800528c:	370c      	adds	r7, #12
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr
 8005296:	bf00      	nop
 8005298:	0800c040 	.word	0x0800c040

0800529c <_ZN8nav_msgs8OdometryC1Ev>:
      typedef geometry_msgs::PoseWithCovariance _pose_type;
      _pose_type pose;
      typedef geometry_msgs::TwistWithCovariance _twist_type;
      _twist_type twist;

    Odometry():
 800529c:	b580      	push	{r7, lr}
 800529e:	b082      	sub	sp, #8
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
      header(),
      child_frame_id(""),
      pose(),
      twist()
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4618      	mov	r0, r3
 80052a8:	f7fc f836 	bl	8001318 <_ZN3ros3MsgC1Ev>
 80052ac:	4a0d      	ldr	r2, [pc, #52]	; (80052e4 <_ZN8nav_msgs8OdometryC1Ev+0x48>)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	601a      	str	r2, [r3, #0]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	3304      	adds	r3, #4
 80052b6:	4618      	mov	r0, r3
 80052b8:	f7fd f86a 	bl	8002390 <_ZN8std_msgs6HeaderC1Ev>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	4a0a      	ldr	r2, [pc, #40]	; (80052e8 <_ZN8nav_msgs8OdometryC1Ev+0x4c>)
 80052c0:	619a      	str	r2, [r3, #24]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	3320      	adds	r3, #32
 80052c6:	4618      	mov	r0, r3
 80052c8:	f7fe fe4e 	bl	8003f68 <_ZN13geometry_msgs18PoseWithCovarianceC1Ev>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 80052d2:	4618      	mov	r0, r3
 80052d4:	f7ff fde2 	bl	8004e9c <_ZN13geometry_msgs19TwistWithCovarianceC1Ev>
    {
    }
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	4618      	mov	r0, r3
 80052dc:	3708      	adds	r7, #8
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
 80052e2:	bf00      	nop
 80052e4:	0800c170 	.word	0x0800c170
 80052e8:	0800bdcc 	.word	0x0800bdcc

080052ec <_ZNK8nav_msgs8Odometry9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b084      	sub	sp, #16
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80052f6:	2300      	movs	r3, #0
 80052f8:	60fb      	str	r3, [r7, #12]
      offset += this->header.serialize(outbuffer + offset);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	1d18      	adds	r0, r3, #4
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	683a      	ldr	r2, [r7, #0]
 8005302:	4413      	add	r3, r2
 8005304:	4619      	mov	r1, r3
 8005306:	f7fd f863 	bl	80023d0 <_ZNK8std_msgs6Header9serializeEPh>
 800530a:	4602      	mov	r2, r0
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	4413      	add	r3, r2
 8005310:	60fb      	str	r3, [r7, #12]
      uint32_t length_child_frame_id = strlen(this->child_frame_id);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	699b      	ldr	r3, [r3, #24]
 8005316:	4618      	mov	r0, r3
 8005318:	f7fa ff56 	bl	80001c8 <strlen>
 800531c:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_child_frame_id);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	683a      	ldr	r2, [r7, #0]
 8005322:	4413      	add	r3, r2
 8005324:	68b9      	ldr	r1, [r7, #8]
 8005326:	4618      	mov	r0, r3
 8005328:	f000 fa30 	bl	800578c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	3304      	adds	r3, #4
 8005330:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->child_frame_id, length_child_frame_id);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	683a      	ldr	r2, [r7, #0]
 8005336:	18d0      	adds	r0, r2, r3
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	699b      	ldr	r3, [r3, #24]
 800533c:	68ba      	ldr	r2, [r7, #8]
 800533e:	4619      	mov	r1, r3
 8005340:	f006 fb86 	bl	800ba50 <memcpy>
      offset += length_child_frame_id;
 8005344:	68fa      	ldr	r2, [r7, #12]
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	4413      	add	r3, r2
 800534a:	60fb      	str	r3, [r7, #12]
      offset += this->pose.serialize(outbuffer + offset);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f103 0020 	add.w	r0, r3, #32
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	683a      	ldr	r2, [r7, #0]
 8005356:	4413      	add	r3, r2
 8005358:	4619      	mov	r1, r3
 800535a:	f7fe fe2b 	bl	8003fb4 <_ZNK13geometry_msgs18PoseWithCovariance9serializeEPh>
 800535e:	4602      	mov	r2, r0
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	4413      	add	r3, r2
 8005364:	60fb      	str	r3, [r7, #12]
      offset += this->twist.serialize(outbuffer + offset);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f503 70cc 	add.w	r0, r3, #408	; 0x198
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	683a      	ldr	r2, [r7, #0]
 8005370:	4413      	add	r3, r2
 8005372:	4619      	mov	r1, r3
 8005374:	f7ff fdb8 	bl	8004ee8 <_ZNK13geometry_msgs19TwistWithCovariance9serializeEPh>
 8005378:	4602      	mov	r2, r0
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	4413      	add	r3, r2
 800537e:	60fb      	str	r3, [r7, #12]
      return offset;
 8005380:	68fb      	ldr	r3, [r7, #12]
    }
 8005382:	4618      	mov	r0, r3
 8005384:	3710      	adds	r7, #16
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}

0800538a <_ZN8nav_msgs8Odometry11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800538a:	b580      	push	{r7, lr}
 800538c:	b086      	sub	sp, #24
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]
 8005392:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8005394:	2300      	movs	r3, #0
 8005396:	613b      	str	r3, [r7, #16]
      offset += this->header.deserialize(inbuffer + offset);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	1d18      	adds	r0, r3, #4
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	683a      	ldr	r2, [r7, #0]
 80053a0:	4413      	add	r3, r2
 80053a2:	4619      	mov	r1, r3
 80053a4:	f7fd f8ac 	bl	8002500 <_ZN8std_msgs6Header11deserializeEPh>
 80053a8:	4602      	mov	r2, r0
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	4413      	add	r3, r2
 80053ae:	613b      	str	r3, [r7, #16]
      uint32_t length_child_frame_id;
      arrToVar(length_child_frame_id, (inbuffer + offset));
 80053b0:	693b      	ldr	r3, [r7, #16]
 80053b2:	683a      	ldr	r2, [r7, #0]
 80053b4:	441a      	add	r2, r3
 80053b6:	f107 030c 	add.w	r3, r7, #12
 80053ba:	4611      	mov	r1, r2
 80053bc:	4618      	mov	r0, r3
 80053be:	f000 fa03 	bl	80057c8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	3304      	adds	r3, #4
 80053c6:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_child_frame_id; ++k){
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	617b      	str	r3, [r7, #20]
 80053cc:	693a      	ldr	r2, [r7, #16]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	4413      	add	r3, r2
 80053d2:	697a      	ldr	r2, [r7, #20]
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d20c      	bcs.n	80053f2 <_ZN8nav_msgs8Odometry11deserializeEPh+0x68>
          inbuffer[k-1]=inbuffer[k];
 80053d8:	683a      	ldr	r2, [r7, #0]
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	441a      	add	r2, r3
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	3b01      	subs	r3, #1
 80053e2:	6839      	ldr	r1, [r7, #0]
 80053e4:	440b      	add	r3, r1
 80053e6:	7812      	ldrb	r2, [r2, #0]
 80053e8:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_child_frame_id; ++k){
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	3301      	adds	r3, #1
 80053ee:	617b      	str	r3, [r7, #20]
 80053f0:	e7ec      	b.n	80053cc <_ZN8nav_msgs8Odometry11deserializeEPh+0x42>
      }
      inbuffer[offset+length_child_frame_id-1]=0;
 80053f2:	693a      	ldr	r2, [r7, #16]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	4413      	add	r3, r2
 80053f8:	3b01      	subs	r3, #1
 80053fa:	683a      	ldr	r2, [r7, #0]
 80053fc:	4413      	add	r3, r2
 80053fe:	2200      	movs	r2, #0
 8005400:	701a      	strb	r2, [r3, #0]
      this->child_frame_id = (char *)(inbuffer + offset-1);
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	3b01      	subs	r3, #1
 8005406:	683a      	ldr	r2, [r7, #0]
 8005408:	441a      	add	r2, r3
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	619a      	str	r2, [r3, #24]
      offset += length_child_frame_id;
 800540e:	693a      	ldr	r2, [r7, #16]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	4413      	add	r3, r2
 8005414:	613b      	str	r3, [r7, #16]
      offset += this->pose.deserialize(inbuffer + offset);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f103 0020 	add.w	r0, r3, #32
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	683a      	ldr	r2, [r7, #0]
 8005420:	4413      	add	r3, r2
 8005422:	4619      	mov	r1, r3
 8005424:	f7fe fe63 	bl	80040ee <_ZN13geometry_msgs18PoseWithCovariance11deserializeEPh>
 8005428:	4602      	mov	r2, r0
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	4413      	add	r3, r2
 800542e:	613b      	str	r3, [r7, #16]
      offset += this->twist.deserialize(inbuffer + offset);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f503 70cc 	add.w	r0, r3, #408	; 0x198
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	683a      	ldr	r2, [r7, #0]
 800543a:	4413      	add	r3, r2
 800543c:	4619      	mov	r1, r3
 800543e:	f7ff fdf0 	bl	8005022 <_ZN13geometry_msgs19TwistWithCovariance11deserializeEPh>
 8005442:	4602      	mov	r2, r0
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	4413      	add	r3, r2
 8005448:	613b      	str	r3, [r7, #16]
     return offset;
 800544a:	693b      	ldr	r3, [r7, #16]
    }
 800544c:	4618      	mov	r0, r3
 800544e:	3718      	adds	r7, #24
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}

08005454 <_ZN8nav_msgs8Odometry7getTypeEv>:

    virtual const char * getType() override { return "nav_msgs/Odometry"; };
 8005454:	b480      	push	{r7}
 8005456:	b083      	sub	sp, #12
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	4b03      	ldr	r3, [pc, #12]	; (800546c <_ZN8nav_msgs8Odometry7getTypeEv+0x18>)
 800545e:	4618      	mov	r0, r3
 8005460:	370c      	adds	r7, #12
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr
 800546a:	bf00      	nop
 800546c:	0800c064 	.word	0x0800c064

08005470 <_ZN8nav_msgs8Odometry6getMD5Ev>:
    virtual const char * getMD5() override { return "cd5e73d190d741a2f92e81eda573aca7"; };
 8005470:	b480      	push	{r7}
 8005472:	b083      	sub	sp, #12
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	4b03      	ldr	r3, [pc, #12]	; (8005488 <_ZN8nav_msgs8Odometry6getMD5Ev+0x18>)
 800547a:	4618      	mov	r0, r3
 800547c:	370c      	adds	r7, #12
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr
 8005486:	bf00      	nop
 8005488:	0800c078 	.word	0x0800c078

0800548c <_ZN7MessageC1Ev>:

Encoder Encoder1, Encoder2;

struct Odom theOdom;

struct Message{
 800548c:	b580      	push	{r7, lr}
 800548e:	b082      	sub	sp, #8
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	4618      	mov	r0, r3
 8005498:	f7fc fede 	bl	8002258 <_ZN8std_msgs5Int32C1Ev>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	3308      	adds	r3, #8
 80054a0:	4618      	mov	r0, r3
 80054a2:	f7fc fed9 	bl	8002258 <_ZN8std_msgs5Int32C1Ev>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4618      	mov	r0, r3
 80054aa:	3708      	adds	r7, #8
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}

080054b0 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 80054b0:	b480      	push	{r7}
 80054b2:	b083      	sub	sp, #12
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	4a04      	ldr	r2, [pc, #16]	; (80054cc <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	601a      	str	r2, [r3, #0]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4618      	mov	r0, r3
 80054c2:	370c      	adds	r7, #12
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr
 80054cc:	0800c260 	.word	0x0800c260

080054d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 5,
         int MAX_PUBLISHERS = 5,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 8192>
class NodeHandle_ : public NodeHandleBase_
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b082      	sub	sp, #8
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	4618      	mov	r0, r3
 80054dc:	f7ff ffe8 	bl	80054b0 <_ZN3ros15NodeHandleBase_C1Ev>
 80054e0:	4a47      	ldr	r2, [pc, #284]	; (8005600 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EEC1Ev+0x130>)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	601a      	str	r2, [r3, #0]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	3304      	adds	r3, #4
 80054ea:	4618      	mov	r0, r3
 80054ec:	f7fc fd9e 	bl	800202c <_ZN13STM32HardwareC1Ev>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	f8c3 2620 	str.w	r2, [r3, #1568]	; 0x620
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8005516:	f44f 7200 	mov.w	r2, #512	; 0x200
 800551a:	2100      	movs	r1, #0
 800551c:	4618      	mov	r0, r3
 800551e:	f006 faa5 	bl	800ba6c <memset>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f603 0324 	addw	r3, r3, #2084	; 0x824
 8005528:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800552c:	2100      	movs	r1, #0
 800552e:	4618      	mov	r0, r3
 8005530:	f006 fa9c 	bl	800ba6c <memset>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800553a:	f603 0324 	addw	r3, r3, #2084	; 0x824
 800553e:	2200      	movs	r2, #0
 8005540:	601a      	str	r2, [r3, #0]
 8005542:	605a      	str	r2, [r3, #4]
 8005544:	609a      	str	r2, [r3, #8]
 8005546:	60da      	str	r2, [r3, #12]
 8005548:	611a      	str	r2, [r3, #16]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005550:	f603 0338 	addw	r3, r3, #2104	; 0x838
 8005554:	2200      	movs	r2, #0
 8005556:	601a      	str	r2, [r3, #0]
 8005558:	605a      	str	r2, [r3, #4]
 800555a:	609a      	str	r2, [r3, #8]
 800555c:	60da      	str	r2, [r3, #12]
 800555e:	611a      	str	r2, [r3, #16]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005566:	461a      	mov	r2, r3
 8005568:	2300      	movs	r3, #0
 800556a:	f8c2 384c 	str.w	r3, [r2, #2124]	; 0x84c
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005574:	461a      	mov	r2, r3
 8005576:	2300      	movs	r3, #0
 8005578:	f8c2 3850 	str.w	r3, [r2, #2128]	; 0x850
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005582:	461a      	mov	r2, r3
 8005584:	2300      	movs	r3, #0
 8005586:	f8c2 3854 	str.w	r3, [r2, #2132]	; 0x854
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005590:	461a      	mov	r2, r3
 8005592:	2300      	movs	r3, #0
 8005594:	f8c2 3858 	str.w	r3, [r2, #2136]	; 0x858
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800559e:	461a      	mov	r2, r3
 80055a0:	2300      	movs	r3, #0
 80055a2:	f8c2 385c 	str.w	r3, [r2, #2140]	; 0x85c
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80055ac:	2200      	movs	r2, #0
 80055ae:	f883 2860 	strb.w	r2, [r3, #2144]	; 0x860
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80055b8:	461a      	mov	r2, r3
 80055ba:	2300      	movs	r3, #0
 80055bc:	f8c2 3864 	str.w	r3, [r2, #2148]	; 0x864
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80055c6:	461a      	mov	r2, r3
 80055c8:	2300      	movs	r3, #0
 80055ca:	f8c2 3868 	str.w	r3, [r2, #2152]	; 0x868
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80055d4:	461a      	mov	r2, r3
 80055d6:	2300      	movs	r3, #0
 80055d8:	f8c2 386c 	str.w	r3, [r2, #2156]	; 0x86c
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80055e2:	2200      	movs	r2, #0
 80055e4:	f883 2870 	strb.w	r2, [r3, #2160]	; 0x870
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f503 5321 	add.w	r3, r3, #10304	; 0x2840
 80055ee:	3334      	adds	r3, #52	; 0x34
 80055f0:	4618      	mov	r0, r3
 80055f2:	f7fc fa05 	bl	8001a00 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4618      	mov	r0, r3
 80055fa:	3708      	adds	r7, #8
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}
 8005600:	0800c15c 	.word	0x0800c15c

08005604 <Odom_Publish>:
		Enc2_Msg.int32_msg_pos.data = enc->position;
		enkoder2_pub.publish(&Enc2_Msg.int32_msg_pos);
	}
}

void Odom_Publish(struct Odom *od){
 8005604:	b580      	push	{r7, lr}
 8005606:	b082      	sub	sp, #8
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
	//ros::Time begin = ros::Time::now();
	//odom_msg.header.stamp = begin;
	odom_msg.header.frame_id = "encoder_odom";
 800560c:	4b2f      	ldr	r3, [pc, #188]	; (80056cc <Odom_Publish+0xc8>)
 800560e:	4a30      	ldr	r2, [pc, #192]	; (80056d0 <Odom_Publish+0xcc>)
 8005610:	615a      	str	r2, [r3, #20]
	odom_msg.child_frame_id = "base_link";
 8005612:	4b2e      	ldr	r3, [pc, #184]	; (80056cc <Odom_Publish+0xc8>)
 8005614:	4a2f      	ldr	r2, [pc, #188]	; (80056d4 <Odom_Publish+0xd0>)
 8005616:	619a      	str	r2, [r3, #24]
	odom_msg.pose.pose.position.x = od->x;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4618      	mov	r0, r3
 800561e:	f7fa ff3f 	bl	80004a0 <__aeabi_f2d>
 8005622:	4602      	mov	r2, r0
 8005624:	460b      	mov	r3, r1
 8005626:	4929      	ldr	r1, [pc, #164]	; (80056cc <Odom_Publish+0xc8>)
 8005628:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	odom_msg.pose.pose.position.y = od->y;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	4618      	mov	r0, r3
 8005632:	f7fa ff35 	bl	80004a0 <__aeabi_f2d>
 8005636:	4602      	mov	r2, r0
 8005638:	460b      	mov	r3, r1
 800563a:	4924      	ldr	r1, [pc, #144]	; (80056cc <Odom_Publish+0xc8>)
 800563c:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
	odom_msg.pose.pose.orientation.z = sin(od->theta / 2);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	edd3 7a02 	vldr	s15, [r3, #8]
 8005646:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800564a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800564e:	eeb0 0a47 	vmov.f32	s0, s14
 8005652:	f7fb fe40 	bl	80012d6 <_ZSt3sinf>
 8005656:	ee10 3a10 	vmov	r3, s0
 800565a:	4618      	mov	r0, r3
 800565c:	f7fa ff20 	bl	80004a0 <__aeabi_f2d>
 8005660:	4602      	mov	r2, r0
 8005662:	460b      	mov	r3, r1
 8005664:	4919      	ldr	r1, [pc, #100]	; (80056cc <Odom_Publish+0xc8>)
 8005666:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	odom_msg.pose.pose.orientation.w = cos(od->theta / 2);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	edd3 7a02 	vldr	s15, [r3, #8]
 8005670:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8005674:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005678:	eeb0 0a47 	vmov.f32	s0, s14
 800567c:	f7fb fe1b 	bl	80012b6 <_ZSt3cosf>
 8005680:	ee10 3a10 	vmov	r3, s0
 8005684:	4618      	mov	r0, r3
 8005686:	f7fa ff0b 	bl	80004a0 <__aeabi_f2d>
 800568a:	4602      	mov	r2, r0
 800568c:	460b      	mov	r3, r1
 800568e:	490f      	ldr	r1, [pc, #60]	; (80056cc <Odom_Publish+0xc8>)
 8005690:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
	odom_msg.twist.twist.linear.x = od->linear_velocity;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	4618      	mov	r0, r3
 800569a:	f7fa ff01 	bl	80004a0 <__aeabi_f2d>
 800569e:	4602      	mov	r2, r0
 80056a0:	460b      	mov	r3, r1
 80056a2:	490a      	ldr	r1, [pc, #40]	; (80056cc <Odom_Publish+0xc8>)
 80056a4:	e9c1 236c 	strd	r2, r3, [r1, #432]	; 0x1b0
	odom_msg.twist.twist.angular.z = od->angular_velocity;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	691b      	ldr	r3, [r3, #16]
 80056ac:	4618      	mov	r0, r3
 80056ae:	f7fa fef7 	bl	80004a0 <__aeabi_f2d>
 80056b2:	4602      	mov	r2, r0
 80056b4:	460b      	mov	r3, r1
 80056b6:	4905      	ldr	r1, [pc, #20]	; (80056cc <Odom_Publish+0xc8>)
 80056b8:	e9c1 2378 	strd	r2, r3, [r1, #480]	; 0x1e0
	odom_pub.publish(&odom_msg);
 80056bc:	4903      	ldr	r1, [pc, #12]	; (80056cc <Odom_Publish+0xc8>)
 80056be:	4806      	ldr	r0, [pc, #24]	; (80056d8 <Odom_Publish+0xd4>)
 80056c0:	f7fc fc81 	bl	8001fc6 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
}
 80056c4:	bf00      	nop
 80056c6:	3708      	adds	r7, #8
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}
 80056cc:	20000230 	.word	0x20000230
 80056d0:	0800c09c 	.word	0x0800c09c
 80056d4:	0800c0ac 	.word	0x0800c0ac
 80056d8:	20002e78 	.word	0x20002e78

080056dc <HAL_UART_TxCpltCallback>:




void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80056dc:	b580      	push	{r7, lr}
 80056de:	b082      	sub	sp, #8
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  nh.getHardware()->flush();
 80056e4:	4805      	ldr	r0, [pc, #20]	; (80056fc <HAL_UART_TxCpltCallback+0x20>)
 80056e6:	f000 f894 	bl	8005812 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE11getHardwareEv>
 80056ea:	4603      	mov	r3, r0
 80056ec:	4618      	mov	r0, r3
 80056ee:	f7fc fd03 	bl	80020f8 <_ZN13STM32Hardware5flushEv>
}
 80056f2:	bf00      	nop
 80056f4:	3708      	adds	r7, #8
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	bf00      	nop
 80056fc:	2000058c 	.word	0x2000058c

08005700 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8005700:	b580      	push	{r7, lr}
 8005702:	b082      	sub	sp, #8
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  nh.getHardware()->reset_rbuf();
 8005708:	4805      	ldr	r0, [pc, #20]	; (8005720 <HAL_UART_RxCpltCallback+0x20>)
 800570a:	f000 f882 	bl	8005812 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE11getHardwareEv>
 800570e:	4603      	mov	r3, r0
 8005710:	4618      	mov	r0, r3
 8005712:	f7fc fcb2 	bl	800207a <_ZN13STM32Hardware10reset_rbufEv>
}
 8005716:	bf00      	nop
 8005718:	3708      	adds	r7, #8
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}
 800571e:	bf00      	nop
 8005720:	2000058c 	.word	0x2000058c

08005724 <setup>:

void setup(void)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	af00      	add	r7, sp, #0
  nh.initNode();
 8005728:	480c      	ldr	r0, [pc, #48]	; (800575c <setup+0x38>)
 800572a:	f000 f87e 	bl	800582a <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE8initNodeEv>
    nh.advertise(enkoder1_pub);
 800572e:	490c      	ldr	r1, [pc, #48]	; (8005760 <setup+0x3c>)
 8005730:	480a      	ldr	r0, [pc, #40]	; (800575c <setup+0x38>)
 8005732:	f000 f8a3 	bl	800587c <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE9advertiseERNS_9PublisherE>
  nh.advertise(enkoder2_pub);
 8005736:	490b      	ldr	r1, [pc, #44]	; (8005764 <setup+0x40>)
 8005738:	4808      	ldr	r0, [pc, #32]	; (800575c <setup+0x38>)
 800573a:	f000 f89f 	bl	800587c <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE9advertiseERNS_9PublisherE>
  nh.advertise(enkoder1_vel_pub);
 800573e:	490a      	ldr	r1, [pc, #40]	; (8005768 <setup+0x44>)
 8005740:	4806      	ldr	r0, [pc, #24]	; (800575c <setup+0x38>)
 8005742:	f000 f89b 	bl	800587c <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE9advertiseERNS_9PublisherE>
  nh.advertise(enkoder2_vel_pub);
 8005746:	4909      	ldr	r1, [pc, #36]	; (800576c <setup+0x48>)
 8005748:	4804      	ldr	r0, [pc, #16]	; (800575c <setup+0x38>)
 800574a:	f000 f897 	bl	800587c <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE9advertiseERNS_9PublisherE>
  nh.advertise(odom_pub);
 800574e:	4908      	ldr	r1, [pc, #32]	; (8005770 <setup+0x4c>)
 8005750:	4802      	ldr	r0, [pc, #8]	; (800575c <setup+0x38>)
 8005752:	f000 f893 	bl	800587c <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE9advertiseERNS_9PublisherE>

  //Encoder Encoder1, Encoder2;
}
 8005756:	bf00      	nop
 8005758:	bd80      	pop	{r7, pc}
 800575a:	bf00      	nop
 800575c:	2000058c 	.word	0x2000058c
 8005760:	20002e28 	.word	0x20002e28
 8005764:	20002e3c 	.word	0x20002e3c
 8005768:	20002e50 	.word	0x20002e50
 800576c:	20002e64 	.word	0x20002e64
 8005770:	20002e78 	.word	0x20002e78

08005774 <loop>:

void loop(void)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	af00      	add	r7, sp, #0



  nh.spinOnce();
 8005778:	4803      	ldr	r0, [pc, #12]	; (8005788 <loop+0x14>)
 800577a:	f000 f8af 	bl	80058dc <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE8spinOnceEv>

  HAL_Delay(10);
 800577e:	200a      	movs	r0, #10
 8005780:	f001 f9fa 	bl	8006b78 <HAL_Delay>
}
 8005784:	bf00      	nop
 8005786:	bd80      	pop	{r7, pc}
 8005788:	2000058c 	.word	0x2000058c

0800578c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 800578c:	b480      	push	{r7}
 800578e:	b085      	sub	sp, #20
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8005796:	2300      	movs	r3, #0
 8005798:	60fb      	str	r3, [r7, #12]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2b03      	cmp	r3, #3
 800579e:	d80d      	bhi.n	80057bc <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	00db      	lsls	r3, r3, #3
 80057a4:	683a      	ldr	r2, [r7, #0]
 80057a6:	fa22 f103 	lsr.w	r1, r2, r3
 80057aa:	687a      	ldr	r2, [r7, #4]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	4413      	add	r3, r2
 80057b0:	b2ca      	uxtb	r2, r1
 80057b2:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	3301      	adds	r3, #1
 80057b8:	60fb      	str	r3, [r7, #12]
 80057ba:	e7ee      	b.n	800579a <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 80057bc:	bf00      	nop
 80057be:	3714      	adds	r7, #20
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr

080057c8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 80057c8:	b480      	push	{r7}
 80057ca:	b085      	sub	sp, #20
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
 80057d0:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80057d8:	2300      	movs	r3, #0
 80057da:	60fb      	str	r3, [r7, #12]
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2b03      	cmp	r3, #3
 80057e0:	d811      	bhi.n	8005806 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	6839      	ldr	r1, [r7, #0]
 80057e8:	68fa      	ldr	r2, [r7, #12]
 80057ea:	440a      	add	r2, r1
 80057ec:	7812      	ldrb	r2, [r2, #0]
 80057ee:	4611      	mov	r1, r2
 80057f0:	68fa      	ldr	r2, [r7, #12]
 80057f2:	00d2      	lsls	r2, r2, #3
 80057f4:	fa01 f202 	lsl.w	r2, r1, r2
 80057f8:	431a      	orrs	r2, r3
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	3301      	adds	r3, #1
 8005802:	60fb      	str	r3, [r7, #12]
 8005804:	e7ea      	b.n	80057dc <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 8005806:	bf00      	nop
 8005808:	3714      	adds	r7, #20
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr

08005812 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE11getHardwareEv>:

  /*
   * Setup Functions
   */
public:
  Hardware* getHardware()
 8005812:	b480      	push	{r7}
 8005814:	b083      	sub	sp, #12
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	3304      	adds	r3, #4
  }
 800581e:	4618      	mov	r0, r3
 8005820:	370c      	adds	r7, #12
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr

0800582a <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 800582a:	b580      	push	{r7, lr}
 800582c:	b082      	sub	sp, #8
 800582e:	af00      	add	r7, sp, #0
 8005830:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	3304      	adds	r3, #4
 8005836:	4618      	mov	r0, r3
 8005838:	f7fc fc14 	bl	8002064 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005842:	461a      	mov	r2, r3
 8005844:	2300      	movs	r3, #0
 8005846:	f8c2 384c 	str.w	r3, [r2, #2124]	; 0x84c
    bytes_ = 0;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005850:	461a      	mov	r2, r3
 8005852:	2300      	movs	r3, #0
 8005854:	f8c2 3850 	str.w	r3, [r2, #2128]	; 0x850
    index_ = 0;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800585e:	461a      	mov	r2, r3
 8005860:	2300      	movs	r3, #0
 8005862:	f8c2 3858 	str.w	r3, [r2, #2136]	; 0x858
    topic_ = 0;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800586c:	461a      	mov	r2, r3
 800586e:	2300      	movs	r3, #0
 8005870:	f8c2 3854 	str.w	r3, [r2, #2132]	; 0x854
  };
 8005874:	bf00      	nop
 8005876:	3708      	adds	r7, #8
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}

0800587c <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 800587c:	b480      	push	{r7}
 800587e:	b085      	sub	sp, #20
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8005886:	2300      	movs	r3, #0
 8005888:	60fb      	str	r3, [r7, #12]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2b04      	cmp	r3, #4
 800588e:	dc1e      	bgt.n	80058ce <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE9advertiseERNS_9PublisherE+0x52>
    {
      if (publishers[i] == 0) // empty slot
 8005890:	687a      	ldr	r2, [r7, #4]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	f603 2308 	addw	r3, r3, #2568	; 0xa08
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	4413      	add	r3, r2
 800589c:	685b      	ldr	r3, [r3, #4]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d111      	bne.n	80058c6 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE9advertiseERNS_9PublisherE+0x4a>
      {
        publishers[i] = &p;
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f603 2308 	addw	r3, r3, #2568	; 0xa08
 80058aa:	009b      	lsls	r3, r3, #2
 80058ac:	4413      	add	r3, r2
 80058ae:	683a      	ldr	r2, [r7, #0]
 80058b0:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f103 0269 	add.w	r2, r3, #105	; 0x69
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	60da      	str	r2, [r3, #12]
        return true;
 80058c2:	2301      	movs	r3, #1
 80058c4:	e004      	b.n	80058d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	3301      	adds	r3, #1
 80058ca:	60fb      	str	r3, [r7, #12]
 80058cc:	e7dd      	b.n	800588a <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE9advertiseERNS_9PublisherE+0xe>
      }
    }
    return false;
 80058ce:	2300      	movs	r3, #0
  }
 80058d0:	4618      	mov	r0, r3
 80058d2:	3714      	adds	r7, #20
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr

080058dc <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE8spinOnceEv>:
  virtual int spinOnce() override
 80058dc:	b580      	push	{r7, lr}
 80058de:	b084      	sub	sp, #16
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	3304      	adds	r3, #4
 80058e8:	4618      	mov	r0, r3
 80058ea:	f7fc fca9 	bl	8002240 <_ZN13STM32Hardware4timeEv>
 80058ee:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80058f6:	f8d3 3868 	ldr.w	r3, [r3, #2152]	; 0x868
 80058fa:	68fa      	ldr	r2, [r7, #12]
 80058fc:	1ad3      	subs	r3, r2, r3
 80058fe:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8005902:	4293      	cmp	r3, r2
 8005904:	d905      	bls.n	8005912 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE8spinOnceEv+0x36>
      configured_ = false;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800590c:	2200      	movs	r2, #0
 800590e:	f883 2860 	strb.w	r2, [r3, #2144]	; 0x860
    if (mode_ != MODE_FIRST_FF)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005918:	f8d3 384c 	ldr.w	r3, [r3, #2124]	; 0x84c
 800591c:	2b00      	cmp	r3, #0
 800591e:	d00e      	beq.n	800593e <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE8spinOnceEv+0x62>
      if (c_time > last_msg_timeout_time)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005926:	f8d3 386c 	ldr.w	r3, [r3, #2156]	; 0x86c
 800592a:	68fa      	ldr	r2, [r7, #12]
 800592c:	429a      	cmp	r2, r3
 800592e:	d906      	bls.n	800593e <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005936:	461a      	mov	r2, r3
 8005938:	2300      	movs	r3, #0
 800593a:	f8c2 384c 	str.w	r3, [r2, #2124]	; 0x84c
      if (spin_timeout_ > 0)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f8d3 3620 	ldr.w	r3, [r3, #1568]	; 0x620
 8005944:	2b00      	cmp	r3, #0
 8005946:	d014      	beq.n	8005972 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE8spinOnceEv+0x96>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	3304      	adds	r3, #4
 800594c:	4618      	mov	r0, r3
 800594e:	f7fc fc77 	bl	8002240 <_ZN13STM32Hardware4timeEv>
 8005952:	4602      	mov	r2, r0
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	1ad2      	subs	r2, r2, r3
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f8d3 3620 	ldr.w	r3, [r3, #1568]	; 0x620
 800595e:	429a      	cmp	r2, r3
 8005960:	bf8c      	ite	hi
 8005962:	2301      	movhi	r3, #1
 8005964:	2300      	movls	r3, #0
 8005966:	b2db      	uxtb	r3, r3
 8005968:	2b00      	cmp	r3, #0
 800596a:	d002      	beq.n	8005972 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE8spinOnceEv+0x96>
          return SPIN_TIMEOUT;
 800596c:	f06f 0301 	mvn.w	r3, #1
 8005970:	e221      	b.n	8005db6 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE8spinOnceEv+0x4da>
      int data = hardware_.read();
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	3304      	adds	r3, #4
 8005976:	4618      	mov	r0, r3
 8005978:	f7fc fb90 	bl	800209c <_ZN13STM32Hardware4readEv>
 800597c:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	2b00      	cmp	r3, #0
 8005982:	f2c0 81fa 	blt.w	8005d7a <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE8spinOnceEv+0x49e>
      checksum_ += data;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800598c:	f8d3 285c 	ldr.w	r2, [r3, #2140]	; 0x85c
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	4413      	add	r3, r2
 8005994:	687a      	ldr	r2, [r7, #4]
 8005996:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800599a:	f8c2 385c 	str.w	r3, [r2, #2140]	; 0x85c
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80059a4:	f8d3 384c 	ldr.w	r3, [r3, #2124]	; 0x84c
 80059a8:	2b07      	cmp	r3, #7
 80059aa:	d12b      	bne.n	8005a04 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE8spinOnceEv+0x128>
        message_in[index_++] = data;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80059b2:	f8d3 3858 	ldr.w	r3, [r3, #2136]	; 0x858
 80059b6:	1c5a      	adds	r2, r3, #1
 80059b8:	6879      	ldr	r1, [r7, #4]
 80059ba:	f501 5100 	add.w	r1, r1, #8192	; 0x2000
 80059be:	f8c1 2858 	str.w	r2, [r1, #2136]	; 0x858
 80059c2:	68ba      	ldr	r2, [r7, #8]
 80059c4:	b2d1      	uxtb	r1, r2
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	4413      	add	r3, r2
 80059ca:	460a      	mov	r2, r1
 80059cc:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
        bytes_--;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80059d6:	f8d3 3850 	ldr.w	r3, [r3, #2128]	; 0x850
 80059da:	3b01      	subs	r3, #1
 80059dc:	687a      	ldr	r2, [r7, #4]
 80059de:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80059e2:	f8c2 3850 	str.w	r3, [r2, #2128]	; 0x850
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80059ec:	f8d3 3850 	ldr.w	r3, [r3, #2128]	; 0x850
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d1a4      	bne.n	800593e <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80059fa:	461a      	mov	r2, r3
 80059fc:	2308      	movs	r3, #8
 80059fe:	f8c2 384c 	str.w	r3, [r2, #2124]	; 0x84c
 8005a02:	e79c      	b.n	800593e <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE8spinOnceEv+0x62>
      else if (mode_ == MODE_FIRST_FF)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005a0a:	f8d3 384c 	ldr.w	r3, [r3, #2124]	; 0x84c
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d130      	bne.n	8005a74 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE8spinOnceEv+0x198>
        if (data == 0xff)
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	2bff      	cmp	r3, #255	; 0xff
 8005a16:	d112      	bne.n	8005a3e <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE8spinOnceEv+0x162>
          mode_++;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005a1e:	f8d3 384c 	ldr.w	r3, [r3, #2124]	; 0x84c
 8005a22:	3301      	adds	r3, #1
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8005a2a:	f8c2 384c 	str.w	r3, [r2, #2124]	; 0x84c
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	3314      	adds	r3, #20
 8005a32:	687a      	ldr	r2, [r7, #4]
 8005a34:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8005a38:	f8c2 386c 	str.w	r3, [r2, #2156]	; 0x86c
 8005a3c:	e77f      	b.n	800593e <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE8spinOnceEv+0x62>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	3304      	adds	r3, #4
 8005a42:	4618      	mov	r0, r3
 8005a44:	f7fc fbfc 	bl	8002240 <_ZN13STM32Hardware4timeEv>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	1ad3      	subs	r3, r2, r3
 8005a4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a52:	4293      	cmp	r3, r2
 8005a54:	bf8c      	ite	hi
 8005a56:	2301      	movhi	r3, #1
 8005a58:	2300      	movls	r3, #0
 8005a5a:	b2db      	uxtb	r3, r3
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	f43f af6e 	beq.w	800593e <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE8spinOnceEv+0x62>
          configured_ = false;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005a68:	2200      	movs	r2, #0
 8005a6a:	f883 2860 	strb.w	r2, [r3, #2144]	; 0x860
          return SPIN_TIMEOUT;
 8005a6e:	f06f 0301 	mvn.w	r3, #1
 8005a72:	e1a0      	b.n	8005db6 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE8spinOnceEv+0x4da>
      else if (mode_ == MODE_PROTOCOL_VER)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005a7a:	f8d3 384c 	ldr.w	r3, [r3, #2124]	; 0x84c
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	d121      	bne.n	8005ac6 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE8spinOnceEv+0x1ea>
        if (data == PROTOCOL_VER)
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	2bfe      	cmp	r3, #254	; 0xfe
 8005a86:	d10b      	bne.n	8005aa0 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE8spinOnceEv+0x1c4>
          mode_++;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005a8e:	f8d3 384c 	ldr.w	r3, [r3, #2124]	; 0x84c
 8005a92:	3301      	adds	r3, #1
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8005a9a:	f8c2 384c 	str.w	r3, [r2, #2124]	; 0x84c
 8005a9e:	e74e      	b.n	800593e <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	f8c2 384c 	str.w	r3, [r2, #2124]	; 0x84c
          if (configured_ == false)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005ab4:	f893 3860 	ldrb.w	r3, [r3, #2144]	; 0x860
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	f47f af40 	bne.w	800593e <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE8spinOnceEv+0x62>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f000 f97d 	bl	8005dbe <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE15requestSyncTimeEv>
 8005ac4:	e73b      	b.n	800593e <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005acc:	f8d3 384c 	ldr.w	r3, [r3, #2124]	; 0x84c
 8005ad0:	2b02      	cmp	r3, #2
 8005ad2:	d120      	bne.n	8005b16 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE8spinOnceEv+0x23a>
        bytes_ = data;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005ada:	461a      	mov	r2, r3
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	f8c2 3850 	str.w	r3, [r2, #2128]	; 0x850
        index_ = 0;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005ae8:	461a      	mov	r2, r3
 8005aea:	2300      	movs	r3, #0
 8005aec:	f8c2 3858 	str.w	r3, [r2, #2136]	; 0x858
        mode_++;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005af6:	f8d3 384c 	ldr.w	r3, [r3, #2124]	; 0x84c
 8005afa:	3301      	adds	r3, #1
 8005afc:	687a      	ldr	r2, [r7, #4]
 8005afe:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8005b02:	f8c2 384c 	str.w	r3, [r2, #2124]	; 0x84c
        checksum_ = data;               /* first byte for calculating size checksum */
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	f8c2 385c 	str.w	r3, [r2, #2140]	; 0x85c
 8005b14:	e713      	b.n	800593e <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005b1c:	f8d3 384c 	ldr.w	r3, [r3, #2124]	; 0x84c
 8005b20:	2b03      	cmp	r3, #3
 8005b22:	d118      	bne.n	8005b56 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE8spinOnceEv+0x27a>
        bytes_ += data << 8;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005b2a:	f8d3 2850 	ldr.w	r2, [r3, #2128]	; 0x850
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	021b      	lsls	r3, r3, #8
 8005b32:	4413      	add	r3, r2
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8005b3a:	f8c2 3850 	str.w	r3, [r2, #2128]	; 0x850
        mode_++;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005b44:	f8d3 384c 	ldr.w	r3, [r3, #2124]	; 0x84c
 8005b48:	3301      	adds	r3, #1
 8005b4a:	687a      	ldr	r2, [r7, #4]
 8005b4c:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8005b50:	f8c2 384c 	str.w	r3, [r2, #2124]	; 0x84c
 8005b54:	e6f3      	b.n	800593e <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE8spinOnceEv+0x62>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005b5c:	f8d3 384c 	ldr.w	r3, [r3, #2124]	; 0x84c
 8005b60:	2b04      	cmp	r3, #4
 8005b62:	d11f      	bne.n	8005ba4 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE8spinOnceEv+0x2c8>
        if ((checksum_ % 256) == 255)
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005b6a:	f8d3 385c 	ldr.w	r3, [r3, #2140]	; 0x85c
 8005b6e:	425a      	negs	r2, r3
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	b2d2      	uxtb	r2, r2
 8005b74:	bf58      	it	pl
 8005b76:	4253      	negpl	r3, r2
 8005b78:	2bff      	cmp	r3, #255	; 0xff
 8005b7a:	d10b      	bne.n	8005b94 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE8spinOnceEv+0x2b8>
          mode_++;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005b82:	f8d3 384c 	ldr.w	r3, [r3, #2124]	; 0x84c
 8005b86:	3301      	adds	r3, #1
 8005b88:	687a      	ldr	r2, [r7, #4]
 8005b8a:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8005b8e:	f8c2 384c 	str.w	r3, [r2, #2124]	; 0x84c
 8005b92:	e6d4      	b.n	800593e <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE8spinOnceEv+0x62>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005b9a:	461a      	mov	r2, r3
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	f8c2 384c 	str.w	r3, [r2, #2124]	; 0x84c
 8005ba2:	e6cc      	b.n	800593e <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005baa:	f8d3 384c 	ldr.w	r3, [r3, #2124]	; 0x84c
 8005bae:	2b05      	cmp	r3, #5
 8005bb0:	d119      	bne.n	8005be6 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE8spinOnceEv+0x30a>
        topic_ = data;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005bb8:	461a      	mov	r2, r3
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	f8c2 3854 	str.w	r3, [r2, #2132]	; 0x854
        mode_++;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005bc6:	f8d3 384c 	ldr.w	r3, [r3, #2124]	; 0x84c
 8005bca:	3301      	adds	r3, #1
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8005bd2:	f8c2 384c 	str.w	r3, [r2, #2124]	; 0x84c
        checksum_ = data;               /* first byte included in checksum */
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005bdc:	461a      	mov	r2, r3
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	f8c2 385c 	str.w	r3, [r2, #2140]	; 0x85c
 8005be4:	e6ab      	b.n	800593e <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE8spinOnceEv+0x62>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005bec:	f8d3 384c 	ldr.w	r3, [r3, #2124]	; 0x84c
 8005bf0:	2b06      	cmp	r3, #6
 8005bf2:	d123      	bne.n	8005c3c <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE8spinOnceEv+0x360>
        topic_ += data << 8;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005bfa:	f8d3 2854 	ldr.w	r2, [r3, #2132]	; 0x854
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	021b      	lsls	r3, r3, #8
 8005c02:	4413      	add	r3, r2
 8005c04:	687a      	ldr	r2, [r7, #4]
 8005c06:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8005c0a:	f8c2 3854 	str.w	r3, [r2, #2132]	; 0x854
        mode_ = MODE_MESSAGE;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005c14:	461a      	mov	r2, r3
 8005c16:	2307      	movs	r3, #7
 8005c18:	f8c2 384c 	str.w	r3, [r2, #2124]	; 0x84c
        if (bytes_ == 0)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005c22:	f8d3 3850 	ldr.w	r3, [r3, #2128]	; 0x850
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	f47f ae89 	bne.w	800593e <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE8spinOnceEv+0x62>
          mode_ = MODE_MSG_CHECKSUM;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005c32:	461a      	mov	r2, r3
 8005c34:	2308      	movs	r3, #8
 8005c36:	f8c2 384c 	str.w	r3, [r2, #2124]	; 0x84c
 8005c3a:	e680      	b.n	800593e <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE8spinOnceEv+0x62>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005c42:	f8d3 384c 	ldr.w	r3, [r3, #2124]	; 0x84c
 8005c46:	2b08      	cmp	r3, #8
 8005c48:	f47f ae79 	bne.w	800593e <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE8spinOnceEv+0x62>
        mode_ = MODE_FIRST_FF;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005c52:	461a      	mov	r2, r3
 8005c54:	2300      	movs	r3, #0
 8005c56:	f8c2 384c 	str.w	r3, [r2, #2124]	; 0x84c
        if ((checksum_ % 256) == 255)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005c60:	f8d3 385c 	ldr.w	r3, [r3, #2140]	; 0x85c
 8005c64:	425a      	negs	r2, r3
 8005c66:	b2db      	uxtb	r3, r3
 8005c68:	b2d2      	uxtb	r2, r2
 8005c6a:	bf58      	it	pl
 8005c6c:	4253      	negpl	r3, r2
 8005c6e:	2bff      	cmp	r3, #255	; 0xff
 8005c70:	f47f ae65 	bne.w	800593e <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE8spinOnceEv+0x62>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005c7a:	f8d3 3854 	ldr.w	r3, [r3, #2132]	; 0x854
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d116      	bne.n	8005cb0 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE8spinOnceEv+0x3d4>
            requestSyncTime();
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f000 f89b 	bl	8005dbe <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE15requestSyncTimeEv>
            negotiateTopics();
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f000 f8b6 	bl	8005dfa <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005c94:	461a      	mov	r2, r3
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	f8c2 3864 	str.w	r3, [r2, #2148]	; 0x864
            last_sync_receive_time = c_time;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	f8c2 3868 	str.w	r3, [r2, #2152]	; 0x868
            return SPIN_ERR;
 8005caa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005cae:	e082      	b.n	8005db6 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE8spinOnceEv+0x4da>
          else if (topic_ == TopicInfo::ID_TIME)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005cb6:	f8d3 3854 	ldr.w	r3, [r3, #2132]	; 0x854
 8005cba:	2b0a      	cmp	r3, #10
 8005cbc:	d107      	bne.n	8005cce <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE8spinOnceEv+0x3f2>
            syncTime(message_in);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8005cc4:	4619      	mov	r1, r3
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f000 f978 	bl	8005fbc <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE8syncTimeEPh>
 8005ccc:	e637      	b.n	800593e <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005cd4:	f8d3 3854 	ldr.w	r3, [r3, #2132]	; 0x854
 8005cd8:	2b06      	cmp	r3, #6
 8005cda:	d111      	bne.n	8005d00 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE8spinOnceEv+0x424>
            req_param_resp.deserialize(message_in);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f503 5321 	add.w	r3, r3, #10304	; 0x2840
 8005ce2:	3334      	adds	r3, #52	; 0x34
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	f202 6224 	addw	r2, r2, #1572	; 0x624
 8005cea:	4611      	mov	r1, r2
 8005cec:	4618      	mov	r0, r3
 8005cee:	f7fb ffc6 	bl	8001c7e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	f883 2870 	strb.w	r2, [r3, #2160]	; 0x870
 8005cfe:	e61e      	b.n	800593e <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE8spinOnceEv+0x62>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005d06:	f8d3 3854 	ldr.w	r3, [r3, #2132]	; 0x854
 8005d0a:	2b0b      	cmp	r3, #11
 8005d0c:	d106      	bne.n	8005d1c <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE8spinOnceEv+0x440>
            configured_ = false;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005d14:	2200      	movs	r2, #0
 8005d16:	f883 2860 	strb.w	r2, [r3, #2144]	; 0x860
 8005d1a:	e610      	b.n	800593e <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE8spinOnceEv+0x62>
            if (subscribers[topic_ - 100])
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005d22:	f8d3 3854 	ldr.w	r3, [r3, #2132]	; 0x854
 8005d26:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f602 220e 	addw	r2, r2, #2574	; 0xa0e
 8005d30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	f43f ae02 	beq.w	800593e <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE8spinOnceEv+0x62>
              subscribers[topic_ - 100]->callback(message_in);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005d40:	f8d3 3854 	ldr.w	r3, [r3, #2132]	; 0x854
 8005d44:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f602 220e 	addw	r2, r2, #2574	; 0xa0e
 8005d4e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005d58:	f8d3 3854 	ldr.w	r3, [r3, #2132]	; 0x854
 8005d5c:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f602 220e 	addw	r2, r2, #2574	; 0xa0e
 8005d66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	f202 6224 	addw	r2, r2, #1572	; 0x624
 8005d74:	4611      	mov	r1, r2
 8005d76:	4798      	blx	r3
    while (true)
 8005d78:	e5e1      	b.n	800593e <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE8spinOnceEv+0x62>
        break;
 8005d7a:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005d82:	f893 3860 	ldrb.w	r3, [r3, #2144]	; 0x860
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d014      	beq.n	8005db4 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE8spinOnceEv+0x4d8>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005d90:	f8d3 3864 	ldr.w	r3, [r3, #2148]	; 0x864
 8005d94:	68fa      	ldr	r2, [r7, #12]
 8005d96:	1ad3      	subs	r3, r2, r3
 8005d98:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d909      	bls.n	8005db4 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE8spinOnceEv+0x4d8>
      requestSyncTime();
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f000 f80c 	bl	8005dbe <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005dac:	461a      	mov	r2, r3
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	f8c2 3864 	str.w	r3, [r2, #2148]	; 0x864
    return SPIN_OK;
 8005db4:	2300      	movs	r3, #0
  }
 8005db6:	4618      	mov	r0, r3
 8005db8:	3710      	adds	r7, #16
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}

08005dbe <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE15requestSyncTimeEv>:
  void requestSyncTime()
 8005dbe:	b580      	push	{r7, lr}
 8005dc0:	b086      	sub	sp, #24
 8005dc2:	af00      	add	r7, sp, #0
 8005dc4:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8005dc6:	f107 030c 	add.w	r3, r7, #12
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f7fb fab4 	bl	8001338 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f107 020c 	add.w	r2, r7, #12
 8005dda:	210a      	movs	r1, #10
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	4798      	blx	r3
    rt_time = hardware_.time();
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	3304      	adds	r3, #4
 8005de4:	4618      	mov	r0, r3
 8005de6:	f7fc fa2b 	bl	8002240 <_ZN13STM32Hardware4timeEv>
 8005dea:	4602      	mov	r2, r0
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f8c3 2614 	str.w	r2, [r3, #1556]	; 0x614
  }
 8005df2:	bf00      	nop
 8005df4:	3718      	adds	r7, #24
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}

08005dfa <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 8005dfa:	b590      	push	{r4, r7, lr}
 8005dfc:	b08b      	sub	sp, #44	; 0x2c
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8005e02:	f107 030c 	add.w	r3, r7, #12
 8005e06:	4618      	mov	r0, r3
 8005e08:	f7fb fb86 	bl	8001518 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	627b      	str	r3, [r7, #36]	; 0x24
 8005e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e12:	2b04      	cmp	r3, #4
 8005e14:	dc63      	bgt.n	8005ede <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 8005e16:	687a      	ldr	r2, [r7, #4]
 8005e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1a:	f603 2308 	addw	r3, r3, #2568	; 0xa08
 8005e1e:	009b      	lsls	r3, r3, #2
 8005e20:	4413      	add	r3, r2
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d056      	beq.n	8005ed6 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2c:	f603 2308 	addw	r3, r3, #2568	; 0xa08
 8005e30:	009b      	lsls	r3, r3, #2
 8005e32:	4413      	add	r3, r2
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e40:	f603 2308 	addw	r3, r3, #2568	; 0xa08
 8005e44:	009b      	lsls	r3, r3, #2
 8005e46:	4413      	add	r3, r2
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8005e4e:	687a      	ldr	r2, [r7, #4]
 8005e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e52:	f603 2308 	addw	r3, r3, #2568	; 0xa08
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	4413      	add	r3, r2
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	6859      	ldr	r1, [r3, #4]
 8005e5e:	687a      	ldr	r2, [r7, #4]
 8005e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e62:	f603 2308 	addw	r3, r3, #2568	; 0xa08
 8005e66:	009b      	lsls	r3, r3, #2
 8005e68:	4413      	add	r3, r2
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	3308      	adds	r3, #8
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4608      	mov	r0, r1
 8005e76:	4798      	blx	r3
 8005e78:	4603      	mov	r3, r0
 8005e7a:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8005e7c:	687a      	ldr	r2, [r7, #4]
 8005e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e80:	f603 2308 	addw	r3, r3, #2568	; 0xa08
 8005e84:	009b      	lsls	r3, r3, #2
 8005e86:	4413      	add	r3, r2
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	6859      	ldr	r1, [r3, #4]
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e90:	f603 2308 	addw	r3, r3, #2568	; 0xa08
 8005e94:	009b      	lsls	r3, r3, #2
 8005e96:	4413      	add	r3, r2
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	330c      	adds	r3, #12
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4608      	mov	r0, r1
 8005ea4:	4798      	blx	r3
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8005eaa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005eae:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	681c      	ldr	r4, [r3, #0]
 8005eb6:	687a      	ldr	r2, [r7, #4]
 8005eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eba:	f603 2308 	addw	r3, r3, #2568	; 0xa08
 8005ebe:	009b      	lsls	r3, r3, #2
 8005ec0:	4413      	add	r3, r2
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f7fc f892 	bl	8001fee <_ZN3ros9Publisher15getEndpointTypeEv>
 8005eca:	4601      	mov	r1, r0
 8005ecc:	f107 030c 	add.w	r3, r7, #12
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8005ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed8:	3301      	adds	r3, #1
 8005eda:	627b      	str	r3, [r7, #36]	; 0x24
 8005edc:	e798      	b.n	8005e10 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8005ede:	2300      	movs	r3, #0
 8005ee0:	627b      	str	r3, [r7, #36]	; 0x24
 8005ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee4:	2b04      	cmp	r3, #4
 8005ee6:	dc5f      	bgt.n	8005fa8 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eec:	f602 220e 	addw	r2, r2, #2574	; 0xa0e
 8005ef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d053      	beq.n	8005fa0 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005efc:	f602 220e 	addw	r2, r2, #2574	; 0xa0e
 8005f00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f0e:	f602 220e 	addw	r2, r2, #2574	; 0xa0e
 8005f12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f1e:	f602 220e 	addw	r2, r2, #2574	; 0xa0e
 8005f22:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f2a:	f602 220e 	addw	r2, r2, #2574	; 0xa0e
 8005f2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	3308      	adds	r3, #8
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4608      	mov	r0, r1
 8005f3a:	4798      	blx	r3
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f44:	f602 220e 	addw	r2, r2, #2574	; 0xa0e
 8005f48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f50:	f602 220e 	addw	r2, r2, #2574	; 0xa0e
 8005f54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	330c      	adds	r3, #12
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4608      	mov	r0, r1
 8005f60:	4798      	blx	r3
 8005f62:	4603      	mov	r3, r0
 8005f64:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8005f66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005f6a:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	681c      	ldr	r4, [r3, #0]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f76:	f602 220e 	addw	r2, r2, #2574	; 0xa0e
 8005f7a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f82:	f602 220e 	addw	r2, r2, #2574	; 0xa0e
 8005f86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	3304      	adds	r3, #4
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4608      	mov	r0, r1
 8005f92:	4798      	blx	r3
 8005f94:	4601      	mov	r1, r0
 8005f96:	f107 030c 	add.w	r3, r7, #12
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8005fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa2:	3301      	adds	r3, #1
 8005fa4:	627b      	str	r3, [r7, #36]	; 0x24
 8005fa6:	e79c      	b.n	8005ee2 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8005fae:	2201      	movs	r2, #1
 8005fb0:	f883 2860 	strb.w	r2, [r3, #2144]	; 0x860
  }
 8005fb4:	bf00      	nop
 8005fb6:	372c      	adds	r7, #44	; 0x2c
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd90      	pop	{r4, r7, pc}

08005fbc <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b086      	sub	sp, #24
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8005fc6:	f107 0308 	add.w	r3, r7, #8
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f7fb f9b4 	bl	8001338 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	3304      	adds	r3, #4
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f7fc f933 	bl	8002240 <_ZN13STM32Hardware4timeEv>
 8005fda:	4602      	mov	r2, r0
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f8d3 3614 	ldr.w	r3, [r3, #1556]	; 0x614
 8005fe2:	1ad3      	subs	r3, r2, r3
 8005fe4:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8005fe6:	f107 0308 	add.w	r3, r7, #8
 8005fea:	6839      	ldr	r1, [r7, #0]
 8005fec:	4618      	mov	r0, r3
 8005fee:	f7fb fa13 	bl	8001418 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8005ff2:	68fa      	ldr	r2, [r7, #12]
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	4916      	ldr	r1, [pc, #88]	; (8006050 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE8syncTimeEPh+0x94>)
 8005ff8:	fba1 1303 	umull	r1, r3, r1, r3
 8005ffc:	099b      	lsrs	r3, r3, #6
 8005ffe:	4413      	add	r3, r2
 8006000:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8006002:	6939      	ldr	r1, [r7, #16]
 8006004:	697a      	ldr	r2, [r7, #20]
 8006006:	4b12      	ldr	r3, [pc, #72]	; (8006050 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE8syncTimeEPh+0x94>)
 8006008:	fba3 0302 	umull	r0, r3, r3, r2
 800600c:	099b      	lsrs	r3, r3, #6
 800600e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006012:	fb00 f303 	mul.w	r3, r0, r3
 8006016:	1ad3      	subs	r3, r2, r3
 8006018:	4a0e      	ldr	r2, [pc, #56]	; (8006054 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE8syncTimeEPh+0x98>)
 800601a:	fb02 f303 	mul.w	r3, r2, r3
 800601e:	440b      	add	r3, r1
 8006020:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8006022:	f107 0308 	add.w	r3, r7, #8
 8006026:	3304      	adds	r3, #4
 8006028:	4619      	mov	r1, r3
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f000 f8aa 	bl	8006184 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	3304      	adds	r3, #4
 8006034:	4618      	mov	r0, r3
 8006036:	f7fc f903 	bl	8002240 <_ZN13STM32Hardware4timeEv>
 800603a:	4602      	mov	r2, r0
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006042:	f8c3 2868 	str.w	r2, [r3, #2152]	; 0x868
  }
 8006046:	bf00      	nop
 8006048:	3718      	adds	r7, #24
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}
 800604e:	bf00      	nop
 8006050:	10624dd3 	.word	0x10624dd3
 8006054:	000f4240 	.word	0x000f4240

08006058 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 8006058:	b580      	push	{r7, lr}
 800605a:	b088      	sub	sp, #32
 800605c:	af00      	add	r7, sp, #0
 800605e:	60f8      	str	r0, [r7, #12]
 8006060:	60b9      	str	r1, [r7, #8]
 8006062:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	2b63      	cmp	r3, #99	; 0x63
 8006068:	dd0b      	ble.n	8006082 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE7publishEiPKNS_3MsgE+0x2a>
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006070:	f893 3860 	ldrb.w	r3, [r3, #2144]	; 0x860
 8006074:	f083 0301 	eor.w	r3, r3, #1
 8006078:	b2db      	uxtb	r3, r3
 800607a:	2b00      	cmp	r3, #0
 800607c:	d001      	beq.n	8006082 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE7publishEiPKNS_3MsgE+0x2a>
      return 0;
 800607e:	2300      	movs	r3, #0
 8006080:	e079      	b.n	8006176 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE7publishEiPKNS_3MsgE+0x11e>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	68fa      	ldr	r2, [r7, #12]
 800608a:	f602 0224 	addw	r2, r2, #2084	; 0x824
 800608e:	3207      	adds	r2, #7
 8006090:	4611      	mov	r1, r2
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	4798      	blx	r3
 8006096:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	22ff      	movs	r2, #255	; 0xff
 800609c:	f883 2824 	strb.w	r2, [r3, #2084]	; 0x824
    message_out[1] = PROTOCOL_VER;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	22fe      	movs	r2, #254	; 0xfe
 80060a4:	f883 2825 	strb.w	r2, [r3, #2085]	; 0x825
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	b2da      	uxtb	r2, r3
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	f883 2826 	strb.w	r2, [r3, #2086]	; 0x826
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	0a1b      	lsrs	r3, r3, #8
 80060b8:	b29b      	uxth	r3, r3
 80060ba:	b2da      	uxtb	r2, r3
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f883 2827 	strb.w	r2, [r3, #2087]	; 0x827
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	f893 2826 	ldrb.w	r2, [r3, #2086]	; 0x826
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f893 3827 	ldrb.w	r3, [r3, #2087]	; 0x827
 80060ce:	4413      	add	r3, r2
 80060d0:	b2db      	uxtb	r3, r3
 80060d2:	43db      	mvns	r3, r3
 80060d4:	b2da      	uxtb	r2, r3
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	f883 2828 	strb.w	r2, [r3, #2088]	; 0x828
    message_out[5] = (uint8_t)((int16_t)id & 255);
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	b2da      	uxtb	r2, r3
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f883 2829 	strb.w	r2, [r3, #2089]	; 0x829
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	b21b      	sxth	r3, r3
 80060ea:	121b      	asrs	r3, r3, #8
 80060ec:	b21b      	sxth	r3, r3
 80060ee:	b2da      	uxtb	r2, r3
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f883 282a 	strb.w	r2, [r3, #2090]	; 0x82a

    /* calculate checksum */
    int chk = 0;
 80060f6:	2300      	movs	r3, #0
 80060f8:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80060fa:	2305      	movs	r3, #5
 80060fc:	61bb      	str	r3, [r7, #24]
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	3306      	adds	r3, #6
 8006102:	69ba      	ldr	r2, [r7, #24]
 8006104:	429a      	cmp	r2, r3
 8006106:	dc0d      	bgt.n	8006124 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE7publishEiPKNS_3MsgE+0xcc>
      chk += message_out[i];
 8006108:	68fa      	ldr	r2, [r7, #12]
 800610a:	69bb      	ldr	r3, [r7, #24]
 800610c:	4413      	add	r3, r2
 800610e:	f603 0324 	addw	r3, r3, #2084	; 0x824
 8006112:	781b      	ldrb	r3, [r3, #0]
 8006114:	461a      	mov	r2, r3
 8006116:	69fb      	ldr	r3, [r7, #28]
 8006118:	4413      	add	r3, r2
 800611a:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 800611c:	69bb      	ldr	r3, [r7, #24]
 800611e:	3301      	adds	r3, #1
 8006120:	61bb      	str	r3, [r7, #24]
 8006122:	e7ec      	b.n	80060fe <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE7publishEiPKNS_3MsgE+0xa6>
    l += 7;
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	3307      	adds	r3, #7
 8006128:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 800612a:	69fb      	ldr	r3, [r7, #28]
 800612c:	425a      	negs	r2, r3
 800612e:	b2db      	uxtb	r3, r3
 8006130:	b2d2      	uxtb	r2, r2
 8006132:	bf58      	it	pl
 8006134:	4253      	negpl	r3, r2
 8006136:	b2da      	uxtb	r2, r3
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	1c59      	adds	r1, r3, #1
 800613c:	6179      	str	r1, [r7, #20]
 800613e:	43d2      	mvns	r2, r2
 8006140:	b2d1      	uxtb	r1, r2
 8006142:	68fa      	ldr	r2, [r7, #12]
 8006144:	4413      	add	r3, r2
 8006146:	460a      	mov	r2, r1
 8006148:	f883 2824 	strb.w	r2, [r3, #2084]	; 0x824

    if (l <= OUTPUT_SIZE)
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006152:	dc0a      	bgt.n	800616a <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE7publishEiPKNS_3MsgE+0x112>
    {
      hardware_.write(message_out, l);
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	1d18      	adds	r0, r3, #4
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f603 0324 	addw	r3, r3, #2084	; 0x824
 800615e:	697a      	ldr	r2, [r7, #20]
 8006160:	4619      	mov	r1, r3
 8006162:	f7fc f827 	bl	80021b4 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	e005      	b.n	8006176 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE7publishEiPKNS_3MsgE+0x11e>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 800616a:	4905      	ldr	r1, [pc, #20]	; (8006180 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE7publishEiPKNS_3MsgE+0x128>)
 800616c:	68f8      	ldr	r0, [r7, #12]
 800616e:	f000 f849 	bl	8006204 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE8logerrorEPKc>
      return -1;
 8006172:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 8006176:	4618      	mov	r0, r3
 8006178:	3720      	adds	r7, #32
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}
 800617e:	bf00      	nop
 8006180:	0800c0b8 	.word	0x0800c0b8

08006184 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 8006184:	b580      	push	{r7, lr}
 8006186:	b084      	sub	sp, #16
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	3304      	adds	r3, #4
 8006192:	4618      	mov	r0, r3
 8006194:	f7fc f854 	bl	8002240 <_ZN13STM32Hardware4timeEv>
 8006198:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	4915      	ldr	r1, [pc, #84]	; (80061f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE6setNowERKNS_4TimeE+0x74>)
 80061a2:	fba1 1303 	umull	r1, r3, r1, r3
 80061a6:	099b      	lsrs	r3, r3, #6
 80061a8:	1ad3      	subs	r3, r2, r3
 80061aa:	1e5a      	subs	r2, r3, #1
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f8c3 2618 	str.w	r2, [r3, #1560]	; 0x618
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	6859      	ldr	r1, [r3, #4]
 80061b6:	68fa      	ldr	r2, [r7, #12]
 80061b8:	4b0f      	ldr	r3, [pc, #60]	; (80061f8 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE6setNowERKNS_4TimeE+0x74>)
 80061ba:	fba3 0302 	umull	r0, r3, r3, r2
 80061be:	099b      	lsrs	r3, r3, #6
 80061c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80061c4:	fb00 f303 	mul.w	r3, r0, r3
 80061c8:	1ad3      	subs	r3, r2, r3
 80061ca:	4a0c      	ldr	r2, [pc, #48]	; (80061fc <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE6setNowERKNS_4TimeE+0x78>)
 80061cc:	fb02 f303 	mul.w	r3, r2, r3
 80061d0:	1aca      	subs	r2, r1, r3
 80061d2:	4b0b      	ldr	r3, [pc, #44]	; (8006200 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE6setNowERKNS_4TimeE+0x7c>)
 80061d4:	4413      	add	r3, r2
 80061d6:	687a      	ldr	r2, [r7, #4]
 80061d8:	f8c2 361c 	str.w	r3, [r2, #1564]	; 0x61c
    normalizeSecNSec(sec_offset, nsec_offset);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f503 62c3 	add.w	r2, r3, #1560	; 0x618
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f203 631c 	addw	r3, r3, #1564	; 0x61c
 80061e8:	4619      	mov	r1, r3
 80061ea:	4610      	mov	r0, r2
 80061ec:	f7fa fe44 	bl	8000e78 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 80061f0:	bf00      	nop
 80061f2:	3710      	adds	r7, #16
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}
 80061f8:	10624dd3 	.word	0x10624dd3
 80061fc:	000f4240 	.word	0x000f4240
 8006200:	3b9aca00 	.word	0x3b9aca00

08006204 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8006204:	b580      	push	{r7, lr}
 8006206:	b082      	sub	sp, #8
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 800620e:	683a      	ldr	r2, [r7, #0]
 8006210:	2103      	movs	r1, #3
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f000 f804 	bl	8006220 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE3logEcPKc>
  }
 8006218:	bf00      	nop
 800621a:	3708      	adds	r7, #8
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}

08006220 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE3logEcPKc>:
  void log(char byte, const char * msg)
 8006220:	b580      	push	{r7, lr}
 8006222:	b088      	sub	sp, #32
 8006224:	af00      	add	r7, sp, #0
 8006226:	60f8      	str	r0, [r7, #12]
 8006228:	460b      	mov	r3, r1
 800622a:	607a      	str	r2, [r7, #4]
 800622c:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 800622e:	f107 0314 	add.w	r3, r7, #20
 8006232:	4618      	mov	r0, r3
 8006234:	f7fb fb34 	bl	80018a0 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8006238:	7afb      	ldrb	r3, [r7, #11]
 800623a:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f107 0214 	add.w	r2, r7, #20
 800624a:	2107      	movs	r1, #7
 800624c:	68f8      	ldr	r0, [r7, #12]
 800624e:	4798      	blx	r3
  }
 8006250:	bf00      	nop
 8006252:	3720      	adds	r7, #32
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}

08006258 <_Z41__static_initialization_and_destruction_0ii>:
 8006258:	b580      	push	{r7, lr}
 800625a:	b082      	sub	sp, #8
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	6039      	str	r1, [r7, #0]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2b01      	cmp	r3, #1
 8006266:	d12e      	bne.n	80062c6 <_Z41__static_initialization_and_destruction_0ii+0x6e>
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800626e:	4293      	cmp	r3, r2
 8006270:	d129      	bne.n	80062c6 <_Z41__static_initialization_and_destruction_0ii+0x6e>
 nav_msgs::Odometry odom_msg = nav_msgs::Odometry();
 8006272:	4817      	ldr	r0, [pc, #92]	; (80062d0 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8006274:	f7ff f812 	bl	800529c <_ZN8nav_msgs8OdometryC1Ev>
}Enc1_Msg, Enc2_Msg;
 8006278:	4816      	ldr	r0, [pc, #88]	; (80062d4 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800627a:	f7ff f907 	bl	800548c <_ZN7MessageC1Ev>
 800627e:	4816      	ldr	r0, [pc, #88]	; (80062d8 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8006280:	f7ff f904 	bl	800548c <_ZN7MessageC1Ev>
ros::NodeHandle nh;
 8006284:	4815      	ldr	r0, [pc, #84]	; (80062dc <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8006286:	f7ff f923 	bl	80054d0 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EEC1Ev>
ros::Publisher enkoder1_pub("Enkoder1", &Enc1_Msg.int32_msg_pos);
 800628a:	2300      	movs	r3, #0
 800628c:	4a11      	ldr	r2, [pc, #68]	; (80062d4 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 800628e:	4914      	ldr	r1, [pc, #80]	; (80062e0 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8006290:	4814      	ldr	r0, [pc, #80]	; (80062e4 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8006292:	f7fb fe81 	bl	8001f98 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher enkoder2_pub("Enkoder2", &Enc2_Msg.int32_msg_pos);
 8006296:	2300      	movs	r3, #0
 8006298:	4a0f      	ldr	r2, [pc, #60]	; (80062d8 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 800629a:	4913      	ldr	r1, [pc, #76]	; (80062e8 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 800629c:	4813      	ldr	r0, [pc, #76]	; (80062ec <_Z41__static_initialization_and_destruction_0ii+0x94>)
 800629e:	f7fb fe7b 	bl	8001f98 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher enkoder1_vel_pub("Enkoder1_Vel", &Enc1_Msg.int32_msg_vel);
 80062a2:	2300      	movs	r3, #0
 80062a4:	4a12      	ldr	r2, [pc, #72]	; (80062f0 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 80062a6:	4913      	ldr	r1, [pc, #76]	; (80062f4 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 80062a8:	4813      	ldr	r0, [pc, #76]	; (80062f8 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 80062aa:	f7fb fe75 	bl	8001f98 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher enkoder2_vel_pub("Enkoder2_Vel", &Enc2_Msg.int32_msg_vel);
 80062ae:	2300      	movs	r3, #0
 80062b0:	4a12      	ldr	r2, [pc, #72]	; (80062fc <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 80062b2:	4913      	ldr	r1, [pc, #76]	; (8006300 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 80062b4:	4813      	ldr	r0, [pc, #76]	; (8006304 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80062b6:	f7fb fe6f 	bl	8001f98 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher odom_pub("Odometry", &odom_msg);
 80062ba:	2300      	movs	r3, #0
 80062bc:	4a04      	ldr	r2, [pc, #16]	; (80062d0 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 80062be:	4912      	ldr	r1, [pc, #72]	; (8006308 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80062c0:	4812      	ldr	r0, [pc, #72]	; (800630c <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 80062c2:	f7fb fe69 	bl	8001f98 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 80062c6:	bf00      	nop
 80062c8:	3708      	adds	r7, #8
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}
 80062ce:	bf00      	nop
 80062d0:	20000230 	.word	0x20000230
 80062d4:	2000056c 	.word	0x2000056c
 80062d8:	2000057c 	.word	0x2000057c
 80062dc:	2000058c 	.word	0x2000058c
 80062e0:	0800c0f4 	.word	0x0800c0f4
 80062e4:	20002e28 	.word	0x20002e28
 80062e8:	0800c100 	.word	0x0800c100
 80062ec:	20002e3c 	.word	0x20002e3c
 80062f0:	20000574 	.word	0x20000574
 80062f4:	0800c10c 	.word	0x0800c10c
 80062f8:	20002e50 	.word	0x20002e50
 80062fc:	20000584 	.word	0x20000584
 8006300:	0800c11c 	.word	0x0800c11c
 8006304:	20002e64 	.word	0x20002e64
 8006308:	0800c12c 	.word	0x0800c12c
 800630c:	20002e78 	.word	0x20002e78

08006310 <_ZN3ros11NodeHandle_I13STM32HardwareLi5ELi5ELi512ELi8192EE9connectedEv>:
  virtual bool connected() override
 8006310:	b480      	push	{r7}
 8006312:	b083      	sub	sp, #12
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
    return configured_;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800631e:	f893 3860 	ldrb.w	r3, [r3, #2144]	; 0x860
  };
 8006322:	4618      	mov	r0, r3
 8006324:	370c      	adds	r7, #12
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr

0800632e <_GLOBAL__sub_I_odom_msg>:
 800632e:	b580      	push	{r7, lr}
 8006330:	af00      	add	r7, sp, #0
 8006332:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006336:	2001      	movs	r0, #1
 8006338:	f7ff ff8e 	bl	8006258 <_Z41__static_initialization_and_destruction_0ii>
 800633c:	bd80      	pop	{r7, pc}
	...

08006340 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006340:	b480      	push	{r7}
 8006342:	b083      	sub	sp, #12
 8006344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006346:	2300      	movs	r3, #0
 8006348:	607b      	str	r3, [r7, #4]
 800634a:	4b10      	ldr	r3, [pc, #64]	; (800638c <HAL_MspInit+0x4c>)
 800634c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800634e:	4a0f      	ldr	r2, [pc, #60]	; (800638c <HAL_MspInit+0x4c>)
 8006350:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006354:	6453      	str	r3, [r2, #68]	; 0x44
 8006356:	4b0d      	ldr	r3, [pc, #52]	; (800638c <HAL_MspInit+0x4c>)
 8006358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800635a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800635e:	607b      	str	r3, [r7, #4]
 8006360:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006362:	2300      	movs	r3, #0
 8006364:	603b      	str	r3, [r7, #0]
 8006366:	4b09      	ldr	r3, [pc, #36]	; (800638c <HAL_MspInit+0x4c>)
 8006368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800636a:	4a08      	ldr	r2, [pc, #32]	; (800638c <HAL_MspInit+0x4c>)
 800636c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006370:	6413      	str	r3, [r2, #64]	; 0x40
 8006372:	4b06      	ldr	r3, [pc, #24]	; (800638c <HAL_MspInit+0x4c>)
 8006374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800637a:	603b      	str	r3, [r7, #0]
 800637c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800637e:	bf00      	nop
 8006380:	370c      	adds	r7, #12
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr
 800638a:	bf00      	nop
 800638c:	40023800 	.word	0x40023800

08006390 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b08c      	sub	sp, #48	; 0x30
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006398:	f107 031c 	add.w	r3, r7, #28
 800639c:	2200      	movs	r2, #0
 800639e:	601a      	str	r2, [r3, #0]
 80063a0:	605a      	str	r2, [r3, #4]
 80063a2:	609a      	str	r2, [r3, #8]
 80063a4:	60da      	str	r2, [r3, #12]
 80063a6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063b0:	d152      	bne.n	8006458 <HAL_TIM_Encoder_MspInit+0xc8>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80063b2:	2300      	movs	r3, #0
 80063b4:	61bb      	str	r3, [r7, #24]
 80063b6:	4b47      	ldr	r3, [pc, #284]	; (80064d4 <HAL_TIM_Encoder_MspInit+0x144>)
 80063b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ba:	4a46      	ldr	r2, [pc, #280]	; (80064d4 <HAL_TIM_Encoder_MspInit+0x144>)
 80063bc:	f043 0301 	orr.w	r3, r3, #1
 80063c0:	6413      	str	r3, [r2, #64]	; 0x40
 80063c2:	4b44      	ldr	r3, [pc, #272]	; (80064d4 <HAL_TIM_Encoder_MspInit+0x144>)
 80063c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063c6:	f003 0301 	and.w	r3, r3, #1
 80063ca:	61bb      	str	r3, [r7, #24]
 80063cc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80063ce:	2300      	movs	r3, #0
 80063d0:	617b      	str	r3, [r7, #20]
 80063d2:	4b40      	ldr	r3, [pc, #256]	; (80064d4 <HAL_TIM_Encoder_MspInit+0x144>)
 80063d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063d6:	4a3f      	ldr	r2, [pc, #252]	; (80064d4 <HAL_TIM_Encoder_MspInit+0x144>)
 80063d8:	f043 0301 	orr.w	r3, r3, #1
 80063dc:	6313      	str	r3, [r2, #48]	; 0x30
 80063de:	4b3d      	ldr	r3, [pc, #244]	; (80064d4 <HAL_TIM_Encoder_MspInit+0x144>)
 80063e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063e2:	f003 0301 	and.w	r3, r3, #1
 80063e6:	617b      	str	r3, [r7, #20]
 80063e8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80063ea:	2300      	movs	r3, #0
 80063ec:	613b      	str	r3, [r7, #16]
 80063ee:	4b39      	ldr	r3, [pc, #228]	; (80064d4 <HAL_TIM_Encoder_MspInit+0x144>)
 80063f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063f2:	4a38      	ldr	r2, [pc, #224]	; (80064d4 <HAL_TIM_Encoder_MspInit+0x144>)
 80063f4:	f043 0302 	orr.w	r3, r3, #2
 80063f8:	6313      	str	r3, [r2, #48]	; 0x30
 80063fa:	4b36      	ldr	r3, [pc, #216]	; (80064d4 <HAL_TIM_Encoder_MspInit+0x144>)
 80063fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063fe:	f003 0302 	and.w	r3, r3, #2
 8006402:	613b      	str	r3, [r7, #16]
 8006404:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8006406:	2320      	movs	r3, #32
 8006408:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800640a:	2302      	movs	r3, #2
 800640c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800640e:	2301      	movs	r3, #1
 8006410:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006412:	2300      	movs	r3, #0
 8006414:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8006416:	2301      	movs	r3, #1
 8006418:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800641a:	f107 031c 	add.w	r3, r7, #28
 800641e:	4619      	mov	r1, r3
 8006420:	482d      	ldr	r0, [pc, #180]	; (80064d8 <HAL_TIM_Encoder_MspInit+0x148>)
 8006422:	f001 f8e1 	bl	80075e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8006426:	2308      	movs	r3, #8
 8006428:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800642a:	2302      	movs	r3, #2
 800642c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800642e:	2301      	movs	r3, #1
 8006430:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006432:	2300      	movs	r3, #0
 8006434:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8006436:	2301      	movs	r3, #1
 8006438:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800643a:	f107 031c 	add.w	r3, r7, #28
 800643e:	4619      	mov	r1, r3
 8006440:	4826      	ldr	r0, [pc, #152]	; (80064dc <HAL_TIM_Encoder_MspInit+0x14c>)
 8006442:	f001 f8d1 	bl	80075e8 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8006446:	2200      	movs	r2, #0
 8006448:	2100      	movs	r1, #0
 800644a:	201c      	movs	r0, #28
 800644c:	f000 fc93 	bl	8006d76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006450:	201c      	movs	r0, #28
 8006452:	f000 fcac 	bl	8006dae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8006456:	e038      	b.n	80064ca <HAL_TIM_Encoder_MspInit+0x13a>
  else if(htim_encoder->Instance==TIM5)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a20      	ldr	r2, [pc, #128]	; (80064e0 <HAL_TIM_Encoder_MspInit+0x150>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d133      	bne.n	80064ca <HAL_TIM_Encoder_MspInit+0x13a>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8006462:	2300      	movs	r3, #0
 8006464:	60fb      	str	r3, [r7, #12]
 8006466:	4b1b      	ldr	r3, [pc, #108]	; (80064d4 <HAL_TIM_Encoder_MspInit+0x144>)
 8006468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800646a:	4a1a      	ldr	r2, [pc, #104]	; (80064d4 <HAL_TIM_Encoder_MspInit+0x144>)
 800646c:	f043 0308 	orr.w	r3, r3, #8
 8006470:	6413      	str	r3, [r2, #64]	; 0x40
 8006472:	4b18      	ldr	r3, [pc, #96]	; (80064d4 <HAL_TIM_Encoder_MspInit+0x144>)
 8006474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006476:	f003 0308 	and.w	r3, r3, #8
 800647a:	60fb      	str	r3, [r7, #12]
 800647c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800647e:	2300      	movs	r3, #0
 8006480:	60bb      	str	r3, [r7, #8]
 8006482:	4b14      	ldr	r3, [pc, #80]	; (80064d4 <HAL_TIM_Encoder_MspInit+0x144>)
 8006484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006486:	4a13      	ldr	r2, [pc, #76]	; (80064d4 <HAL_TIM_Encoder_MspInit+0x144>)
 8006488:	f043 0301 	orr.w	r3, r3, #1
 800648c:	6313      	str	r3, [r2, #48]	; 0x30
 800648e:	4b11      	ldr	r3, [pc, #68]	; (80064d4 <HAL_TIM_Encoder_MspInit+0x144>)
 8006490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006492:	f003 0301 	and.w	r3, r3, #1
 8006496:	60bb      	str	r3, [r7, #8]
 8006498:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800649a:	2303      	movs	r3, #3
 800649c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800649e:	2302      	movs	r3, #2
 80064a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80064a2:	2301      	movs	r3, #1
 80064a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80064a6:	2300      	movs	r3, #0
 80064a8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80064aa:	2302      	movs	r3, #2
 80064ac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80064ae:	f107 031c 	add.w	r3, r7, #28
 80064b2:	4619      	mov	r1, r3
 80064b4:	4808      	ldr	r0, [pc, #32]	; (80064d8 <HAL_TIM_Encoder_MspInit+0x148>)
 80064b6:	f001 f897 	bl	80075e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80064ba:	2200      	movs	r2, #0
 80064bc:	2100      	movs	r1, #0
 80064be:	2032      	movs	r0, #50	; 0x32
 80064c0:	f000 fc59 	bl	8006d76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80064c4:	2032      	movs	r0, #50	; 0x32
 80064c6:	f000 fc72 	bl	8006dae <HAL_NVIC_EnableIRQ>
}
 80064ca:	bf00      	nop
 80064cc:	3730      	adds	r7, #48	; 0x30
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bd80      	pop	{r7, pc}
 80064d2:	bf00      	nop
 80064d4:	40023800 	.word	0x40023800
 80064d8:	40020000 	.word	0x40020000
 80064dc:	40020400 	.word	0x40020400
 80064e0:	40000c00 	.word	0x40000c00

080064e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b08a      	sub	sp, #40	; 0x28
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80064ec:	f107 0314 	add.w	r3, r7, #20
 80064f0:	2200      	movs	r2, #0
 80064f2:	601a      	str	r2, [r3, #0]
 80064f4:	605a      	str	r2, [r3, #4]
 80064f6:	609a      	str	r2, [r3, #8]
 80064f8:	60da      	str	r2, [r3, #12]
 80064fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a4d      	ldr	r2, [pc, #308]	; (8006638 <HAL_UART_MspInit+0x154>)
 8006502:	4293      	cmp	r3, r2
 8006504:	f040 8093 	bne.w	800662e <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8006508:	2300      	movs	r3, #0
 800650a:	613b      	str	r3, [r7, #16]
 800650c:	4b4b      	ldr	r3, [pc, #300]	; (800663c <HAL_UART_MspInit+0x158>)
 800650e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006510:	4a4a      	ldr	r2, [pc, #296]	; (800663c <HAL_UART_MspInit+0x158>)
 8006512:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006516:	6413      	str	r3, [r2, #64]	; 0x40
 8006518:	4b48      	ldr	r3, [pc, #288]	; (800663c <HAL_UART_MspInit+0x158>)
 800651a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800651c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006520:	613b      	str	r3, [r7, #16]
 8006522:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006524:	2300      	movs	r3, #0
 8006526:	60fb      	str	r3, [r7, #12]
 8006528:	4b44      	ldr	r3, [pc, #272]	; (800663c <HAL_UART_MspInit+0x158>)
 800652a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800652c:	4a43      	ldr	r2, [pc, #268]	; (800663c <HAL_UART_MspInit+0x158>)
 800652e:	f043 0304 	orr.w	r3, r3, #4
 8006532:	6313      	str	r3, [r2, #48]	; 0x30
 8006534:	4b41      	ldr	r3, [pc, #260]	; (800663c <HAL_UART_MspInit+0x158>)
 8006536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006538:	f003 0304 	and.w	r3, r3, #4
 800653c:	60fb      	str	r3, [r7, #12]
 800653e:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8006540:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006544:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006546:	2302      	movs	r3, #2
 8006548:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800654a:	2301      	movs	r3, #1
 800654c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800654e:	2303      	movs	r3, #3
 8006550:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8006552:	2308      	movs	r3, #8
 8006554:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006556:	f107 0314 	add.w	r3, r7, #20
 800655a:	4619      	mov	r1, r3
 800655c:	4838      	ldr	r0, [pc, #224]	; (8006640 <HAL_UART_MspInit+0x15c>)
 800655e:	f001 f843 	bl	80075e8 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8006562:	4b38      	ldr	r3, [pc, #224]	; (8006644 <HAL_UART_MspInit+0x160>)
 8006564:	4a38      	ldr	r2, [pc, #224]	; (8006648 <HAL_UART_MspInit+0x164>)
 8006566:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8006568:	4b36      	ldr	r3, [pc, #216]	; (8006644 <HAL_UART_MspInit+0x160>)
 800656a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800656e:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006570:	4b34      	ldr	r3, [pc, #208]	; (8006644 <HAL_UART_MspInit+0x160>)
 8006572:	2200      	movs	r2, #0
 8006574:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006576:	4b33      	ldr	r3, [pc, #204]	; (8006644 <HAL_UART_MspInit+0x160>)
 8006578:	2200      	movs	r2, #0
 800657a:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800657c:	4b31      	ldr	r3, [pc, #196]	; (8006644 <HAL_UART_MspInit+0x160>)
 800657e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006582:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006584:	4b2f      	ldr	r3, [pc, #188]	; (8006644 <HAL_UART_MspInit+0x160>)
 8006586:	2200      	movs	r2, #0
 8006588:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800658a:	4b2e      	ldr	r3, [pc, #184]	; (8006644 <HAL_UART_MspInit+0x160>)
 800658c:	2200      	movs	r2, #0
 800658e:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8006590:	4b2c      	ldr	r3, [pc, #176]	; (8006644 <HAL_UART_MspInit+0x160>)
 8006592:	2200      	movs	r2, #0
 8006594:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8006596:	4b2b      	ldr	r3, [pc, #172]	; (8006644 <HAL_UART_MspInit+0x160>)
 8006598:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800659c:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800659e:	4b29      	ldr	r3, [pc, #164]	; (8006644 <HAL_UART_MspInit+0x160>)
 80065a0:	2200      	movs	r2, #0
 80065a2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80065a4:	4827      	ldr	r0, [pc, #156]	; (8006644 <HAL_UART_MspInit+0x160>)
 80065a6:	f000 fc1d 	bl	8006de4 <HAL_DMA_Init>
 80065aa:	4603      	mov	r3, r0
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d001      	beq.n	80065b4 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 80065b0:	f7fa fe7c 	bl	80012ac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	4a23      	ldr	r2, [pc, #140]	; (8006644 <HAL_UART_MspInit+0x160>)
 80065b8:	639a      	str	r2, [r3, #56]	; 0x38
 80065ba:	4a22      	ldr	r2, [pc, #136]	; (8006644 <HAL_UART_MspInit+0x160>)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 80065c0:	4b22      	ldr	r3, [pc, #136]	; (800664c <HAL_UART_MspInit+0x168>)
 80065c2:	4a23      	ldr	r2, [pc, #140]	; (8006650 <HAL_UART_MspInit+0x16c>)
 80065c4:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 80065c6:	4b21      	ldr	r3, [pc, #132]	; (800664c <HAL_UART_MspInit+0x168>)
 80065c8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80065cc:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80065ce:	4b1f      	ldr	r3, [pc, #124]	; (800664c <HAL_UART_MspInit+0x168>)
 80065d0:	2240      	movs	r2, #64	; 0x40
 80065d2:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80065d4:	4b1d      	ldr	r3, [pc, #116]	; (800664c <HAL_UART_MspInit+0x168>)
 80065d6:	2200      	movs	r2, #0
 80065d8:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80065da:	4b1c      	ldr	r3, [pc, #112]	; (800664c <HAL_UART_MspInit+0x168>)
 80065dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80065e0:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80065e2:	4b1a      	ldr	r3, [pc, #104]	; (800664c <HAL_UART_MspInit+0x168>)
 80065e4:	2200      	movs	r2, #0
 80065e6:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80065e8:	4b18      	ldr	r3, [pc, #96]	; (800664c <HAL_UART_MspInit+0x168>)
 80065ea:	2200      	movs	r2, #0
 80065ec:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 80065ee:	4b17      	ldr	r3, [pc, #92]	; (800664c <HAL_UART_MspInit+0x168>)
 80065f0:	2200      	movs	r2, #0
 80065f2:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80065f4:	4b15      	ldr	r3, [pc, #84]	; (800664c <HAL_UART_MspInit+0x168>)
 80065f6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80065fa:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80065fc:	4b13      	ldr	r3, [pc, #76]	; (800664c <HAL_UART_MspInit+0x168>)
 80065fe:	2200      	movs	r2, #0
 8006600:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8006602:	4812      	ldr	r0, [pc, #72]	; (800664c <HAL_UART_MspInit+0x168>)
 8006604:	f000 fbee 	bl	8006de4 <HAL_DMA_Init>
 8006608:	4603      	mov	r3, r0
 800660a:	2b00      	cmp	r3, #0
 800660c:	d001      	beq.n	8006612 <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 800660e:	f7fa fe4d 	bl	80012ac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	4a0d      	ldr	r2, [pc, #52]	; (800664c <HAL_UART_MspInit+0x168>)
 8006616:	635a      	str	r2, [r3, #52]	; 0x34
 8006618:	4a0c      	ldr	r2, [pc, #48]	; (800664c <HAL_UART_MspInit+0x168>)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800661e:	2200      	movs	r2, #0
 8006620:	2100      	movs	r1, #0
 8006622:	2034      	movs	r0, #52	; 0x34
 8006624:	f000 fba7 	bl	8006d76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8006628:	2034      	movs	r0, #52	; 0x34
 800662a:	f000 fbc0 	bl	8006dae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 800662e:	bf00      	nop
 8006630:	3728      	adds	r7, #40	; 0x28
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}
 8006636:	bf00      	nop
 8006638:	40004c00 	.word	0x40004c00
 800663c:	40023800 	.word	0x40023800
 8006640:	40020800 	.word	0x40020800
 8006644:	20000168 	.word	0x20000168
 8006648:	40026040 	.word	0x40026040
 800664c:	200001c8 	.word	0x200001c8
 8006650:	40026070 	.word	0x40026070

08006654 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006654:	b480      	push	{r7}
 8006656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006658:	e7fe      	b.n	8006658 <NMI_Handler+0x4>

0800665a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800665a:	b480      	push	{r7}
 800665c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800665e:	e7fe      	b.n	800665e <HardFault_Handler+0x4>

08006660 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006660:	b480      	push	{r7}
 8006662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006664:	e7fe      	b.n	8006664 <MemManage_Handler+0x4>

08006666 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006666:	b480      	push	{r7}
 8006668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800666a:	e7fe      	b.n	800666a <BusFault_Handler+0x4>

0800666c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800666c:	b480      	push	{r7}
 800666e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006670:	e7fe      	b.n	8006670 <UsageFault_Handler+0x4>

08006672 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006672:	b480      	push	{r7}
 8006674:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006676:	bf00      	nop
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr

08006680 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006680:	b480      	push	{r7}
 8006682:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006684:	bf00      	nop
 8006686:	46bd      	mov	sp, r7
 8006688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668c:	4770      	bx	lr

0800668e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800668e:	b480      	push	{r7}
 8006690:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006692:	bf00      	nop
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr
 800669c:	0000      	movs	r0, r0
	...

080066a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80066a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80066a4:	b08a      	sub	sp, #40	; 0x28
 80066a6:	af00      	add	r7, sp, #0
	if(indx == period){
		speed = (position - oldpos)*1000/(period); //ms to s
		oldpos = position;
		indx = 0;
	}*/
	int period_calc = 20;
 80066a8:	2314      	movs	r3, #20
 80066aa:	627b      	str	r3, [r7, #36]	; 0x24
	int period_pub = 100;
 80066ac:	2364      	movs	r3, #100	; 0x64
 80066ae:	623b      	str	r3, [r7, #32]
	indx++;
 80066b0:	4b8b      	ldr	r3, [pc, #556]	; (80068e0 <SysTick_Handler+0x240>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	3301      	adds	r3, #1
 80066b6:	4a8a      	ldr	r2, [pc, #552]	; (80068e0 <SysTick_Handler+0x240>)
 80066b8:	6013      	str	r3, [r2, #0]
	indy++;
 80066ba:	4b8a      	ldr	r3, [pc, #552]	; (80068e4 <SysTick_Handler+0x244>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	3301      	adds	r3, #1
 80066c0:	4a88      	ldr	r2, [pc, #544]	; (80068e4 <SysTick_Handler+0x244>)
 80066c2:	6013      	str	r3, [r2, #0]
	if(indx == period_calc){
 80066c4:	4b86      	ldr	r3, [pc, #536]	; (80068e0 <SysTick_Handler+0x240>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066ca:	429a      	cmp	r2, r3
 80066cc:	f040 80f2 	bne.w	80068b4 <SysTick_Handler+0x214>
		float dpc_left = CEVRE/2100.0f;
 80066d0:	4b85      	ldr	r3, [pc, #532]	; (80068e8 <SysTick_Handler+0x248>)
 80066d2:	61fb      	str	r3, [r7, #28]
		float dpc_right = CEVRE/2700.0f;
 80066d4:	4b85      	ldr	r3, [pc, #532]	; (80068ec <SysTick_Handler+0x24c>)
 80066d6:	61bb      	str	r3, [r7, #24]
		float dt = (period_calc) / 1000.0f;
 80066d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066da:	ee07 3a90 	vmov	s15, r3
 80066de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80066e2:	eddf 6a83 	vldr	s13, [pc, #524]	; 80068f0 <SysTick_Handler+0x250>
 80066e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80066ea:	edc7 7a05 	vstr	s15, [r7, #20]
		float left_encoder_pulse = Encoder1.position - prev_Enc1_pos;
 80066ee:	4b81      	ldr	r3, [pc, #516]	; (80068f4 <SysTick_Handler+0x254>)
 80066f0:	689a      	ldr	r2, [r3, #8]
 80066f2:	4b81      	ldr	r3, [pc, #516]	; (80068f8 <SysTick_Handler+0x258>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	1ad3      	subs	r3, r2, r3
 80066f8:	ee07 3a90 	vmov	s15, r3
 80066fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006700:	edc7 7a04 	vstr	s15, [r7, #16]
		float right_encoder_pulse = Encoder2.position - prev_Enc2_pos;
 8006704:	4b7d      	ldr	r3, [pc, #500]	; (80068fc <SysTick_Handler+0x25c>)
 8006706:	689a      	ldr	r2, [r3, #8]
 8006708:	4b7d      	ldr	r3, [pc, #500]	; (8006900 <SysTick_Handler+0x260>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	1ad3      	subs	r3, r2, r3
 800670e:	ee07 3a90 	vmov	s15, r3
 8006712:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006716:	edc7 7a03 	vstr	s15, [r7, #12]
		float left_velocity = (left_encoder_pulse * dpc_left) / dt;
 800671a:	ed97 7a04 	vldr	s14, [r7, #16]
 800671e:	edd7 7a07 	vldr	s15, [r7, #28]
 8006722:	ee67 6a27 	vmul.f32	s13, s14, s15
 8006726:	ed97 7a05 	vldr	s14, [r7, #20]
 800672a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800672e:	edc7 7a02 	vstr	s15, [r7, #8]
		float right_velocity = (right_encoder_pulse * dpc_right) / dt;
 8006732:	ed97 7a03 	vldr	s14, [r7, #12]
 8006736:	edd7 7a06 	vldr	s15, [r7, #24]
 800673a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800673e:	ed97 7a05 	vldr	s14, [r7, #20]
 8006742:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006746:	edc7 7a01 	vstr	s15, [r7, #4]

		theOdom.linear_velocity = (left_velocity + right_velocity) / 2;
 800674a:	ed97 7a02 	vldr	s14, [r7, #8]
 800674e:	edd7 7a01 	vldr	s15, [r7, #4]
 8006752:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006756:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800675a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800675e:	4b69      	ldr	r3, [pc, #420]	; (8006904 <SysTick_Handler+0x264>)
 8006760:	edc3 7a03 	vstr	s15, [r3, #12]
		theOdom.angular_velocity = (right_velocity - left_velocity) / TRACK;
 8006764:	ed97 7a01 	vldr	s14, [r7, #4]
 8006768:	edd7 7a02 	vldr	s15, [r7, #8]
 800676c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006770:	ee17 0a90 	vmov	r0, s15
 8006774:	f7f9 fe94 	bl	80004a0 <__aeabi_f2d>
 8006778:	a357      	add	r3, pc, #348	; (adr r3, 80068d8 <SysTick_Handler+0x238>)
 800677a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800677e:	f7fa f811 	bl	80007a4 <__aeabi_ddiv>
 8006782:	4602      	mov	r2, r0
 8006784:	460b      	mov	r3, r1
 8006786:	4610      	mov	r0, r2
 8006788:	4619      	mov	r1, r3
 800678a:	f7fa f9a3 	bl	8000ad4 <__aeabi_d2f>
 800678e:	4603      	mov	r3, r0
 8006790:	4a5c      	ldr	r2, [pc, #368]	; (8006904 <SysTick_Handler+0x264>)
 8006792:	6113      	str	r3, [r2, #16]

		theOdom.x += theOdom.linear_velocity * cos(theOdom.theta) * dt;
 8006794:	4b5b      	ldr	r3, [pc, #364]	; (8006904 <SysTick_Handler+0x264>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4618      	mov	r0, r3
 800679a:	f7f9 fe81 	bl	80004a0 <__aeabi_f2d>
 800679e:	4604      	mov	r4, r0
 80067a0:	460d      	mov	r5, r1
 80067a2:	4b58      	ldr	r3, [pc, #352]	; (8006904 <SysTick_Handler+0x264>)
 80067a4:	68db      	ldr	r3, [r3, #12]
 80067a6:	4618      	mov	r0, r3
 80067a8:	f7f9 fe7a 	bl	80004a0 <__aeabi_f2d>
 80067ac:	4680      	mov	r8, r0
 80067ae:	4689      	mov	r9, r1
 80067b0:	4b54      	ldr	r3, [pc, #336]	; (8006904 <SysTick_Handler+0x264>)
 80067b2:	689b      	ldr	r3, [r3, #8]
 80067b4:	4618      	mov	r0, r3
 80067b6:	f7f9 fe73 	bl	80004a0 <__aeabi_f2d>
 80067ba:	4602      	mov	r2, r0
 80067bc:	460b      	mov	r3, r1
 80067be:	ec43 2b10 	vmov	d0, r2, r3
 80067c2:	f003 fad1 	bl	8009d68 <cos>
 80067c6:	ec53 2b10 	vmov	r2, r3, d0
 80067ca:	4640      	mov	r0, r8
 80067cc:	4649      	mov	r1, r9
 80067ce:	f7f9 febf 	bl	8000550 <__aeabi_dmul>
 80067d2:	4602      	mov	r2, r0
 80067d4:	460b      	mov	r3, r1
 80067d6:	4690      	mov	r8, r2
 80067d8:	4699      	mov	r9, r3
 80067da:	6978      	ldr	r0, [r7, #20]
 80067dc:	f7f9 fe60 	bl	80004a0 <__aeabi_f2d>
 80067e0:	4602      	mov	r2, r0
 80067e2:	460b      	mov	r3, r1
 80067e4:	4640      	mov	r0, r8
 80067e6:	4649      	mov	r1, r9
 80067e8:	f7f9 feb2 	bl	8000550 <__aeabi_dmul>
 80067ec:	4602      	mov	r2, r0
 80067ee:	460b      	mov	r3, r1
 80067f0:	4620      	mov	r0, r4
 80067f2:	4629      	mov	r1, r5
 80067f4:	f7f9 fcf6 	bl	80001e4 <__adddf3>
 80067f8:	4602      	mov	r2, r0
 80067fa:	460b      	mov	r3, r1
 80067fc:	4610      	mov	r0, r2
 80067fe:	4619      	mov	r1, r3
 8006800:	f7fa f968 	bl	8000ad4 <__aeabi_d2f>
 8006804:	4603      	mov	r3, r0
 8006806:	4a3f      	ldr	r2, [pc, #252]	; (8006904 <SysTick_Handler+0x264>)
 8006808:	6013      	str	r3, [r2, #0]
		theOdom.y += theOdom.linear_velocity * sin(theOdom.theta) * dt;
 800680a:	4b3e      	ldr	r3, [pc, #248]	; (8006904 <SysTick_Handler+0x264>)
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	4618      	mov	r0, r3
 8006810:	f7f9 fe46 	bl	80004a0 <__aeabi_f2d>
 8006814:	4604      	mov	r4, r0
 8006816:	460d      	mov	r5, r1
 8006818:	4b3a      	ldr	r3, [pc, #232]	; (8006904 <SysTick_Handler+0x264>)
 800681a:	68db      	ldr	r3, [r3, #12]
 800681c:	4618      	mov	r0, r3
 800681e:	f7f9 fe3f 	bl	80004a0 <__aeabi_f2d>
 8006822:	4680      	mov	r8, r0
 8006824:	4689      	mov	r9, r1
 8006826:	4b37      	ldr	r3, [pc, #220]	; (8006904 <SysTick_Handler+0x264>)
 8006828:	689b      	ldr	r3, [r3, #8]
 800682a:	4618      	mov	r0, r3
 800682c:	f7f9 fe38 	bl	80004a0 <__aeabi_f2d>
 8006830:	4602      	mov	r2, r0
 8006832:	460b      	mov	r3, r1
 8006834:	ec43 2b10 	vmov	d0, r2, r3
 8006838:	f003 faea 	bl	8009e10 <sin>
 800683c:	ec53 2b10 	vmov	r2, r3, d0
 8006840:	4640      	mov	r0, r8
 8006842:	4649      	mov	r1, r9
 8006844:	f7f9 fe84 	bl	8000550 <__aeabi_dmul>
 8006848:	4602      	mov	r2, r0
 800684a:	460b      	mov	r3, r1
 800684c:	4690      	mov	r8, r2
 800684e:	4699      	mov	r9, r3
 8006850:	6978      	ldr	r0, [r7, #20]
 8006852:	f7f9 fe25 	bl	80004a0 <__aeabi_f2d>
 8006856:	4602      	mov	r2, r0
 8006858:	460b      	mov	r3, r1
 800685a:	4640      	mov	r0, r8
 800685c:	4649      	mov	r1, r9
 800685e:	f7f9 fe77 	bl	8000550 <__aeabi_dmul>
 8006862:	4602      	mov	r2, r0
 8006864:	460b      	mov	r3, r1
 8006866:	4620      	mov	r0, r4
 8006868:	4629      	mov	r1, r5
 800686a:	f7f9 fcbb 	bl	80001e4 <__adddf3>
 800686e:	4602      	mov	r2, r0
 8006870:	460b      	mov	r3, r1
 8006872:	4610      	mov	r0, r2
 8006874:	4619      	mov	r1, r3
 8006876:	f7fa f92d 	bl	8000ad4 <__aeabi_d2f>
 800687a:	4603      	mov	r3, r0
 800687c:	4a21      	ldr	r2, [pc, #132]	; (8006904 <SysTick_Handler+0x264>)
 800687e:	6053      	str	r3, [r2, #4]
		theOdom.theta += theOdom.angular_velocity * dt;
 8006880:	4b20      	ldr	r3, [pc, #128]	; (8006904 <SysTick_Handler+0x264>)
 8006882:	ed93 7a02 	vldr	s14, [r3, #8]
 8006886:	4b1f      	ldr	r3, [pc, #124]	; (8006904 <SysTick_Handler+0x264>)
 8006888:	edd3 6a04 	vldr	s13, [r3, #16]
 800688c:	edd7 7a05 	vldr	s15, [r7, #20]
 8006890:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8006894:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006898:	4b1a      	ldr	r3, [pc, #104]	; (8006904 <SysTick_Handler+0x264>)
 800689a:	edc3 7a02 	vstr	s15, [r3, #8]

		prev_Enc1_pos = Encoder1.position;
 800689e:	4b15      	ldr	r3, [pc, #84]	; (80068f4 <SysTick_Handler+0x254>)
 80068a0:	689b      	ldr	r3, [r3, #8]
 80068a2:	4a15      	ldr	r2, [pc, #84]	; (80068f8 <SysTick_Handler+0x258>)
 80068a4:	6013      	str	r3, [r2, #0]
		prev_Enc2_pos = Encoder2.position;
 80068a6:	4b15      	ldr	r3, [pc, #84]	; (80068fc <SysTick_Handler+0x25c>)
 80068a8:	689b      	ldr	r3, [r3, #8]
 80068aa:	4a15      	ldr	r2, [pc, #84]	; (8006900 <SysTick_Handler+0x260>)
 80068ac:	6013      	str	r3, [r2, #0]
		indx = 0;
 80068ae:	4b0c      	ldr	r3, [pc, #48]	; (80068e0 <SysTick_Handler+0x240>)
 80068b0:	2200      	movs	r2, #0
 80068b2:	601a      	str	r2, [r3, #0]
	}
	if(indy == period_pub){
 80068b4:	4b0b      	ldr	r3, [pc, #44]	; (80068e4 <SysTick_Handler+0x244>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	6a3a      	ldr	r2, [r7, #32]
 80068ba:	429a      	cmp	r2, r3
 80068bc:	d105      	bne.n	80068ca <SysTick_Handler+0x22a>
		Odom_Publish(&theOdom);
 80068be:	4811      	ldr	r0, [pc, #68]	; (8006904 <SysTick_Handler+0x264>)
 80068c0:	f7fe fea0 	bl	8005604 <Odom_Publish>
		indy = 0;
 80068c4:	4b07      	ldr	r3, [pc, #28]	; (80068e4 <SysTick_Handler+0x244>)
 80068c6:	2200      	movs	r2, #0
 80068c8:	601a      	str	r2, [r3, #0]
		indx = 0;
	}
	*/

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80068ca:	f000 f935 	bl	8006b38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80068ce:	bf00      	nop
 80068d0:	3728      	adds	r7, #40	; 0x28
 80068d2:	46bd      	mov	sp, r7
 80068d4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80068d8:	d70a3d71 	.word	0xd70a3d71
 80068dc:	3ff170a3 	.word	0x3ff170a3
 80068e0:	20002e8c 	.word	0x20002e8c
 80068e4:	20002e90 	.word	0x20002e90
 80068e8:	3a371036 	.word	0x3a371036
 80068ec:	3a0e61f1 	.word	0x3a0e61f1
 80068f0:	447a0000 	.word	0x447a0000
 80068f4:	20000538 	.word	0x20000538
 80068f8:	20002e94 	.word	0x20002e94
 80068fc:	20000548 	.word	0x20000548
 8006900:	20002e98 	.word	0x20002e98
 8006904:	20000558 	.word	0x20000558

08006908 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 800690c:	4802      	ldr	r0, [pc, #8]	; (8006918 <DMA1_Stream2_IRQHandler+0x10>)
 800690e:	f000 fc01 	bl	8007114 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8006912:	bf00      	nop
 8006914:	bd80      	pop	{r7, pc}
 8006916:	bf00      	nop
 8006918:	20000168 	.word	0x20000168

0800691c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8006920:	4802      	ldr	r0, [pc, #8]	; (800692c <DMA1_Stream4_IRQHandler+0x10>)
 8006922:	f000 fbf7 	bl	8007114 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8006926:	bf00      	nop
 8006928:	bd80      	pop	{r7, pc}
 800692a:	bf00      	nop
 800692c:	200001c8 	.word	0x200001c8

08006930 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8006934:	4802      	ldr	r0, [pc, #8]	; (8006940 <TIM2_IRQHandler+0x10>)
 8006936:	f001 fd9f 	bl	8008478 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800693a:	bf00      	nop
 800693c:	bd80      	pop	{r7, pc}
 800693e:	bf00      	nop
 8006940:	20000094 	.word	0x20000094

08006944 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8006948:	4802      	ldr	r0, [pc, #8]	; (8006954 <TIM5_IRQHandler+0x10>)
 800694a:	f001 fd95 	bl	8008478 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800694e:	bf00      	nop
 8006950:	bd80      	pop	{r7, pc}
 8006952:	bf00      	nop
 8006954:	200000dc 	.word	0x200000dc

08006958 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800695c:	4802      	ldr	r0, [pc, #8]	; (8006968 <UART4_IRQHandler+0x10>)
 800695e:	f002 f90d 	bl	8008b7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8006962:	bf00      	nop
 8006964:	bd80      	pop	{r7, pc}
 8006966:	bf00      	nop
 8006968:	20000124 	.word	0x20000124

0800696c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800696c:	b480      	push	{r7}
 800696e:	af00      	add	r7, sp, #0
	return 1;
 8006970:	2301      	movs	r3, #1
}
 8006972:	4618      	mov	r0, r3
 8006974:	46bd      	mov	sp, r7
 8006976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697a:	4770      	bx	lr

0800697c <_kill>:

int _kill(int pid, int sig)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b082      	sub	sp, #8
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8006986:	f005 f839 	bl	800b9fc <__errno>
 800698a:	4603      	mov	r3, r0
 800698c:	2216      	movs	r2, #22
 800698e:	601a      	str	r2, [r3, #0]
	return -1;
 8006990:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8006994:	4618      	mov	r0, r3
 8006996:	3708      	adds	r7, #8
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}

0800699c <_exit>:

void _exit (int status)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b082      	sub	sp, #8
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80069a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f7ff ffe7 	bl	800697c <_kill>
	while (1) {}		/* Make sure we hang here */
 80069ae:	e7fe      	b.n	80069ae <_exit+0x12>

080069b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b086      	sub	sp, #24
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80069b8:	4a14      	ldr	r2, [pc, #80]	; (8006a0c <_sbrk+0x5c>)
 80069ba:	4b15      	ldr	r3, [pc, #84]	; (8006a10 <_sbrk+0x60>)
 80069bc:	1ad3      	subs	r3, r2, r3
 80069be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80069c4:	4b13      	ldr	r3, [pc, #76]	; (8006a14 <_sbrk+0x64>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d102      	bne.n	80069d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80069cc:	4b11      	ldr	r3, [pc, #68]	; (8006a14 <_sbrk+0x64>)
 80069ce:	4a12      	ldr	r2, [pc, #72]	; (8006a18 <_sbrk+0x68>)
 80069d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80069d2:	4b10      	ldr	r3, [pc, #64]	; (8006a14 <_sbrk+0x64>)
 80069d4:	681a      	ldr	r2, [r3, #0]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	4413      	add	r3, r2
 80069da:	693a      	ldr	r2, [r7, #16]
 80069dc:	429a      	cmp	r2, r3
 80069de:	d207      	bcs.n	80069f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80069e0:	f005 f80c 	bl	800b9fc <__errno>
 80069e4:	4603      	mov	r3, r0
 80069e6:	220c      	movs	r2, #12
 80069e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80069ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80069ee:	e009      	b.n	8006a04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80069f0:	4b08      	ldr	r3, [pc, #32]	; (8006a14 <_sbrk+0x64>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80069f6:	4b07      	ldr	r3, [pc, #28]	; (8006a14 <_sbrk+0x64>)
 80069f8:	681a      	ldr	r2, [r3, #0]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	4413      	add	r3, r2
 80069fe:	4a05      	ldr	r2, [pc, #20]	; (8006a14 <_sbrk+0x64>)
 8006a00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006a02:	68fb      	ldr	r3, [r7, #12]
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	3718      	adds	r7, #24
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}
 8006a0c:	20020000 	.word	0x20020000
 8006a10:	00000400 	.word	0x00000400
 8006a14:	20002e9c 	.word	0x20002e9c
 8006a18:	20002eb8 	.word	0x20002eb8

08006a1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006a20:	4b06      	ldr	r3, [pc, #24]	; (8006a3c <SystemInit+0x20>)
 8006a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a26:	4a05      	ldr	r2, [pc, #20]	; (8006a3c <SystemInit+0x20>)
 8006a28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006a2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006a30:	bf00      	nop
 8006a32:	46bd      	mov	sp, r7
 8006a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a38:	4770      	bx	lr
 8006a3a:	bf00      	nop
 8006a3c:	e000ed00 	.word	0xe000ed00

08006a40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006a40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006a78 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006a44:	480d      	ldr	r0, [pc, #52]	; (8006a7c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006a46:	490e      	ldr	r1, [pc, #56]	; (8006a80 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006a48:	4a0e      	ldr	r2, [pc, #56]	; (8006a84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006a4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006a4c:	e002      	b.n	8006a54 <LoopCopyDataInit>

08006a4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006a4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006a50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006a52:	3304      	adds	r3, #4

08006a54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006a54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006a56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006a58:	d3f9      	bcc.n	8006a4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006a5a:	4a0b      	ldr	r2, [pc, #44]	; (8006a88 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006a5c:	4c0b      	ldr	r4, [pc, #44]	; (8006a8c <LoopFillZerobss+0x26>)
  movs r3, #0
 8006a5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006a60:	e001      	b.n	8006a66 <LoopFillZerobss>

08006a62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006a62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006a64:	3204      	adds	r2, #4

08006a66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006a66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006a68:	d3fb      	bcc.n	8006a62 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8006a6a:	f7ff ffd7 	bl	8006a1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006a6e:	f004 ffcb 	bl	800ba08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006a72:	f7fa fa6b 	bl	8000f4c <main>
  bx  lr    
 8006a76:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006a78:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006a7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006a80:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8006a84:	0800c8c4 	.word	0x0800c8c4
  ldr r2, =_sbss
 8006a88:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8006a8c:	20002eb4 	.word	0x20002eb4

08006a90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006a90:	e7fe      	b.n	8006a90 <ADC_IRQHandler>
	...

08006a94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006a98:	4b0e      	ldr	r3, [pc, #56]	; (8006ad4 <HAL_Init+0x40>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a0d      	ldr	r2, [pc, #52]	; (8006ad4 <HAL_Init+0x40>)
 8006a9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006aa2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006aa4:	4b0b      	ldr	r3, [pc, #44]	; (8006ad4 <HAL_Init+0x40>)
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a0a      	ldr	r2, [pc, #40]	; (8006ad4 <HAL_Init+0x40>)
 8006aaa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006aae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006ab0:	4b08      	ldr	r3, [pc, #32]	; (8006ad4 <HAL_Init+0x40>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a07      	ldr	r2, [pc, #28]	; (8006ad4 <HAL_Init+0x40>)
 8006ab6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006aba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006abc:	2003      	movs	r0, #3
 8006abe:	f000 f94f 	bl	8006d60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006ac2:	200f      	movs	r0, #15
 8006ac4:	f000 f808 	bl	8006ad8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006ac8:	f7ff fc3a 	bl	8006340 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006acc:	2300      	movs	r3, #0
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	bd80      	pop	{r7, pc}
 8006ad2:	bf00      	nop
 8006ad4:	40023c00 	.word	0x40023c00

08006ad8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b082      	sub	sp, #8
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006ae0:	4b12      	ldr	r3, [pc, #72]	; (8006b2c <HAL_InitTick+0x54>)
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	4b12      	ldr	r3, [pc, #72]	; (8006b30 <HAL_InitTick+0x58>)
 8006ae6:	781b      	ldrb	r3, [r3, #0]
 8006ae8:	4619      	mov	r1, r3
 8006aea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006aee:	fbb3 f3f1 	udiv	r3, r3, r1
 8006af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006af6:	4618      	mov	r0, r3
 8006af8:	f000 f967 	bl	8006dca <HAL_SYSTICK_Config>
 8006afc:	4603      	mov	r3, r0
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d001      	beq.n	8006b06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006b02:	2301      	movs	r3, #1
 8006b04:	e00e      	b.n	8006b24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2b0f      	cmp	r3, #15
 8006b0a:	d80a      	bhi.n	8006b22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	6879      	ldr	r1, [r7, #4]
 8006b10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b14:	f000 f92f 	bl	8006d76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006b18:	4a06      	ldr	r2, [pc, #24]	; (8006b34 <HAL_InitTick+0x5c>)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	e000      	b.n	8006b24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006b22:	2301      	movs	r3, #1
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3708      	adds	r7, #8
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}
 8006b2c:	20000000 	.word	0x20000000
 8006b30:	20000008 	.word	0x20000008
 8006b34:	20000004 	.word	0x20000004

08006b38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006b3c:	4b06      	ldr	r3, [pc, #24]	; (8006b58 <HAL_IncTick+0x20>)
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	461a      	mov	r2, r3
 8006b42:	4b06      	ldr	r3, [pc, #24]	; (8006b5c <HAL_IncTick+0x24>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4413      	add	r3, r2
 8006b48:	4a04      	ldr	r2, [pc, #16]	; (8006b5c <HAL_IncTick+0x24>)
 8006b4a:	6013      	str	r3, [r2, #0]
}
 8006b4c:	bf00      	nop
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b54:	4770      	bx	lr
 8006b56:	bf00      	nop
 8006b58:	20000008 	.word	0x20000008
 8006b5c:	20002ea0 	.word	0x20002ea0

08006b60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006b60:	b480      	push	{r7}
 8006b62:	af00      	add	r7, sp, #0
  return uwTick;
 8006b64:	4b03      	ldr	r3, [pc, #12]	; (8006b74 <HAL_GetTick+0x14>)
 8006b66:	681b      	ldr	r3, [r3, #0]
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b70:	4770      	bx	lr
 8006b72:	bf00      	nop
 8006b74:	20002ea0 	.word	0x20002ea0

08006b78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b084      	sub	sp, #16
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006b80:	f7ff ffee 	bl	8006b60 <HAL_GetTick>
 8006b84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b90:	d005      	beq.n	8006b9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006b92:	4b0a      	ldr	r3, [pc, #40]	; (8006bbc <HAL_Delay+0x44>)
 8006b94:	781b      	ldrb	r3, [r3, #0]
 8006b96:	461a      	mov	r2, r3
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	4413      	add	r3, r2
 8006b9c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006b9e:	bf00      	nop
 8006ba0:	f7ff ffde 	bl	8006b60 <HAL_GetTick>
 8006ba4:	4602      	mov	r2, r0
 8006ba6:	68bb      	ldr	r3, [r7, #8]
 8006ba8:	1ad3      	subs	r3, r2, r3
 8006baa:	68fa      	ldr	r2, [r7, #12]
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d8f7      	bhi.n	8006ba0 <HAL_Delay+0x28>
  {
  }
}
 8006bb0:	bf00      	nop
 8006bb2:	bf00      	nop
 8006bb4:	3710      	adds	r7, #16
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	bd80      	pop	{r7, pc}
 8006bba:	bf00      	nop
 8006bbc:	20000008 	.word	0x20000008

08006bc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b085      	sub	sp, #20
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f003 0307 	and.w	r3, r3, #7
 8006bce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006bd0:	4b0c      	ldr	r3, [pc, #48]	; (8006c04 <__NVIC_SetPriorityGrouping+0x44>)
 8006bd2:	68db      	ldr	r3, [r3, #12]
 8006bd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006bd6:	68ba      	ldr	r2, [r7, #8]
 8006bd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006bdc:	4013      	ands	r3, r2
 8006bde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006be8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006bec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006bf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006bf2:	4a04      	ldr	r2, [pc, #16]	; (8006c04 <__NVIC_SetPriorityGrouping+0x44>)
 8006bf4:	68bb      	ldr	r3, [r7, #8]
 8006bf6:	60d3      	str	r3, [r2, #12]
}
 8006bf8:	bf00      	nop
 8006bfa:	3714      	adds	r7, #20
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr
 8006c04:	e000ed00 	.word	0xe000ed00

08006c08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006c0c:	4b04      	ldr	r3, [pc, #16]	; (8006c20 <__NVIC_GetPriorityGrouping+0x18>)
 8006c0e:	68db      	ldr	r3, [r3, #12]
 8006c10:	0a1b      	lsrs	r3, r3, #8
 8006c12:	f003 0307 	and.w	r3, r3, #7
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr
 8006c20:	e000ed00 	.word	0xe000ed00

08006c24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b083      	sub	sp, #12
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	db0b      	blt.n	8006c4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006c36:	79fb      	ldrb	r3, [r7, #7]
 8006c38:	f003 021f 	and.w	r2, r3, #31
 8006c3c:	4907      	ldr	r1, [pc, #28]	; (8006c5c <__NVIC_EnableIRQ+0x38>)
 8006c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c42:	095b      	lsrs	r3, r3, #5
 8006c44:	2001      	movs	r0, #1
 8006c46:	fa00 f202 	lsl.w	r2, r0, r2
 8006c4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006c4e:	bf00      	nop
 8006c50:	370c      	adds	r7, #12
 8006c52:	46bd      	mov	sp, r7
 8006c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c58:	4770      	bx	lr
 8006c5a:	bf00      	nop
 8006c5c:	e000e100 	.word	0xe000e100

08006c60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006c60:	b480      	push	{r7}
 8006c62:	b083      	sub	sp, #12
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	4603      	mov	r3, r0
 8006c68:	6039      	str	r1, [r7, #0]
 8006c6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	db0a      	blt.n	8006c8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	b2da      	uxtb	r2, r3
 8006c78:	490c      	ldr	r1, [pc, #48]	; (8006cac <__NVIC_SetPriority+0x4c>)
 8006c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c7e:	0112      	lsls	r2, r2, #4
 8006c80:	b2d2      	uxtb	r2, r2
 8006c82:	440b      	add	r3, r1
 8006c84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006c88:	e00a      	b.n	8006ca0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	b2da      	uxtb	r2, r3
 8006c8e:	4908      	ldr	r1, [pc, #32]	; (8006cb0 <__NVIC_SetPriority+0x50>)
 8006c90:	79fb      	ldrb	r3, [r7, #7]
 8006c92:	f003 030f 	and.w	r3, r3, #15
 8006c96:	3b04      	subs	r3, #4
 8006c98:	0112      	lsls	r2, r2, #4
 8006c9a:	b2d2      	uxtb	r2, r2
 8006c9c:	440b      	add	r3, r1
 8006c9e:	761a      	strb	r2, [r3, #24]
}
 8006ca0:	bf00      	nop
 8006ca2:	370c      	adds	r7, #12
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr
 8006cac:	e000e100 	.word	0xe000e100
 8006cb0:	e000ed00 	.word	0xe000ed00

08006cb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b089      	sub	sp, #36	; 0x24
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	60f8      	str	r0, [r7, #12]
 8006cbc:	60b9      	str	r1, [r7, #8]
 8006cbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f003 0307 	and.w	r3, r3, #7
 8006cc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006cc8:	69fb      	ldr	r3, [r7, #28]
 8006cca:	f1c3 0307 	rsb	r3, r3, #7
 8006cce:	2b04      	cmp	r3, #4
 8006cd0:	bf28      	it	cs
 8006cd2:	2304      	movcs	r3, #4
 8006cd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006cd6:	69fb      	ldr	r3, [r7, #28]
 8006cd8:	3304      	adds	r3, #4
 8006cda:	2b06      	cmp	r3, #6
 8006cdc:	d902      	bls.n	8006ce4 <NVIC_EncodePriority+0x30>
 8006cde:	69fb      	ldr	r3, [r7, #28]
 8006ce0:	3b03      	subs	r3, #3
 8006ce2:	e000      	b.n	8006ce6 <NVIC_EncodePriority+0x32>
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ce8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006cec:	69bb      	ldr	r3, [r7, #24]
 8006cee:	fa02 f303 	lsl.w	r3, r2, r3
 8006cf2:	43da      	mvns	r2, r3
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	401a      	ands	r2, r3
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006cfc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	fa01 f303 	lsl.w	r3, r1, r3
 8006d06:	43d9      	mvns	r1, r3
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006d0c:	4313      	orrs	r3, r2
         );
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3724      	adds	r7, #36	; 0x24
 8006d12:	46bd      	mov	sp, r7
 8006d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d18:	4770      	bx	lr
	...

08006d1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b082      	sub	sp, #8
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	3b01      	subs	r3, #1
 8006d28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006d2c:	d301      	bcc.n	8006d32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006d2e:	2301      	movs	r3, #1
 8006d30:	e00f      	b.n	8006d52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006d32:	4a0a      	ldr	r2, [pc, #40]	; (8006d5c <SysTick_Config+0x40>)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	3b01      	subs	r3, #1
 8006d38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006d3a:	210f      	movs	r1, #15
 8006d3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d40:	f7ff ff8e 	bl	8006c60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006d44:	4b05      	ldr	r3, [pc, #20]	; (8006d5c <SysTick_Config+0x40>)
 8006d46:	2200      	movs	r2, #0
 8006d48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006d4a:	4b04      	ldr	r3, [pc, #16]	; (8006d5c <SysTick_Config+0x40>)
 8006d4c:	2207      	movs	r2, #7
 8006d4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006d50:	2300      	movs	r3, #0
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3708      	adds	r7, #8
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}
 8006d5a:	bf00      	nop
 8006d5c:	e000e010 	.word	0xe000e010

08006d60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b082      	sub	sp, #8
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f7ff ff29 	bl	8006bc0 <__NVIC_SetPriorityGrouping>
}
 8006d6e:	bf00      	nop
 8006d70:	3708      	adds	r7, #8
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}

08006d76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006d76:	b580      	push	{r7, lr}
 8006d78:	b086      	sub	sp, #24
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	60b9      	str	r1, [r7, #8]
 8006d80:	607a      	str	r2, [r7, #4]
 8006d82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006d84:	2300      	movs	r3, #0
 8006d86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006d88:	f7ff ff3e 	bl	8006c08 <__NVIC_GetPriorityGrouping>
 8006d8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006d8e:	687a      	ldr	r2, [r7, #4]
 8006d90:	68b9      	ldr	r1, [r7, #8]
 8006d92:	6978      	ldr	r0, [r7, #20]
 8006d94:	f7ff ff8e 	bl	8006cb4 <NVIC_EncodePriority>
 8006d98:	4602      	mov	r2, r0
 8006d9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d9e:	4611      	mov	r1, r2
 8006da0:	4618      	mov	r0, r3
 8006da2:	f7ff ff5d 	bl	8006c60 <__NVIC_SetPriority>
}
 8006da6:	bf00      	nop
 8006da8:	3718      	adds	r7, #24
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}

08006dae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006dae:	b580      	push	{r7, lr}
 8006db0:	b082      	sub	sp, #8
 8006db2:	af00      	add	r7, sp, #0
 8006db4:	4603      	mov	r3, r0
 8006db6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f7ff ff31 	bl	8006c24 <__NVIC_EnableIRQ>
}
 8006dc2:	bf00      	nop
 8006dc4:	3708      	adds	r7, #8
 8006dc6:	46bd      	mov	sp, r7
 8006dc8:	bd80      	pop	{r7, pc}

08006dca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006dca:	b580      	push	{r7, lr}
 8006dcc:	b082      	sub	sp, #8
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f7ff ffa2 	bl	8006d1c <SysTick_Config>
 8006dd8:	4603      	mov	r3, r0
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3708      	adds	r7, #8
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}
	...

08006de4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b086      	sub	sp, #24
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006dec:	2300      	movs	r3, #0
 8006dee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006df0:	f7ff feb6 	bl	8006b60 <HAL_GetTick>
 8006df4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d101      	bne.n	8006e00 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	e099      	b.n	8006f34 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2202      	movs	r2, #2
 8006e04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	681a      	ldr	r2, [r3, #0]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f022 0201 	bic.w	r2, r2, #1
 8006e1e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006e20:	e00f      	b.n	8006e42 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006e22:	f7ff fe9d 	bl	8006b60 <HAL_GetTick>
 8006e26:	4602      	mov	r2, r0
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	1ad3      	subs	r3, r2, r3
 8006e2c:	2b05      	cmp	r3, #5
 8006e2e:	d908      	bls.n	8006e42 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2220      	movs	r2, #32
 8006e34:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2203      	movs	r2, #3
 8006e3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006e3e:	2303      	movs	r3, #3
 8006e40:	e078      	b.n	8006f34 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f003 0301 	and.w	r3, r3, #1
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d1e8      	bne.n	8006e22 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006e58:	697a      	ldr	r2, [r7, #20]
 8006e5a:	4b38      	ldr	r3, [pc, #224]	; (8006f3c <HAL_DMA_Init+0x158>)
 8006e5c:	4013      	ands	r3, r2
 8006e5e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	685a      	ldr	r2, [r3, #4]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	689b      	ldr	r3, [r3, #8]
 8006e68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006e6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	691b      	ldr	r3, [r3, #16]
 8006e74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006e7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	699b      	ldr	r3, [r3, #24]
 8006e80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006e86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6a1b      	ldr	r3, [r3, #32]
 8006e8c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006e8e:	697a      	ldr	r2, [r7, #20]
 8006e90:	4313      	orrs	r3, r2
 8006e92:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e98:	2b04      	cmp	r3, #4
 8006e9a:	d107      	bne.n	8006eac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	697a      	ldr	r2, [r7, #20]
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	697a      	ldr	r2, [r7, #20]
 8006eb2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	695b      	ldr	r3, [r3, #20]
 8006eba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	f023 0307 	bic.w	r3, r3, #7
 8006ec2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec8:	697a      	ldr	r2, [r7, #20]
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed2:	2b04      	cmp	r3, #4
 8006ed4:	d117      	bne.n	8006f06 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eda:	697a      	ldr	r2, [r7, #20]
 8006edc:	4313      	orrs	r3, r2
 8006ede:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d00e      	beq.n	8006f06 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f000 fb01 	bl	80074f0 <DMA_CheckFifoParam>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d008      	beq.n	8006f06 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2240      	movs	r2, #64	; 0x40
 8006ef8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2201      	movs	r2, #1
 8006efe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006f02:	2301      	movs	r3, #1
 8006f04:	e016      	b.n	8006f34 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	697a      	ldr	r2, [r7, #20]
 8006f0c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f000 fab8 	bl	8007484 <DMA_CalcBaseAndBitshift>
 8006f14:	4603      	mov	r3, r0
 8006f16:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f1c:	223f      	movs	r2, #63	; 0x3f
 8006f1e:	409a      	lsls	r2, r3
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2200      	movs	r2, #0
 8006f28:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2201      	movs	r2, #1
 8006f2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006f32:	2300      	movs	r3, #0
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	3718      	adds	r7, #24
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}
 8006f3c:	f010803f 	.word	0xf010803f

08006f40 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b086      	sub	sp, #24
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	60f8      	str	r0, [r7, #12]
 8006f48:	60b9      	str	r1, [r7, #8]
 8006f4a:	607a      	str	r2, [r7, #4]
 8006f4c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f56:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006f5e:	2b01      	cmp	r3, #1
 8006f60:	d101      	bne.n	8006f66 <HAL_DMA_Start_IT+0x26>
 8006f62:	2302      	movs	r3, #2
 8006f64:	e040      	b.n	8006fe8 <HAL_DMA_Start_IT+0xa8>
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2201      	movs	r2, #1
 8006f6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006f74:	b2db      	uxtb	r3, r3
 8006f76:	2b01      	cmp	r3, #1
 8006f78:	d12f      	bne.n	8006fda <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2202      	movs	r2, #2
 8006f7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2200      	movs	r2, #0
 8006f86:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	687a      	ldr	r2, [r7, #4]
 8006f8c:	68b9      	ldr	r1, [r7, #8]
 8006f8e:	68f8      	ldr	r0, [r7, #12]
 8006f90:	f000 fa4a 	bl	8007428 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f98:	223f      	movs	r2, #63	; 0x3f
 8006f9a:	409a      	lsls	r2, r3
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	681a      	ldr	r2, [r3, #0]
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f042 0216 	orr.w	r2, r2, #22
 8006fae:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d007      	beq.n	8006fc8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	681a      	ldr	r2, [r3, #0]
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f042 0208 	orr.w	r2, r2, #8
 8006fc6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	681a      	ldr	r2, [r3, #0]
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f042 0201 	orr.w	r2, r2, #1
 8006fd6:	601a      	str	r2, [r3, #0]
 8006fd8:	e005      	b.n	8006fe6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006fe2:	2302      	movs	r3, #2
 8006fe4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006fe6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	3718      	adds	r7, #24
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}

08006ff0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b084      	sub	sp, #16
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ffc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006ffe:	f7ff fdaf 	bl	8006b60 <HAL_GetTick>
 8007002:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800700a:	b2db      	uxtb	r3, r3
 800700c:	2b02      	cmp	r3, #2
 800700e:	d008      	beq.n	8007022 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2280      	movs	r2, #128	; 0x80
 8007014:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2200      	movs	r2, #0
 800701a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800701e:	2301      	movs	r3, #1
 8007020:	e052      	b.n	80070c8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	681a      	ldr	r2, [r3, #0]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f022 0216 	bic.w	r2, r2, #22
 8007030:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	695a      	ldr	r2, [r3, #20]
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007040:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007046:	2b00      	cmp	r3, #0
 8007048:	d103      	bne.n	8007052 <HAL_DMA_Abort+0x62>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800704e:	2b00      	cmp	r3, #0
 8007050:	d007      	beq.n	8007062 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	681a      	ldr	r2, [r3, #0]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f022 0208 	bic.w	r2, r2, #8
 8007060:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	681a      	ldr	r2, [r3, #0]
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f022 0201 	bic.w	r2, r2, #1
 8007070:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007072:	e013      	b.n	800709c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007074:	f7ff fd74 	bl	8006b60 <HAL_GetTick>
 8007078:	4602      	mov	r2, r0
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	1ad3      	subs	r3, r2, r3
 800707e:	2b05      	cmp	r3, #5
 8007080:	d90c      	bls.n	800709c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2220      	movs	r2, #32
 8007086:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2203      	movs	r2, #3
 800708c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2200      	movs	r2, #0
 8007094:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8007098:	2303      	movs	r3, #3
 800709a:	e015      	b.n	80070c8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f003 0301 	and.w	r3, r3, #1
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d1e4      	bne.n	8007074 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070ae:	223f      	movs	r2, #63	; 0x3f
 80070b0:	409a      	lsls	r2, r3
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2201      	movs	r2, #1
 80070ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2200      	movs	r2, #0
 80070c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80070c6:	2300      	movs	r3, #0
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3710      	adds	r7, #16
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}

080070d0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80070d0:	b480      	push	{r7}
 80070d2:	b083      	sub	sp, #12
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80070de:	b2db      	uxtb	r3, r3
 80070e0:	2b02      	cmp	r3, #2
 80070e2:	d004      	beq.n	80070ee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2280      	movs	r2, #128	; 0x80
 80070e8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80070ea:	2301      	movs	r3, #1
 80070ec:	e00c      	b.n	8007108 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2205      	movs	r2, #5
 80070f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	681a      	ldr	r2, [r3, #0]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f022 0201 	bic.w	r2, r2, #1
 8007104:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007106:	2300      	movs	r3, #0
}
 8007108:	4618      	mov	r0, r3
 800710a:	370c      	adds	r7, #12
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr

08007114 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b086      	sub	sp, #24
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800711c:	2300      	movs	r3, #0
 800711e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007120:	4b8e      	ldr	r3, [pc, #568]	; (800735c <HAL_DMA_IRQHandler+0x248>)
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	4a8e      	ldr	r2, [pc, #568]	; (8007360 <HAL_DMA_IRQHandler+0x24c>)
 8007126:	fba2 2303 	umull	r2, r3, r2, r3
 800712a:	0a9b      	lsrs	r3, r3, #10
 800712c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007132:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800713e:	2208      	movs	r2, #8
 8007140:	409a      	lsls	r2, r3
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	4013      	ands	r3, r2
 8007146:	2b00      	cmp	r3, #0
 8007148:	d01a      	beq.n	8007180 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f003 0304 	and.w	r3, r3, #4
 8007154:	2b00      	cmp	r3, #0
 8007156:	d013      	beq.n	8007180 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	681a      	ldr	r2, [r3, #0]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f022 0204 	bic.w	r2, r2, #4
 8007166:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800716c:	2208      	movs	r2, #8
 800716e:	409a      	lsls	r2, r3
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007178:	f043 0201 	orr.w	r2, r3, #1
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007184:	2201      	movs	r2, #1
 8007186:	409a      	lsls	r2, r3
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	4013      	ands	r3, r2
 800718c:	2b00      	cmp	r3, #0
 800718e:	d012      	beq.n	80071b6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	695b      	ldr	r3, [r3, #20]
 8007196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800719a:	2b00      	cmp	r3, #0
 800719c:	d00b      	beq.n	80071b6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071a2:	2201      	movs	r2, #1
 80071a4:	409a      	lsls	r2, r3
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071ae:	f043 0202 	orr.w	r2, r3, #2
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071ba:	2204      	movs	r2, #4
 80071bc:	409a      	lsls	r2, r3
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	4013      	ands	r3, r2
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d012      	beq.n	80071ec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f003 0302 	and.w	r3, r3, #2
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d00b      	beq.n	80071ec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071d8:	2204      	movs	r2, #4
 80071da:	409a      	lsls	r2, r3
 80071dc:	693b      	ldr	r3, [r7, #16]
 80071de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071e4:	f043 0204 	orr.w	r2, r3, #4
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071f0:	2210      	movs	r2, #16
 80071f2:	409a      	lsls	r2, r3
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	4013      	ands	r3, r2
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d043      	beq.n	8007284 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f003 0308 	and.w	r3, r3, #8
 8007206:	2b00      	cmp	r3, #0
 8007208:	d03c      	beq.n	8007284 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800720e:	2210      	movs	r2, #16
 8007210:	409a      	lsls	r2, r3
 8007212:	693b      	ldr	r3, [r7, #16]
 8007214:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007220:	2b00      	cmp	r3, #0
 8007222:	d018      	beq.n	8007256 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800722e:	2b00      	cmp	r3, #0
 8007230:	d108      	bne.n	8007244 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007236:	2b00      	cmp	r3, #0
 8007238:	d024      	beq.n	8007284 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	4798      	blx	r3
 8007242:	e01f      	b.n	8007284 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007248:	2b00      	cmp	r3, #0
 800724a:	d01b      	beq.n	8007284 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	4798      	blx	r3
 8007254:	e016      	b.n	8007284 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007260:	2b00      	cmp	r3, #0
 8007262:	d107      	bne.n	8007274 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	681a      	ldr	r2, [r3, #0]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f022 0208 	bic.w	r2, r2, #8
 8007272:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007278:	2b00      	cmp	r3, #0
 800727a:	d003      	beq.n	8007284 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007288:	2220      	movs	r2, #32
 800728a:	409a      	lsls	r2, r3
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	4013      	ands	r3, r2
 8007290:	2b00      	cmp	r3, #0
 8007292:	f000 808f 	beq.w	80073b4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f003 0310 	and.w	r3, r3, #16
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	f000 8087 	beq.w	80073b4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072aa:	2220      	movs	r2, #32
 80072ac:	409a      	lsls	r2, r3
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80072b8:	b2db      	uxtb	r3, r3
 80072ba:	2b05      	cmp	r3, #5
 80072bc:	d136      	bne.n	800732c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	681a      	ldr	r2, [r3, #0]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f022 0216 	bic.w	r2, r2, #22
 80072cc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	695a      	ldr	r2, [r3, #20]
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80072dc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d103      	bne.n	80072ee <HAL_DMA_IRQHandler+0x1da>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d007      	beq.n	80072fe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	681a      	ldr	r2, [r3, #0]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f022 0208 	bic.w	r2, r2, #8
 80072fc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007302:	223f      	movs	r2, #63	; 0x3f
 8007304:	409a      	lsls	r2, r3
 8007306:	693b      	ldr	r3, [r7, #16]
 8007308:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2201      	movs	r2, #1
 800730e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2200      	movs	r2, #0
 8007316:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800731e:	2b00      	cmp	r3, #0
 8007320:	d07e      	beq.n	8007420 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	4798      	blx	r3
        }
        return;
 800732a:	e079      	b.n	8007420 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007336:	2b00      	cmp	r3, #0
 8007338:	d01d      	beq.n	8007376 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007344:	2b00      	cmp	r3, #0
 8007346:	d10d      	bne.n	8007364 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800734c:	2b00      	cmp	r3, #0
 800734e:	d031      	beq.n	80073b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	4798      	blx	r3
 8007358:	e02c      	b.n	80073b4 <HAL_DMA_IRQHandler+0x2a0>
 800735a:	bf00      	nop
 800735c:	20000000 	.word	0x20000000
 8007360:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007368:	2b00      	cmp	r3, #0
 800736a:	d023      	beq.n	80073b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	4798      	blx	r3
 8007374:	e01e      	b.n	80073b4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007380:	2b00      	cmp	r3, #0
 8007382:	d10f      	bne.n	80073a4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	681a      	ldr	r2, [r3, #0]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f022 0210 	bic.w	r2, r2, #16
 8007392:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2201      	movs	r2, #1
 8007398:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2200      	movs	r2, #0
 80073a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d003      	beq.n	80073b4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d032      	beq.n	8007422 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073c0:	f003 0301 	and.w	r3, r3, #1
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d022      	beq.n	800740e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2205      	movs	r2, #5
 80073cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	681a      	ldr	r2, [r3, #0]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f022 0201 	bic.w	r2, r2, #1
 80073de:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	3301      	adds	r3, #1
 80073e4:	60bb      	str	r3, [r7, #8]
 80073e6:	697a      	ldr	r2, [r7, #20]
 80073e8:	429a      	cmp	r2, r3
 80073ea:	d307      	bcc.n	80073fc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f003 0301 	and.w	r3, r3, #1
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d1f2      	bne.n	80073e0 <HAL_DMA_IRQHandler+0x2cc>
 80073fa:	e000      	b.n	80073fe <HAL_DMA_IRQHandler+0x2ea>
          break;
 80073fc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2201      	movs	r2, #1
 8007402:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2200      	movs	r2, #0
 800740a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007412:	2b00      	cmp	r3, #0
 8007414:	d005      	beq.n	8007422 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	4798      	blx	r3
 800741e:	e000      	b.n	8007422 <HAL_DMA_IRQHandler+0x30e>
        return;
 8007420:	bf00      	nop
    }
  }
}
 8007422:	3718      	adds	r7, #24
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}

08007428 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007428:	b480      	push	{r7}
 800742a:	b085      	sub	sp, #20
 800742c:	af00      	add	r7, sp, #0
 800742e:	60f8      	str	r0, [r7, #12]
 8007430:	60b9      	str	r1, [r7, #8]
 8007432:	607a      	str	r2, [r7, #4]
 8007434:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	681a      	ldr	r2, [r3, #0]
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007444:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	683a      	ldr	r2, [r7, #0]
 800744c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	689b      	ldr	r3, [r3, #8]
 8007452:	2b40      	cmp	r3, #64	; 0x40
 8007454:	d108      	bne.n	8007468 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	687a      	ldr	r2, [r7, #4]
 800745c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	68ba      	ldr	r2, [r7, #8]
 8007464:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007466:	e007      	b.n	8007478 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	68ba      	ldr	r2, [r7, #8]
 800746e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	687a      	ldr	r2, [r7, #4]
 8007476:	60da      	str	r2, [r3, #12]
}
 8007478:	bf00      	nop
 800747a:	3714      	adds	r7, #20
 800747c:	46bd      	mov	sp, r7
 800747e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007482:	4770      	bx	lr

08007484 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007484:	b480      	push	{r7}
 8007486:	b085      	sub	sp, #20
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	b2db      	uxtb	r3, r3
 8007492:	3b10      	subs	r3, #16
 8007494:	4a14      	ldr	r2, [pc, #80]	; (80074e8 <DMA_CalcBaseAndBitshift+0x64>)
 8007496:	fba2 2303 	umull	r2, r3, r2, r3
 800749a:	091b      	lsrs	r3, r3, #4
 800749c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800749e:	4a13      	ldr	r2, [pc, #76]	; (80074ec <DMA_CalcBaseAndBitshift+0x68>)
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	4413      	add	r3, r2
 80074a4:	781b      	ldrb	r3, [r3, #0]
 80074a6:	461a      	mov	r2, r3
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	2b03      	cmp	r3, #3
 80074b0:	d909      	bls.n	80074c6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80074ba:	f023 0303 	bic.w	r3, r3, #3
 80074be:	1d1a      	adds	r2, r3, #4
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	659a      	str	r2, [r3, #88]	; 0x58
 80074c4:	e007      	b.n	80074d6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80074ce:	f023 0303 	bic.w	r3, r3, #3
 80074d2:	687a      	ldr	r2, [r7, #4]
 80074d4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3714      	adds	r7, #20
 80074de:	46bd      	mov	sp, r7
 80074e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e4:	4770      	bx	lr
 80074e6:	bf00      	nop
 80074e8:	aaaaaaab 	.word	0xaaaaaaab
 80074ec:	0800c2fc 	.word	0x0800c2fc

080074f0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b085      	sub	sp, #20
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80074f8:	2300      	movs	r3, #0
 80074fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007500:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	699b      	ldr	r3, [r3, #24]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d11f      	bne.n	800754a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	2b03      	cmp	r3, #3
 800750e:	d856      	bhi.n	80075be <DMA_CheckFifoParam+0xce>
 8007510:	a201      	add	r2, pc, #4	; (adr r2, 8007518 <DMA_CheckFifoParam+0x28>)
 8007512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007516:	bf00      	nop
 8007518:	08007529 	.word	0x08007529
 800751c:	0800753b 	.word	0x0800753b
 8007520:	08007529 	.word	0x08007529
 8007524:	080075bf 	.word	0x080075bf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800752c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007530:	2b00      	cmp	r3, #0
 8007532:	d046      	beq.n	80075c2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007534:	2301      	movs	r3, #1
 8007536:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007538:	e043      	b.n	80075c2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800753e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007542:	d140      	bne.n	80075c6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007544:	2301      	movs	r3, #1
 8007546:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007548:	e03d      	b.n	80075c6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	699b      	ldr	r3, [r3, #24]
 800754e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007552:	d121      	bne.n	8007598 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	2b03      	cmp	r3, #3
 8007558:	d837      	bhi.n	80075ca <DMA_CheckFifoParam+0xda>
 800755a:	a201      	add	r2, pc, #4	; (adr r2, 8007560 <DMA_CheckFifoParam+0x70>)
 800755c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007560:	08007571 	.word	0x08007571
 8007564:	08007577 	.word	0x08007577
 8007568:	08007571 	.word	0x08007571
 800756c:	08007589 	.word	0x08007589
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007570:	2301      	movs	r3, #1
 8007572:	73fb      	strb	r3, [r7, #15]
      break;
 8007574:	e030      	b.n	80075d8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800757a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800757e:	2b00      	cmp	r3, #0
 8007580:	d025      	beq.n	80075ce <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007582:	2301      	movs	r3, #1
 8007584:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007586:	e022      	b.n	80075ce <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800758c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007590:	d11f      	bne.n	80075d2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007592:	2301      	movs	r3, #1
 8007594:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007596:	e01c      	b.n	80075d2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	2b02      	cmp	r3, #2
 800759c:	d903      	bls.n	80075a6 <DMA_CheckFifoParam+0xb6>
 800759e:	68bb      	ldr	r3, [r7, #8]
 80075a0:	2b03      	cmp	r3, #3
 80075a2:	d003      	beq.n	80075ac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80075a4:	e018      	b.n	80075d8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80075a6:	2301      	movs	r3, #1
 80075a8:	73fb      	strb	r3, [r7, #15]
      break;
 80075aa:	e015      	b.n	80075d8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d00e      	beq.n	80075d6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80075b8:	2301      	movs	r3, #1
 80075ba:	73fb      	strb	r3, [r7, #15]
      break;
 80075bc:	e00b      	b.n	80075d6 <DMA_CheckFifoParam+0xe6>
      break;
 80075be:	bf00      	nop
 80075c0:	e00a      	b.n	80075d8 <DMA_CheckFifoParam+0xe8>
      break;
 80075c2:	bf00      	nop
 80075c4:	e008      	b.n	80075d8 <DMA_CheckFifoParam+0xe8>
      break;
 80075c6:	bf00      	nop
 80075c8:	e006      	b.n	80075d8 <DMA_CheckFifoParam+0xe8>
      break;
 80075ca:	bf00      	nop
 80075cc:	e004      	b.n	80075d8 <DMA_CheckFifoParam+0xe8>
      break;
 80075ce:	bf00      	nop
 80075d0:	e002      	b.n	80075d8 <DMA_CheckFifoParam+0xe8>
      break;   
 80075d2:	bf00      	nop
 80075d4:	e000      	b.n	80075d8 <DMA_CheckFifoParam+0xe8>
      break;
 80075d6:	bf00      	nop
    }
  } 
  
  return status; 
 80075d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80075da:	4618      	mov	r0, r3
 80075dc:	3714      	adds	r7, #20
 80075de:	46bd      	mov	sp, r7
 80075e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e4:	4770      	bx	lr
 80075e6:	bf00      	nop

080075e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b089      	sub	sp, #36	; 0x24
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80075f2:	2300      	movs	r3, #0
 80075f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80075f6:	2300      	movs	r3, #0
 80075f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80075fa:	2300      	movs	r3, #0
 80075fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80075fe:	2300      	movs	r3, #0
 8007600:	61fb      	str	r3, [r7, #28]
 8007602:	e16b      	b.n	80078dc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007604:	2201      	movs	r2, #1
 8007606:	69fb      	ldr	r3, [r7, #28]
 8007608:	fa02 f303 	lsl.w	r3, r2, r3
 800760c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	697a      	ldr	r2, [r7, #20]
 8007614:	4013      	ands	r3, r2
 8007616:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007618:	693a      	ldr	r2, [r7, #16]
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	429a      	cmp	r2, r3
 800761e:	f040 815a 	bne.w	80078d6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	685b      	ldr	r3, [r3, #4]
 8007626:	f003 0303 	and.w	r3, r3, #3
 800762a:	2b01      	cmp	r3, #1
 800762c:	d005      	beq.n	800763a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	685b      	ldr	r3, [r3, #4]
 8007632:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007636:	2b02      	cmp	r3, #2
 8007638:	d130      	bne.n	800769c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	689b      	ldr	r3, [r3, #8]
 800763e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007640:	69fb      	ldr	r3, [r7, #28]
 8007642:	005b      	lsls	r3, r3, #1
 8007644:	2203      	movs	r2, #3
 8007646:	fa02 f303 	lsl.w	r3, r2, r3
 800764a:	43db      	mvns	r3, r3
 800764c:	69ba      	ldr	r2, [r7, #24]
 800764e:	4013      	ands	r3, r2
 8007650:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	68da      	ldr	r2, [r3, #12]
 8007656:	69fb      	ldr	r3, [r7, #28]
 8007658:	005b      	lsls	r3, r3, #1
 800765a:	fa02 f303 	lsl.w	r3, r2, r3
 800765e:	69ba      	ldr	r2, [r7, #24]
 8007660:	4313      	orrs	r3, r2
 8007662:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	69ba      	ldr	r2, [r7, #24]
 8007668:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	685b      	ldr	r3, [r3, #4]
 800766e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007670:	2201      	movs	r2, #1
 8007672:	69fb      	ldr	r3, [r7, #28]
 8007674:	fa02 f303 	lsl.w	r3, r2, r3
 8007678:	43db      	mvns	r3, r3
 800767a:	69ba      	ldr	r2, [r7, #24]
 800767c:	4013      	ands	r3, r2
 800767e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	091b      	lsrs	r3, r3, #4
 8007686:	f003 0201 	and.w	r2, r3, #1
 800768a:	69fb      	ldr	r3, [r7, #28]
 800768c:	fa02 f303 	lsl.w	r3, r2, r3
 8007690:	69ba      	ldr	r2, [r7, #24]
 8007692:	4313      	orrs	r3, r2
 8007694:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	69ba      	ldr	r2, [r7, #24]
 800769a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	f003 0303 	and.w	r3, r3, #3
 80076a4:	2b03      	cmp	r3, #3
 80076a6:	d017      	beq.n	80076d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	68db      	ldr	r3, [r3, #12]
 80076ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80076ae:	69fb      	ldr	r3, [r7, #28]
 80076b0:	005b      	lsls	r3, r3, #1
 80076b2:	2203      	movs	r2, #3
 80076b4:	fa02 f303 	lsl.w	r3, r2, r3
 80076b8:	43db      	mvns	r3, r3
 80076ba:	69ba      	ldr	r2, [r7, #24]
 80076bc:	4013      	ands	r3, r2
 80076be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	689a      	ldr	r2, [r3, #8]
 80076c4:	69fb      	ldr	r3, [r7, #28]
 80076c6:	005b      	lsls	r3, r3, #1
 80076c8:	fa02 f303 	lsl.w	r3, r2, r3
 80076cc:	69ba      	ldr	r2, [r7, #24]
 80076ce:	4313      	orrs	r3, r2
 80076d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	69ba      	ldr	r2, [r7, #24]
 80076d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	685b      	ldr	r3, [r3, #4]
 80076dc:	f003 0303 	and.w	r3, r3, #3
 80076e0:	2b02      	cmp	r3, #2
 80076e2:	d123      	bne.n	800772c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80076e4:	69fb      	ldr	r3, [r7, #28]
 80076e6:	08da      	lsrs	r2, r3, #3
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	3208      	adds	r2, #8
 80076ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80076f2:	69fb      	ldr	r3, [r7, #28]
 80076f4:	f003 0307 	and.w	r3, r3, #7
 80076f8:	009b      	lsls	r3, r3, #2
 80076fa:	220f      	movs	r2, #15
 80076fc:	fa02 f303 	lsl.w	r3, r2, r3
 8007700:	43db      	mvns	r3, r3
 8007702:	69ba      	ldr	r2, [r7, #24]
 8007704:	4013      	ands	r3, r2
 8007706:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	691a      	ldr	r2, [r3, #16]
 800770c:	69fb      	ldr	r3, [r7, #28]
 800770e:	f003 0307 	and.w	r3, r3, #7
 8007712:	009b      	lsls	r3, r3, #2
 8007714:	fa02 f303 	lsl.w	r3, r2, r3
 8007718:	69ba      	ldr	r2, [r7, #24]
 800771a:	4313      	orrs	r3, r2
 800771c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800771e:	69fb      	ldr	r3, [r7, #28]
 8007720:	08da      	lsrs	r2, r3, #3
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	3208      	adds	r2, #8
 8007726:	69b9      	ldr	r1, [r7, #24]
 8007728:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007732:	69fb      	ldr	r3, [r7, #28]
 8007734:	005b      	lsls	r3, r3, #1
 8007736:	2203      	movs	r2, #3
 8007738:	fa02 f303 	lsl.w	r3, r2, r3
 800773c:	43db      	mvns	r3, r3
 800773e:	69ba      	ldr	r2, [r7, #24]
 8007740:	4013      	ands	r3, r2
 8007742:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	f003 0203 	and.w	r2, r3, #3
 800774c:	69fb      	ldr	r3, [r7, #28]
 800774e:	005b      	lsls	r3, r3, #1
 8007750:	fa02 f303 	lsl.w	r3, r2, r3
 8007754:	69ba      	ldr	r2, [r7, #24]
 8007756:	4313      	orrs	r3, r2
 8007758:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	69ba      	ldr	r2, [r7, #24]
 800775e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007768:	2b00      	cmp	r3, #0
 800776a:	f000 80b4 	beq.w	80078d6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800776e:	2300      	movs	r3, #0
 8007770:	60fb      	str	r3, [r7, #12]
 8007772:	4b60      	ldr	r3, [pc, #384]	; (80078f4 <HAL_GPIO_Init+0x30c>)
 8007774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007776:	4a5f      	ldr	r2, [pc, #380]	; (80078f4 <HAL_GPIO_Init+0x30c>)
 8007778:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800777c:	6453      	str	r3, [r2, #68]	; 0x44
 800777e:	4b5d      	ldr	r3, [pc, #372]	; (80078f4 <HAL_GPIO_Init+0x30c>)
 8007780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007782:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007786:	60fb      	str	r3, [r7, #12]
 8007788:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800778a:	4a5b      	ldr	r2, [pc, #364]	; (80078f8 <HAL_GPIO_Init+0x310>)
 800778c:	69fb      	ldr	r3, [r7, #28]
 800778e:	089b      	lsrs	r3, r3, #2
 8007790:	3302      	adds	r3, #2
 8007792:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007796:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007798:	69fb      	ldr	r3, [r7, #28]
 800779a:	f003 0303 	and.w	r3, r3, #3
 800779e:	009b      	lsls	r3, r3, #2
 80077a0:	220f      	movs	r2, #15
 80077a2:	fa02 f303 	lsl.w	r3, r2, r3
 80077a6:	43db      	mvns	r3, r3
 80077a8:	69ba      	ldr	r2, [r7, #24]
 80077aa:	4013      	ands	r3, r2
 80077ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	4a52      	ldr	r2, [pc, #328]	; (80078fc <HAL_GPIO_Init+0x314>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d02b      	beq.n	800780e <HAL_GPIO_Init+0x226>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	4a51      	ldr	r2, [pc, #324]	; (8007900 <HAL_GPIO_Init+0x318>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d025      	beq.n	800780a <HAL_GPIO_Init+0x222>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	4a50      	ldr	r2, [pc, #320]	; (8007904 <HAL_GPIO_Init+0x31c>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d01f      	beq.n	8007806 <HAL_GPIO_Init+0x21e>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	4a4f      	ldr	r2, [pc, #316]	; (8007908 <HAL_GPIO_Init+0x320>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d019      	beq.n	8007802 <HAL_GPIO_Init+0x21a>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	4a4e      	ldr	r2, [pc, #312]	; (800790c <HAL_GPIO_Init+0x324>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d013      	beq.n	80077fe <HAL_GPIO_Init+0x216>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	4a4d      	ldr	r2, [pc, #308]	; (8007910 <HAL_GPIO_Init+0x328>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d00d      	beq.n	80077fa <HAL_GPIO_Init+0x212>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	4a4c      	ldr	r2, [pc, #304]	; (8007914 <HAL_GPIO_Init+0x32c>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d007      	beq.n	80077f6 <HAL_GPIO_Init+0x20e>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	4a4b      	ldr	r2, [pc, #300]	; (8007918 <HAL_GPIO_Init+0x330>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d101      	bne.n	80077f2 <HAL_GPIO_Init+0x20a>
 80077ee:	2307      	movs	r3, #7
 80077f0:	e00e      	b.n	8007810 <HAL_GPIO_Init+0x228>
 80077f2:	2308      	movs	r3, #8
 80077f4:	e00c      	b.n	8007810 <HAL_GPIO_Init+0x228>
 80077f6:	2306      	movs	r3, #6
 80077f8:	e00a      	b.n	8007810 <HAL_GPIO_Init+0x228>
 80077fa:	2305      	movs	r3, #5
 80077fc:	e008      	b.n	8007810 <HAL_GPIO_Init+0x228>
 80077fe:	2304      	movs	r3, #4
 8007800:	e006      	b.n	8007810 <HAL_GPIO_Init+0x228>
 8007802:	2303      	movs	r3, #3
 8007804:	e004      	b.n	8007810 <HAL_GPIO_Init+0x228>
 8007806:	2302      	movs	r3, #2
 8007808:	e002      	b.n	8007810 <HAL_GPIO_Init+0x228>
 800780a:	2301      	movs	r3, #1
 800780c:	e000      	b.n	8007810 <HAL_GPIO_Init+0x228>
 800780e:	2300      	movs	r3, #0
 8007810:	69fa      	ldr	r2, [r7, #28]
 8007812:	f002 0203 	and.w	r2, r2, #3
 8007816:	0092      	lsls	r2, r2, #2
 8007818:	4093      	lsls	r3, r2
 800781a:	69ba      	ldr	r2, [r7, #24]
 800781c:	4313      	orrs	r3, r2
 800781e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007820:	4935      	ldr	r1, [pc, #212]	; (80078f8 <HAL_GPIO_Init+0x310>)
 8007822:	69fb      	ldr	r3, [r7, #28]
 8007824:	089b      	lsrs	r3, r3, #2
 8007826:	3302      	adds	r3, #2
 8007828:	69ba      	ldr	r2, [r7, #24]
 800782a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800782e:	4b3b      	ldr	r3, [pc, #236]	; (800791c <HAL_GPIO_Init+0x334>)
 8007830:	689b      	ldr	r3, [r3, #8]
 8007832:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007834:	693b      	ldr	r3, [r7, #16]
 8007836:	43db      	mvns	r3, r3
 8007838:	69ba      	ldr	r2, [r7, #24]
 800783a:	4013      	ands	r3, r2
 800783c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007846:	2b00      	cmp	r3, #0
 8007848:	d003      	beq.n	8007852 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800784a:	69ba      	ldr	r2, [r7, #24]
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	4313      	orrs	r3, r2
 8007850:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007852:	4a32      	ldr	r2, [pc, #200]	; (800791c <HAL_GPIO_Init+0x334>)
 8007854:	69bb      	ldr	r3, [r7, #24]
 8007856:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007858:	4b30      	ldr	r3, [pc, #192]	; (800791c <HAL_GPIO_Init+0x334>)
 800785a:	68db      	ldr	r3, [r3, #12]
 800785c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800785e:	693b      	ldr	r3, [r7, #16]
 8007860:	43db      	mvns	r3, r3
 8007862:	69ba      	ldr	r2, [r7, #24]
 8007864:	4013      	ands	r3, r2
 8007866:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007868:	683b      	ldr	r3, [r7, #0]
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007870:	2b00      	cmp	r3, #0
 8007872:	d003      	beq.n	800787c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8007874:	69ba      	ldr	r2, [r7, #24]
 8007876:	693b      	ldr	r3, [r7, #16]
 8007878:	4313      	orrs	r3, r2
 800787a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800787c:	4a27      	ldr	r2, [pc, #156]	; (800791c <HAL_GPIO_Init+0x334>)
 800787e:	69bb      	ldr	r3, [r7, #24]
 8007880:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007882:	4b26      	ldr	r3, [pc, #152]	; (800791c <HAL_GPIO_Init+0x334>)
 8007884:	685b      	ldr	r3, [r3, #4]
 8007886:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	43db      	mvns	r3, r3
 800788c:	69ba      	ldr	r2, [r7, #24]
 800788e:	4013      	ands	r3, r2
 8007890:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	685b      	ldr	r3, [r3, #4]
 8007896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800789a:	2b00      	cmp	r3, #0
 800789c:	d003      	beq.n	80078a6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800789e:	69ba      	ldr	r2, [r7, #24]
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	4313      	orrs	r3, r2
 80078a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80078a6:	4a1d      	ldr	r2, [pc, #116]	; (800791c <HAL_GPIO_Init+0x334>)
 80078a8:	69bb      	ldr	r3, [r7, #24]
 80078aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80078ac:	4b1b      	ldr	r3, [pc, #108]	; (800791c <HAL_GPIO_Init+0x334>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	43db      	mvns	r3, r3
 80078b6:	69ba      	ldr	r2, [r7, #24]
 80078b8:	4013      	ands	r3, r2
 80078ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	685b      	ldr	r3, [r3, #4]
 80078c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d003      	beq.n	80078d0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80078c8:	69ba      	ldr	r2, [r7, #24]
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	4313      	orrs	r3, r2
 80078ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80078d0:	4a12      	ldr	r2, [pc, #72]	; (800791c <HAL_GPIO_Init+0x334>)
 80078d2:	69bb      	ldr	r3, [r7, #24]
 80078d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80078d6:	69fb      	ldr	r3, [r7, #28]
 80078d8:	3301      	adds	r3, #1
 80078da:	61fb      	str	r3, [r7, #28]
 80078dc:	69fb      	ldr	r3, [r7, #28]
 80078de:	2b0f      	cmp	r3, #15
 80078e0:	f67f ae90 	bls.w	8007604 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80078e4:	bf00      	nop
 80078e6:	bf00      	nop
 80078e8:	3724      	adds	r7, #36	; 0x24
 80078ea:	46bd      	mov	sp, r7
 80078ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f0:	4770      	bx	lr
 80078f2:	bf00      	nop
 80078f4:	40023800 	.word	0x40023800
 80078f8:	40013800 	.word	0x40013800
 80078fc:	40020000 	.word	0x40020000
 8007900:	40020400 	.word	0x40020400
 8007904:	40020800 	.word	0x40020800
 8007908:	40020c00 	.word	0x40020c00
 800790c:	40021000 	.word	0x40021000
 8007910:	40021400 	.word	0x40021400
 8007914:	40021800 	.word	0x40021800
 8007918:	40021c00 	.word	0x40021c00
 800791c:	40013c00 	.word	0x40013c00

08007920 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b086      	sub	sp, #24
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d101      	bne.n	8007932 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800792e:	2301      	movs	r3, #1
 8007930:	e267      	b.n	8007e02 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f003 0301 	and.w	r3, r3, #1
 800793a:	2b00      	cmp	r3, #0
 800793c:	d075      	beq.n	8007a2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800793e:	4b88      	ldr	r3, [pc, #544]	; (8007b60 <HAL_RCC_OscConfig+0x240>)
 8007940:	689b      	ldr	r3, [r3, #8]
 8007942:	f003 030c 	and.w	r3, r3, #12
 8007946:	2b04      	cmp	r3, #4
 8007948:	d00c      	beq.n	8007964 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800794a:	4b85      	ldr	r3, [pc, #532]	; (8007b60 <HAL_RCC_OscConfig+0x240>)
 800794c:	689b      	ldr	r3, [r3, #8]
 800794e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007952:	2b08      	cmp	r3, #8
 8007954:	d112      	bne.n	800797c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007956:	4b82      	ldr	r3, [pc, #520]	; (8007b60 <HAL_RCC_OscConfig+0x240>)
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800795e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007962:	d10b      	bne.n	800797c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007964:	4b7e      	ldr	r3, [pc, #504]	; (8007b60 <HAL_RCC_OscConfig+0x240>)
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800796c:	2b00      	cmp	r3, #0
 800796e:	d05b      	beq.n	8007a28 <HAL_RCC_OscConfig+0x108>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	685b      	ldr	r3, [r3, #4]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d157      	bne.n	8007a28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007978:	2301      	movs	r3, #1
 800797a:	e242      	b.n	8007e02 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007984:	d106      	bne.n	8007994 <HAL_RCC_OscConfig+0x74>
 8007986:	4b76      	ldr	r3, [pc, #472]	; (8007b60 <HAL_RCC_OscConfig+0x240>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a75      	ldr	r2, [pc, #468]	; (8007b60 <HAL_RCC_OscConfig+0x240>)
 800798c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007990:	6013      	str	r3, [r2, #0]
 8007992:	e01d      	b.n	80079d0 <HAL_RCC_OscConfig+0xb0>
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800799c:	d10c      	bne.n	80079b8 <HAL_RCC_OscConfig+0x98>
 800799e:	4b70      	ldr	r3, [pc, #448]	; (8007b60 <HAL_RCC_OscConfig+0x240>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4a6f      	ldr	r2, [pc, #444]	; (8007b60 <HAL_RCC_OscConfig+0x240>)
 80079a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80079a8:	6013      	str	r3, [r2, #0]
 80079aa:	4b6d      	ldr	r3, [pc, #436]	; (8007b60 <HAL_RCC_OscConfig+0x240>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	4a6c      	ldr	r2, [pc, #432]	; (8007b60 <HAL_RCC_OscConfig+0x240>)
 80079b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80079b4:	6013      	str	r3, [r2, #0]
 80079b6:	e00b      	b.n	80079d0 <HAL_RCC_OscConfig+0xb0>
 80079b8:	4b69      	ldr	r3, [pc, #420]	; (8007b60 <HAL_RCC_OscConfig+0x240>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a68      	ldr	r2, [pc, #416]	; (8007b60 <HAL_RCC_OscConfig+0x240>)
 80079be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079c2:	6013      	str	r3, [r2, #0]
 80079c4:	4b66      	ldr	r3, [pc, #408]	; (8007b60 <HAL_RCC_OscConfig+0x240>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4a65      	ldr	r2, [pc, #404]	; (8007b60 <HAL_RCC_OscConfig+0x240>)
 80079ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80079ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	685b      	ldr	r3, [r3, #4]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d013      	beq.n	8007a00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079d8:	f7ff f8c2 	bl	8006b60 <HAL_GetTick>
 80079dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80079de:	e008      	b.n	80079f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80079e0:	f7ff f8be 	bl	8006b60 <HAL_GetTick>
 80079e4:	4602      	mov	r2, r0
 80079e6:	693b      	ldr	r3, [r7, #16]
 80079e8:	1ad3      	subs	r3, r2, r3
 80079ea:	2b64      	cmp	r3, #100	; 0x64
 80079ec:	d901      	bls.n	80079f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80079ee:	2303      	movs	r3, #3
 80079f0:	e207      	b.n	8007e02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80079f2:	4b5b      	ldr	r3, [pc, #364]	; (8007b60 <HAL_RCC_OscConfig+0x240>)
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d0f0      	beq.n	80079e0 <HAL_RCC_OscConfig+0xc0>
 80079fe:	e014      	b.n	8007a2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a00:	f7ff f8ae 	bl	8006b60 <HAL_GetTick>
 8007a04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007a06:	e008      	b.n	8007a1a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007a08:	f7ff f8aa 	bl	8006b60 <HAL_GetTick>
 8007a0c:	4602      	mov	r2, r0
 8007a0e:	693b      	ldr	r3, [r7, #16]
 8007a10:	1ad3      	subs	r3, r2, r3
 8007a12:	2b64      	cmp	r3, #100	; 0x64
 8007a14:	d901      	bls.n	8007a1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007a16:	2303      	movs	r3, #3
 8007a18:	e1f3      	b.n	8007e02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007a1a:	4b51      	ldr	r3, [pc, #324]	; (8007b60 <HAL_RCC_OscConfig+0x240>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d1f0      	bne.n	8007a08 <HAL_RCC_OscConfig+0xe8>
 8007a26:	e000      	b.n	8007a2a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f003 0302 	and.w	r3, r3, #2
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d063      	beq.n	8007afe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007a36:	4b4a      	ldr	r3, [pc, #296]	; (8007b60 <HAL_RCC_OscConfig+0x240>)
 8007a38:	689b      	ldr	r3, [r3, #8]
 8007a3a:	f003 030c 	and.w	r3, r3, #12
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d00b      	beq.n	8007a5a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007a42:	4b47      	ldr	r3, [pc, #284]	; (8007b60 <HAL_RCC_OscConfig+0x240>)
 8007a44:	689b      	ldr	r3, [r3, #8]
 8007a46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007a4a:	2b08      	cmp	r3, #8
 8007a4c:	d11c      	bne.n	8007a88 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007a4e:	4b44      	ldr	r3, [pc, #272]	; (8007b60 <HAL_RCC_OscConfig+0x240>)
 8007a50:	685b      	ldr	r3, [r3, #4]
 8007a52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d116      	bne.n	8007a88 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007a5a:	4b41      	ldr	r3, [pc, #260]	; (8007b60 <HAL_RCC_OscConfig+0x240>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f003 0302 	and.w	r3, r3, #2
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d005      	beq.n	8007a72 <HAL_RCC_OscConfig+0x152>
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	68db      	ldr	r3, [r3, #12]
 8007a6a:	2b01      	cmp	r3, #1
 8007a6c:	d001      	beq.n	8007a72 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007a6e:	2301      	movs	r3, #1
 8007a70:	e1c7      	b.n	8007e02 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a72:	4b3b      	ldr	r3, [pc, #236]	; (8007b60 <HAL_RCC_OscConfig+0x240>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	691b      	ldr	r3, [r3, #16]
 8007a7e:	00db      	lsls	r3, r3, #3
 8007a80:	4937      	ldr	r1, [pc, #220]	; (8007b60 <HAL_RCC_OscConfig+0x240>)
 8007a82:	4313      	orrs	r3, r2
 8007a84:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007a86:	e03a      	b.n	8007afe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	68db      	ldr	r3, [r3, #12]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d020      	beq.n	8007ad2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007a90:	4b34      	ldr	r3, [pc, #208]	; (8007b64 <HAL_RCC_OscConfig+0x244>)
 8007a92:	2201      	movs	r2, #1
 8007a94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a96:	f7ff f863 	bl	8006b60 <HAL_GetTick>
 8007a9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a9c:	e008      	b.n	8007ab0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007a9e:	f7ff f85f 	bl	8006b60 <HAL_GetTick>
 8007aa2:	4602      	mov	r2, r0
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	1ad3      	subs	r3, r2, r3
 8007aa8:	2b02      	cmp	r3, #2
 8007aaa:	d901      	bls.n	8007ab0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007aac:	2303      	movs	r3, #3
 8007aae:	e1a8      	b.n	8007e02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ab0:	4b2b      	ldr	r3, [pc, #172]	; (8007b60 <HAL_RCC_OscConfig+0x240>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f003 0302 	and.w	r3, r3, #2
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d0f0      	beq.n	8007a9e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007abc:	4b28      	ldr	r3, [pc, #160]	; (8007b60 <HAL_RCC_OscConfig+0x240>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	691b      	ldr	r3, [r3, #16]
 8007ac8:	00db      	lsls	r3, r3, #3
 8007aca:	4925      	ldr	r1, [pc, #148]	; (8007b60 <HAL_RCC_OscConfig+0x240>)
 8007acc:	4313      	orrs	r3, r2
 8007ace:	600b      	str	r3, [r1, #0]
 8007ad0:	e015      	b.n	8007afe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007ad2:	4b24      	ldr	r3, [pc, #144]	; (8007b64 <HAL_RCC_OscConfig+0x244>)
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ad8:	f7ff f842 	bl	8006b60 <HAL_GetTick>
 8007adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007ade:	e008      	b.n	8007af2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007ae0:	f7ff f83e 	bl	8006b60 <HAL_GetTick>
 8007ae4:	4602      	mov	r2, r0
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	1ad3      	subs	r3, r2, r3
 8007aea:	2b02      	cmp	r3, #2
 8007aec:	d901      	bls.n	8007af2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007aee:	2303      	movs	r3, #3
 8007af0:	e187      	b.n	8007e02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007af2:	4b1b      	ldr	r3, [pc, #108]	; (8007b60 <HAL_RCC_OscConfig+0x240>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f003 0302 	and.w	r3, r3, #2
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d1f0      	bne.n	8007ae0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f003 0308 	and.w	r3, r3, #8
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d036      	beq.n	8007b78 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	695b      	ldr	r3, [r3, #20]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d016      	beq.n	8007b40 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007b12:	4b15      	ldr	r3, [pc, #84]	; (8007b68 <HAL_RCC_OscConfig+0x248>)
 8007b14:	2201      	movs	r2, #1
 8007b16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b18:	f7ff f822 	bl	8006b60 <HAL_GetTick>
 8007b1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007b1e:	e008      	b.n	8007b32 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007b20:	f7ff f81e 	bl	8006b60 <HAL_GetTick>
 8007b24:	4602      	mov	r2, r0
 8007b26:	693b      	ldr	r3, [r7, #16]
 8007b28:	1ad3      	subs	r3, r2, r3
 8007b2a:	2b02      	cmp	r3, #2
 8007b2c:	d901      	bls.n	8007b32 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007b2e:	2303      	movs	r3, #3
 8007b30:	e167      	b.n	8007e02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007b32:	4b0b      	ldr	r3, [pc, #44]	; (8007b60 <HAL_RCC_OscConfig+0x240>)
 8007b34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b36:	f003 0302 	and.w	r3, r3, #2
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d0f0      	beq.n	8007b20 <HAL_RCC_OscConfig+0x200>
 8007b3e:	e01b      	b.n	8007b78 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007b40:	4b09      	ldr	r3, [pc, #36]	; (8007b68 <HAL_RCC_OscConfig+0x248>)
 8007b42:	2200      	movs	r2, #0
 8007b44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007b46:	f7ff f80b 	bl	8006b60 <HAL_GetTick>
 8007b4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007b4c:	e00e      	b.n	8007b6c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007b4e:	f7ff f807 	bl	8006b60 <HAL_GetTick>
 8007b52:	4602      	mov	r2, r0
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	1ad3      	subs	r3, r2, r3
 8007b58:	2b02      	cmp	r3, #2
 8007b5a:	d907      	bls.n	8007b6c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007b5c:	2303      	movs	r3, #3
 8007b5e:	e150      	b.n	8007e02 <HAL_RCC_OscConfig+0x4e2>
 8007b60:	40023800 	.word	0x40023800
 8007b64:	42470000 	.word	0x42470000
 8007b68:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007b6c:	4b88      	ldr	r3, [pc, #544]	; (8007d90 <HAL_RCC_OscConfig+0x470>)
 8007b6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b70:	f003 0302 	and.w	r3, r3, #2
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d1ea      	bne.n	8007b4e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f003 0304 	and.w	r3, r3, #4
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	f000 8097 	beq.w	8007cb4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007b86:	2300      	movs	r3, #0
 8007b88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007b8a:	4b81      	ldr	r3, [pc, #516]	; (8007d90 <HAL_RCC_OscConfig+0x470>)
 8007b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d10f      	bne.n	8007bb6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007b96:	2300      	movs	r3, #0
 8007b98:	60bb      	str	r3, [r7, #8]
 8007b9a:	4b7d      	ldr	r3, [pc, #500]	; (8007d90 <HAL_RCC_OscConfig+0x470>)
 8007b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b9e:	4a7c      	ldr	r2, [pc, #496]	; (8007d90 <HAL_RCC_OscConfig+0x470>)
 8007ba0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ba4:	6413      	str	r3, [r2, #64]	; 0x40
 8007ba6:	4b7a      	ldr	r3, [pc, #488]	; (8007d90 <HAL_RCC_OscConfig+0x470>)
 8007ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007baa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bae:	60bb      	str	r3, [r7, #8]
 8007bb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007bb6:	4b77      	ldr	r3, [pc, #476]	; (8007d94 <HAL_RCC_OscConfig+0x474>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d118      	bne.n	8007bf4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007bc2:	4b74      	ldr	r3, [pc, #464]	; (8007d94 <HAL_RCC_OscConfig+0x474>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	4a73      	ldr	r2, [pc, #460]	; (8007d94 <HAL_RCC_OscConfig+0x474>)
 8007bc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007bcc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007bce:	f7fe ffc7 	bl	8006b60 <HAL_GetTick>
 8007bd2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007bd4:	e008      	b.n	8007be8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007bd6:	f7fe ffc3 	bl	8006b60 <HAL_GetTick>
 8007bda:	4602      	mov	r2, r0
 8007bdc:	693b      	ldr	r3, [r7, #16]
 8007bde:	1ad3      	subs	r3, r2, r3
 8007be0:	2b02      	cmp	r3, #2
 8007be2:	d901      	bls.n	8007be8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007be4:	2303      	movs	r3, #3
 8007be6:	e10c      	b.n	8007e02 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007be8:	4b6a      	ldr	r3, [pc, #424]	; (8007d94 <HAL_RCC_OscConfig+0x474>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d0f0      	beq.n	8007bd6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	689b      	ldr	r3, [r3, #8]
 8007bf8:	2b01      	cmp	r3, #1
 8007bfa:	d106      	bne.n	8007c0a <HAL_RCC_OscConfig+0x2ea>
 8007bfc:	4b64      	ldr	r3, [pc, #400]	; (8007d90 <HAL_RCC_OscConfig+0x470>)
 8007bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c00:	4a63      	ldr	r2, [pc, #396]	; (8007d90 <HAL_RCC_OscConfig+0x470>)
 8007c02:	f043 0301 	orr.w	r3, r3, #1
 8007c06:	6713      	str	r3, [r2, #112]	; 0x70
 8007c08:	e01c      	b.n	8007c44 <HAL_RCC_OscConfig+0x324>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	689b      	ldr	r3, [r3, #8]
 8007c0e:	2b05      	cmp	r3, #5
 8007c10:	d10c      	bne.n	8007c2c <HAL_RCC_OscConfig+0x30c>
 8007c12:	4b5f      	ldr	r3, [pc, #380]	; (8007d90 <HAL_RCC_OscConfig+0x470>)
 8007c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c16:	4a5e      	ldr	r2, [pc, #376]	; (8007d90 <HAL_RCC_OscConfig+0x470>)
 8007c18:	f043 0304 	orr.w	r3, r3, #4
 8007c1c:	6713      	str	r3, [r2, #112]	; 0x70
 8007c1e:	4b5c      	ldr	r3, [pc, #368]	; (8007d90 <HAL_RCC_OscConfig+0x470>)
 8007c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c22:	4a5b      	ldr	r2, [pc, #364]	; (8007d90 <HAL_RCC_OscConfig+0x470>)
 8007c24:	f043 0301 	orr.w	r3, r3, #1
 8007c28:	6713      	str	r3, [r2, #112]	; 0x70
 8007c2a:	e00b      	b.n	8007c44 <HAL_RCC_OscConfig+0x324>
 8007c2c:	4b58      	ldr	r3, [pc, #352]	; (8007d90 <HAL_RCC_OscConfig+0x470>)
 8007c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c30:	4a57      	ldr	r2, [pc, #348]	; (8007d90 <HAL_RCC_OscConfig+0x470>)
 8007c32:	f023 0301 	bic.w	r3, r3, #1
 8007c36:	6713      	str	r3, [r2, #112]	; 0x70
 8007c38:	4b55      	ldr	r3, [pc, #340]	; (8007d90 <HAL_RCC_OscConfig+0x470>)
 8007c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c3c:	4a54      	ldr	r2, [pc, #336]	; (8007d90 <HAL_RCC_OscConfig+0x470>)
 8007c3e:	f023 0304 	bic.w	r3, r3, #4
 8007c42:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	689b      	ldr	r3, [r3, #8]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d015      	beq.n	8007c78 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c4c:	f7fe ff88 	bl	8006b60 <HAL_GetTick>
 8007c50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c52:	e00a      	b.n	8007c6a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007c54:	f7fe ff84 	bl	8006b60 <HAL_GetTick>
 8007c58:	4602      	mov	r2, r0
 8007c5a:	693b      	ldr	r3, [r7, #16]
 8007c5c:	1ad3      	subs	r3, r2, r3
 8007c5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d901      	bls.n	8007c6a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007c66:	2303      	movs	r3, #3
 8007c68:	e0cb      	b.n	8007e02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007c6a:	4b49      	ldr	r3, [pc, #292]	; (8007d90 <HAL_RCC_OscConfig+0x470>)
 8007c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c6e:	f003 0302 	and.w	r3, r3, #2
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d0ee      	beq.n	8007c54 <HAL_RCC_OscConfig+0x334>
 8007c76:	e014      	b.n	8007ca2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007c78:	f7fe ff72 	bl	8006b60 <HAL_GetTick>
 8007c7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007c7e:	e00a      	b.n	8007c96 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007c80:	f7fe ff6e 	bl	8006b60 <HAL_GetTick>
 8007c84:	4602      	mov	r2, r0
 8007c86:	693b      	ldr	r3, [r7, #16]
 8007c88:	1ad3      	subs	r3, r2, r3
 8007c8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d901      	bls.n	8007c96 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007c92:	2303      	movs	r3, #3
 8007c94:	e0b5      	b.n	8007e02 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007c96:	4b3e      	ldr	r3, [pc, #248]	; (8007d90 <HAL_RCC_OscConfig+0x470>)
 8007c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c9a:	f003 0302 	and.w	r3, r3, #2
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d1ee      	bne.n	8007c80 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007ca2:	7dfb      	ldrb	r3, [r7, #23]
 8007ca4:	2b01      	cmp	r3, #1
 8007ca6:	d105      	bne.n	8007cb4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007ca8:	4b39      	ldr	r3, [pc, #228]	; (8007d90 <HAL_RCC_OscConfig+0x470>)
 8007caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cac:	4a38      	ldr	r2, [pc, #224]	; (8007d90 <HAL_RCC_OscConfig+0x470>)
 8007cae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007cb2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	699b      	ldr	r3, [r3, #24]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	f000 80a1 	beq.w	8007e00 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007cbe:	4b34      	ldr	r3, [pc, #208]	; (8007d90 <HAL_RCC_OscConfig+0x470>)
 8007cc0:	689b      	ldr	r3, [r3, #8]
 8007cc2:	f003 030c 	and.w	r3, r3, #12
 8007cc6:	2b08      	cmp	r3, #8
 8007cc8:	d05c      	beq.n	8007d84 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	699b      	ldr	r3, [r3, #24]
 8007cce:	2b02      	cmp	r3, #2
 8007cd0:	d141      	bne.n	8007d56 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007cd2:	4b31      	ldr	r3, [pc, #196]	; (8007d98 <HAL_RCC_OscConfig+0x478>)
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007cd8:	f7fe ff42 	bl	8006b60 <HAL_GetTick>
 8007cdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007cde:	e008      	b.n	8007cf2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007ce0:	f7fe ff3e 	bl	8006b60 <HAL_GetTick>
 8007ce4:	4602      	mov	r2, r0
 8007ce6:	693b      	ldr	r3, [r7, #16]
 8007ce8:	1ad3      	subs	r3, r2, r3
 8007cea:	2b02      	cmp	r3, #2
 8007cec:	d901      	bls.n	8007cf2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007cee:	2303      	movs	r3, #3
 8007cf0:	e087      	b.n	8007e02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007cf2:	4b27      	ldr	r3, [pc, #156]	; (8007d90 <HAL_RCC_OscConfig+0x470>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d1f0      	bne.n	8007ce0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	69da      	ldr	r2, [r3, #28]
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6a1b      	ldr	r3, [r3, #32]
 8007d06:	431a      	orrs	r2, r3
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d0c:	019b      	lsls	r3, r3, #6
 8007d0e:	431a      	orrs	r2, r3
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d14:	085b      	lsrs	r3, r3, #1
 8007d16:	3b01      	subs	r3, #1
 8007d18:	041b      	lsls	r3, r3, #16
 8007d1a:	431a      	orrs	r2, r3
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d20:	061b      	lsls	r3, r3, #24
 8007d22:	491b      	ldr	r1, [pc, #108]	; (8007d90 <HAL_RCC_OscConfig+0x470>)
 8007d24:	4313      	orrs	r3, r2
 8007d26:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007d28:	4b1b      	ldr	r3, [pc, #108]	; (8007d98 <HAL_RCC_OscConfig+0x478>)
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d2e:	f7fe ff17 	bl	8006b60 <HAL_GetTick>
 8007d32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d34:	e008      	b.n	8007d48 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007d36:	f7fe ff13 	bl	8006b60 <HAL_GetTick>
 8007d3a:	4602      	mov	r2, r0
 8007d3c:	693b      	ldr	r3, [r7, #16]
 8007d3e:	1ad3      	subs	r3, r2, r3
 8007d40:	2b02      	cmp	r3, #2
 8007d42:	d901      	bls.n	8007d48 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007d44:	2303      	movs	r3, #3
 8007d46:	e05c      	b.n	8007e02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d48:	4b11      	ldr	r3, [pc, #68]	; (8007d90 <HAL_RCC_OscConfig+0x470>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d0f0      	beq.n	8007d36 <HAL_RCC_OscConfig+0x416>
 8007d54:	e054      	b.n	8007e00 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d56:	4b10      	ldr	r3, [pc, #64]	; (8007d98 <HAL_RCC_OscConfig+0x478>)
 8007d58:	2200      	movs	r2, #0
 8007d5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d5c:	f7fe ff00 	bl	8006b60 <HAL_GetTick>
 8007d60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d62:	e008      	b.n	8007d76 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007d64:	f7fe fefc 	bl	8006b60 <HAL_GetTick>
 8007d68:	4602      	mov	r2, r0
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	1ad3      	subs	r3, r2, r3
 8007d6e:	2b02      	cmp	r3, #2
 8007d70:	d901      	bls.n	8007d76 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007d72:	2303      	movs	r3, #3
 8007d74:	e045      	b.n	8007e02 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d76:	4b06      	ldr	r3, [pc, #24]	; (8007d90 <HAL_RCC_OscConfig+0x470>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d1f0      	bne.n	8007d64 <HAL_RCC_OscConfig+0x444>
 8007d82:	e03d      	b.n	8007e00 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	699b      	ldr	r3, [r3, #24]
 8007d88:	2b01      	cmp	r3, #1
 8007d8a:	d107      	bne.n	8007d9c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	e038      	b.n	8007e02 <HAL_RCC_OscConfig+0x4e2>
 8007d90:	40023800 	.word	0x40023800
 8007d94:	40007000 	.word	0x40007000
 8007d98:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007d9c:	4b1b      	ldr	r3, [pc, #108]	; (8007e0c <HAL_RCC_OscConfig+0x4ec>)
 8007d9e:	685b      	ldr	r3, [r3, #4]
 8007da0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	699b      	ldr	r3, [r3, #24]
 8007da6:	2b01      	cmp	r3, #1
 8007da8:	d028      	beq.n	8007dfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007db4:	429a      	cmp	r2, r3
 8007db6:	d121      	bne.n	8007dfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007dc2:	429a      	cmp	r2, r3
 8007dc4:	d11a      	bne.n	8007dfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007dc6:	68fa      	ldr	r2, [r7, #12]
 8007dc8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007dcc:	4013      	ands	r3, r2
 8007dce:	687a      	ldr	r2, [r7, #4]
 8007dd0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007dd2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d111      	bne.n	8007dfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007de2:	085b      	lsrs	r3, r3, #1
 8007de4:	3b01      	subs	r3, #1
 8007de6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007de8:	429a      	cmp	r2, r3
 8007dea:	d107      	bne.n	8007dfc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007df6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007df8:	429a      	cmp	r2, r3
 8007dfa:	d001      	beq.n	8007e00 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	e000      	b.n	8007e02 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007e00:	2300      	movs	r3, #0
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	3718      	adds	r7, #24
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}
 8007e0a:	bf00      	nop
 8007e0c:	40023800 	.word	0x40023800

08007e10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b084      	sub	sp, #16
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
 8007e18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d101      	bne.n	8007e24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007e20:	2301      	movs	r3, #1
 8007e22:	e0cc      	b.n	8007fbe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007e24:	4b68      	ldr	r3, [pc, #416]	; (8007fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f003 0307 	and.w	r3, r3, #7
 8007e2c:	683a      	ldr	r2, [r7, #0]
 8007e2e:	429a      	cmp	r2, r3
 8007e30:	d90c      	bls.n	8007e4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e32:	4b65      	ldr	r3, [pc, #404]	; (8007fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8007e34:	683a      	ldr	r2, [r7, #0]
 8007e36:	b2d2      	uxtb	r2, r2
 8007e38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e3a:	4b63      	ldr	r3, [pc, #396]	; (8007fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f003 0307 	and.w	r3, r3, #7
 8007e42:	683a      	ldr	r2, [r7, #0]
 8007e44:	429a      	cmp	r2, r3
 8007e46:	d001      	beq.n	8007e4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007e48:	2301      	movs	r3, #1
 8007e4a:	e0b8      	b.n	8007fbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f003 0302 	and.w	r3, r3, #2
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d020      	beq.n	8007e9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f003 0304 	and.w	r3, r3, #4
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d005      	beq.n	8007e70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007e64:	4b59      	ldr	r3, [pc, #356]	; (8007fcc <HAL_RCC_ClockConfig+0x1bc>)
 8007e66:	689b      	ldr	r3, [r3, #8]
 8007e68:	4a58      	ldr	r2, [pc, #352]	; (8007fcc <HAL_RCC_ClockConfig+0x1bc>)
 8007e6a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007e6e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f003 0308 	and.w	r3, r3, #8
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d005      	beq.n	8007e88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007e7c:	4b53      	ldr	r3, [pc, #332]	; (8007fcc <HAL_RCC_ClockConfig+0x1bc>)
 8007e7e:	689b      	ldr	r3, [r3, #8]
 8007e80:	4a52      	ldr	r2, [pc, #328]	; (8007fcc <HAL_RCC_ClockConfig+0x1bc>)
 8007e82:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007e86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007e88:	4b50      	ldr	r3, [pc, #320]	; (8007fcc <HAL_RCC_ClockConfig+0x1bc>)
 8007e8a:	689b      	ldr	r3, [r3, #8]
 8007e8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	689b      	ldr	r3, [r3, #8]
 8007e94:	494d      	ldr	r1, [pc, #308]	; (8007fcc <HAL_RCC_ClockConfig+0x1bc>)
 8007e96:	4313      	orrs	r3, r2
 8007e98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f003 0301 	and.w	r3, r3, #1
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d044      	beq.n	8007f30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	685b      	ldr	r3, [r3, #4]
 8007eaa:	2b01      	cmp	r3, #1
 8007eac:	d107      	bne.n	8007ebe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007eae:	4b47      	ldr	r3, [pc, #284]	; (8007fcc <HAL_RCC_ClockConfig+0x1bc>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d119      	bne.n	8007eee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007eba:	2301      	movs	r3, #1
 8007ebc:	e07f      	b.n	8007fbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	685b      	ldr	r3, [r3, #4]
 8007ec2:	2b02      	cmp	r3, #2
 8007ec4:	d003      	beq.n	8007ece <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007eca:	2b03      	cmp	r3, #3
 8007ecc:	d107      	bne.n	8007ede <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007ece:	4b3f      	ldr	r3, [pc, #252]	; (8007fcc <HAL_RCC_ClockConfig+0x1bc>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d109      	bne.n	8007eee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007eda:	2301      	movs	r3, #1
 8007edc:	e06f      	b.n	8007fbe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ede:	4b3b      	ldr	r3, [pc, #236]	; (8007fcc <HAL_RCC_ClockConfig+0x1bc>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f003 0302 	and.w	r3, r3, #2
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d101      	bne.n	8007eee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007eea:	2301      	movs	r3, #1
 8007eec:	e067      	b.n	8007fbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007eee:	4b37      	ldr	r3, [pc, #220]	; (8007fcc <HAL_RCC_ClockConfig+0x1bc>)
 8007ef0:	689b      	ldr	r3, [r3, #8]
 8007ef2:	f023 0203 	bic.w	r2, r3, #3
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	4934      	ldr	r1, [pc, #208]	; (8007fcc <HAL_RCC_ClockConfig+0x1bc>)
 8007efc:	4313      	orrs	r3, r2
 8007efe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007f00:	f7fe fe2e 	bl	8006b60 <HAL_GetTick>
 8007f04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f06:	e00a      	b.n	8007f1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007f08:	f7fe fe2a 	bl	8006b60 <HAL_GetTick>
 8007f0c:	4602      	mov	r2, r0
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	1ad3      	subs	r3, r2, r3
 8007f12:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d901      	bls.n	8007f1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007f1a:	2303      	movs	r3, #3
 8007f1c:	e04f      	b.n	8007fbe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f1e:	4b2b      	ldr	r3, [pc, #172]	; (8007fcc <HAL_RCC_ClockConfig+0x1bc>)
 8007f20:	689b      	ldr	r3, [r3, #8]
 8007f22:	f003 020c 	and.w	r2, r3, #12
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	685b      	ldr	r3, [r3, #4]
 8007f2a:	009b      	lsls	r3, r3, #2
 8007f2c:	429a      	cmp	r2, r3
 8007f2e:	d1eb      	bne.n	8007f08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007f30:	4b25      	ldr	r3, [pc, #148]	; (8007fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f003 0307 	and.w	r3, r3, #7
 8007f38:	683a      	ldr	r2, [r7, #0]
 8007f3a:	429a      	cmp	r2, r3
 8007f3c:	d20c      	bcs.n	8007f58 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f3e:	4b22      	ldr	r3, [pc, #136]	; (8007fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8007f40:	683a      	ldr	r2, [r7, #0]
 8007f42:	b2d2      	uxtb	r2, r2
 8007f44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f46:	4b20      	ldr	r3, [pc, #128]	; (8007fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f003 0307 	and.w	r3, r3, #7
 8007f4e:	683a      	ldr	r2, [r7, #0]
 8007f50:	429a      	cmp	r2, r3
 8007f52:	d001      	beq.n	8007f58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007f54:	2301      	movs	r3, #1
 8007f56:	e032      	b.n	8007fbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f003 0304 	and.w	r3, r3, #4
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d008      	beq.n	8007f76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007f64:	4b19      	ldr	r3, [pc, #100]	; (8007fcc <HAL_RCC_ClockConfig+0x1bc>)
 8007f66:	689b      	ldr	r3, [r3, #8]
 8007f68:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	68db      	ldr	r3, [r3, #12]
 8007f70:	4916      	ldr	r1, [pc, #88]	; (8007fcc <HAL_RCC_ClockConfig+0x1bc>)
 8007f72:	4313      	orrs	r3, r2
 8007f74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f003 0308 	and.w	r3, r3, #8
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d009      	beq.n	8007f96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007f82:	4b12      	ldr	r3, [pc, #72]	; (8007fcc <HAL_RCC_ClockConfig+0x1bc>)
 8007f84:	689b      	ldr	r3, [r3, #8]
 8007f86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	691b      	ldr	r3, [r3, #16]
 8007f8e:	00db      	lsls	r3, r3, #3
 8007f90:	490e      	ldr	r1, [pc, #56]	; (8007fcc <HAL_RCC_ClockConfig+0x1bc>)
 8007f92:	4313      	orrs	r3, r2
 8007f94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007f96:	f000 f821 	bl	8007fdc <HAL_RCC_GetSysClockFreq>
 8007f9a:	4602      	mov	r2, r0
 8007f9c:	4b0b      	ldr	r3, [pc, #44]	; (8007fcc <HAL_RCC_ClockConfig+0x1bc>)
 8007f9e:	689b      	ldr	r3, [r3, #8]
 8007fa0:	091b      	lsrs	r3, r3, #4
 8007fa2:	f003 030f 	and.w	r3, r3, #15
 8007fa6:	490a      	ldr	r1, [pc, #40]	; (8007fd0 <HAL_RCC_ClockConfig+0x1c0>)
 8007fa8:	5ccb      	ldrb	r3, [r1, r3]
 8007faa:	fa22 f303 	lsr.w	r3, r2, r3
 8007fae:	4a09      	ldr	r2, [pc, #36]	; (8007fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8007fb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007fb2:	4b09      	ldr	r3, [pc, #36]	; (8007fd8 <HAL_RCC_ClockConfig+0x1c8>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	f7fe fd8e 	bl	8006ad8 <HAL_InitTick>

  return HAL_OK;
 8007fbc:	2300      	movs	r3, #0
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3710      	adds	r7, #16
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}
 8007fc6:	bf00      	nop
 8007fc8:	40023c00 	.word	0x40023c00
 8007fcc:	40023800 	.word	0x40023800
 8007fd0:	0800c2e4 	.word	0x0800c2e4
 8007fd4:	20000000 	.word	0x20000000
 8007fd8:	20000004 	.word	0x20000004

08007fdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007fdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007fe0:	b090      	sub	sp, #64	; 0x40
 8007fe2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	637b      	str	r3, [r7, #52]	; 0x34
 8007fe8:	2300      	movs	r3, #0
 8007fea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007fec:	2300      	movs	r3, #0
 8007fee:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007ff4:	4b59      	ldr	r3, [pc, #356]	; (800815c <HAL_RCC_GetSysClockFreq+0x180>)
 8007ff6:	689b      	ldr	r3, [r3, #8]
 8007ff8:	f003 030c 	and.w	r3, r3, #12
 8007ffc:	2b08      	cmp	r3, #8
 8007ffe:	d00d      	beq.n	800801c <HAL_RCC_GetSysClockFreq+0x40>
 8008000:	2b08      	cmp	r3, #8
 8008002:	f200 80a1 	bhi.w	8008148 <HAL_RCC_GetSysClockFreq+0x16c>
 8008006:	2b00      	cmp	r3, #0
 8008008:	d002      	beq.n	8008010 <HAL_RCC_GetSysClockFreq+0x34>
 800800a:	2b04      	cmp	r3, #4
 800800c:	d003      	beq.n	8008016 <HAL_RCC_GetSysClockFreq+0x3a>
 800800e:	e09b      	b.n	8008148 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008010:	4b53      	ldr	r3, [pc, #332]	; (8008160 <HAL_RCC_GetSysClockFreq+0x184>)
 8008012:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8008014:	e09b      	b.n	800814e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008016:	4b53      	ldr	r3, [pc, #332]	; (8008164 <HAL_RCC_GetSysClockFreq+0x188>)
 8008018:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800801a:	e098      	b.n	800814e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800801c:	4b4f      	ldr	r3, [pc, #316]	; (800815c <HAL_RCC_GetSysClockFreq+0x180>)
 800801e:	685b      	ldr	r3, [r3, #4]
 8008020:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008024:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008026:	4b4d      	ldr	r3, [pc, #308]	; (800815c <HAL_RCC_GetSysClockFreq+0x180>)
 8008028:	685b      	ldr	r3, [r3, #4]
 800802a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800802e:	2b00      	cmp	r3, #0
 8008030:	d028      	beq.n	8008084 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008032:	4b4a      	ldr	r3, [pc, #296]	; (800815c <HAL_RCC_GetSysClockFreq+0x180>)
 8008034:	685b      	ldr	r3, [r3, #4]
 8008036:	099b      	lsrs	r3, r3, #6
 8008038:	2200      	movs	r2, #0
 800803a:	623b      	str	r3, [r7, #32]
 800803c:	627a      	str	r2, [r7, #36]	; 0x24
 800803e:	6a3b      	ldr	r3, [r7, #32]
 8008040:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008044:	2100      	movs	r1, #0
 8008046:	4b47      	ldr	r3, [pc, #284]	; (8008164 <HAL_RCC_GetSysClockFreq+0x188>)
 8008048:	fb03 f201 	mul.w	r2, r3, r1
 800804c:	2300      	movs	r3, #0
 800804e:	fb00 f303 	mul.w	r3, r0, r3
 8008052:	4413      	add	r3, r2
 8008054:	4a43      	ldr	r2, [pc, #268]	; (8008164 <HAL_RCC_GetSysClockFreq+0x188>)
 8008056:	fba0 1202 	umull	r1, r2, r0, r2
 800805a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800805c:	460a      	mov	r2, r1
 800805e:	62ba      	str	r2, [r7, #40]	; 0x28
 8008060:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008062:	4413      	add	r3, r2
 8008064:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008068:	2200      	movs	r2, #0
 800806a:	61bb      	str	r3, [r7, #24]
 800806c:	61fa      	str	r2, [r7, #28]
 800806e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008072:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8008076:	f7f8 fd7d 	bl	8000b74 <__aeabi_uldivmod>
 800807a:	4602      	mov	r2, r0
 800807c:	460b      	mov	r3, r1
 800807e:	4613      	mov	r3, r2
 8008080:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008082:	e053      	b.n	800812c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008084:	4b35      	ldr	r3, [pc, #212]	; (800815c <HAL_RCC_GetSysClockFreq+0x180>)
 8008086:	685b      	ldr	r3, [r3, #4]
 8008088:	099b      	lsrs	r3, r3, #6
 800808a:	2200      	movs	r2, #0
 800808c:	613b      	str	r3, [r7, #16]
 800808e:	617a      	str	r2, [r7, #20]
 8008090:	693b      	ldr	r3, [r7, #16]
 8008092:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8008096:	f04f 0b00 	mov.w	fp, #0
 800809a:	4652      	mov	r2, sl
 800809c:	465b      	mov	r3, fp
 800809e:	f04f 0000 	mov.w	r0, #0
 80080a2:	f04f 0100 	mov.w	r1, #0
 80080a6:	0159      	lsls	r1, r3, #5
 80080a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80080ac:	0150      	lsls	r0, r2, #5
 80080ae:	4602      	mov	r2, r0
 80080b0:	460b      	mov	r3, r1
 80080b2:	ebb2 080a 	subs.w	r8, r2, sl
 80080b6:	eb63 090b 	sbc.w	r9, r3, fp
 80080ba:	f04f 0200 	mov.w	r2, #0
 80080be:	f04f 0300 	mov.w	r3, #0
 80080c2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80080c6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80080ca:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80080ce:	ebb2 0408 	subs.w	r4, r2, r8
 80080d2:	eb63 0509 	sbc.w	r5, r3, r9
 80080d6:	f04f 0200 	mov.w	r2, #0
 80080da:	f04f 0300 	mov.w	r3, #0
 80080de:	00eb      	lsls	r3, r5, #3
 80080e0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80080e4:	00e2      	lsls	r2, r4, #3
 80080e6:	4614      	mov	r4, r2
 80080e8:	461d      	mov	r5, r3
 80080ea:	eb14 030a 	adds.w	r3, r4, sl
 80080ee:	603b      	str	r3, [r7, #0]
 80080f0:	eb45 030b 	adc.w	r3, r5, fp
 80080f4:	607b      	str	r3, [r7, #4]
 80080f6:	f04f 0200 	mov.w	r2, #0
 80080fa:	f04f 0300 	mov.w	r3, #0
 80080fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008102:	4629      	mov	r1, r5
 8008104:	028b      	lsls	r3, r1, #10
 8008106:	4621      	mov	r1, r4
 8008108:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800810c:	4621      	mov	r1, r4
 800810e:	028a      	lsls	r2, r1, #10
 8008110:	4610      	mov	r0, r2
 8008112:	4619      	mov	r1, r3
 8008114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008116:	2200      	movs	r2, #0
 8008118:	60bb      	str	r3, [r7, #8]
 800811a:	60fa      	str	r2, [r7, #12]
 800811c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008120:	f7f8 fd28 	bl	8000b74 <__aeabi_uldivmod>
 8008124:	4602      	mov	r2, r0
 8008126:	460b      	mov	r3, r1
 8008128:	4613      	mov	r3, r2
 800812a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800812c:	4b0b      	ldr	r3, [pc, #44]	; (800815c <HAL_RCC_GetSysClockFreq+0x180>)
 800812e:	685b      	ldr	r3, [r3, #4]
 8008130:	0c1b      	lsrs	r3, r3, #16
 8008132:	f003 0303 	and.w	r3, r3, #3
 8008136:	3301      	adds	r3, #1
 8008138:	005b      	lsls	r3, r3, #1
 800813a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800813c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800813e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008140:	fbb2 f3f3 	udiv	r3, r2, r3
 8008144:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008146:	e002      	b.n	800814e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008148:	4b05      	ldr	r3, [pc, #20]	; (8008160 <HAL_RCC_GetSysClockFreq+0x184>)
 800814a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800814c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800814e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8008150:	4618      	mov	r0, r3
 8008152:	3740      	adds	r7, #64	; 0x40
 8008154:	46bd      	mov	sp, r7
 8008156:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800815a:	bf00      	nop
 800815c:	40023800 	.word	0x40023800
 8008160:	00f42400 	.word	0x00f42400
 8008164:	017d7840 	.word	0x017d7840

08008168 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008168:	b480      	push	{r7}
 800816a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800816c:	4b03      	ldr	r3, [pc, #12]	; (800817c <HAL_RCC_GetHCLKFreq+0x14>)
 800816e:	681b      	ldr	r3, [r3, #0]
}
 8008170:	4618      	mov	r0, r3
 8008172:	46bd      	mov	sp, r7
 8008174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008178:	4770      	bx	lr
 800817a:	bf00      	nop
 800817c:	20000000 	.word	0x20000000

08008180 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008184:	f7ff fff0 	bl	8008168 <HAL_RCC_GetHCLKFreq>
 8008188:	4602      	mov	r2, r0
 800818a:	4b05      	ldr	r3, [pc, #20]	; (80081a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800818c:	689b      	ldr	r3, [r3, #8]
 800818e:	0a9b      	lsrs	r3, r3, #10
 8008190:	f003 0307 	and.w	r3, r3, #7
 8008194:	4903      	ldr	r1, [pc, #12]	; (80081a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008196:	5ccb      	ldrb	r3, [r1, r3]
 8008198:	fa22 f303 	lsr.w	r3, r2, r3
}
 800819c:	4618      	mov	r0, r3
 800819e:	bd80      	pop	{r7, pc}
 80081a0:	40023800 	.word	0x40023800
 80081a4:	0800c2f4 	.word	0x0800c2f4

080081a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80081ac:	f7ff ffdc 	bl	8008168 <HAL_RCC_GetHCLKFreq>
 80081b0:	4602      	mov	r2, r0
 80081b2:	4b05      	ldr	r3, [pc, #20]	; (80081c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80081b4:	689b      	ldr	r3, [r3, #8]
 80081b6:	0b5b      	lsrs	r3, r3, #13
 80081b8:	f003 0307 	and.w	r3, r3, #7
 80081bc:	4903      	ldr	r1, [pc, #12]	; (80081cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80081be:	5ccb      	ldrb	r3, [r1, r3]
 80081c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	bd80      	pop	{r7, pc}
 80081c8:	40023800 	.word	0x40023800
 80081cc:	0800c2f4 	.word	0x0800c2f4

080081d0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b086      	sub	sp, #24
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
 80081d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d101      	bne.n	80081e4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80081e0:	2301      	movs	r3, #1
 80081e2:	e097      	b.n	8008314 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081ea:	b2db      	uxtb	r3, r3
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d106      	bne.n	80081fe <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2200      	movs	r2, #0
 80081f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f7fe f8c9 	bl	8006390 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2202      	movs	r2, #2
 8008202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	689b      	ldr	r3, [r3, #8]
 800820c:	687a      	ldr	r2, [r7, #4]
 800820e:	6812      	ldr	r2, [r2, #0]
 8008210:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008214:	f023 0307 	bic.w	r3, r3, #7
 8008218:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681a      	ldr	r2, [r3, #0]
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	3304      	adds	r3, #4
 8008222:	4619      	mov	r1, r3
 8008224:	4610      	mov	r0, r2
 8008226:	f000 fa57 	bl	80086d8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	689b      	ldr	r3, [r3, #8]
 8008230:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	699b      	ldr	r3, [r3, #24]
 8008238:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	6a1b      	ldr	r3, [r3, #32]
 8008240:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	697a      	ldr	r2, [r7, #20]
 8008248:	4313      	orrs	r3, r2
 800824a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800824c:	693b      	ldr	r3, [r7, #16]
 800824e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008252:	f023 0303 	bic.w	r3, r3, #3
 8008256:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	689a      	ldr	r2, [r3, #8]
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	699b      	ldr	r3, [r3, #24]
 8008260:	021b      	lsls	r3, r3, #8
 8008262:	4313      	orrs	r3, r2
 8008264:	693a      	ldr	r2, [r7, #16]
 8008266:	4313      	orrs	r3, r2
 8008268:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800826a:	693b      	ldr	r3, [r7, #16]
 800826c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8008270:	f023 030c 	bic.w	r3, r3, #12
 8008274:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008276:	693b      	ldr	r3, [r7, #16]
 8008278:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800827c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008280:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	68da      	ldr	r2, [r3, #12]
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	69db      	ldr	r3, [r3, #28]
 800828a:	021b      	lsls	r3, r3, #8
 800828c:	4313      	orrs	r3, r2
 800828e:	693a      	ldr	r2, [r7, #16]
 8008290:	4313      	orrs	r3, r2
 8008292:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	691b      	ldr	r3, [r3, #16]
 8008298:	011a      	lsls	r2, r3, #4
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	6a1b      	ldr	r3, [r3, #32]
 800829e:	031b      	lsls	r3, r3, #12
 80082a0:	4313      	orrs	r3, r2
 80082a2:	693a      	ldr	r2, [r7, #16]
 80082a4:	4313      	orrs	r3, r2
 80082a6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80082ae:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80082b6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	685a      	ldr	r2, [r3, #4]
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	695b      	ldr	r3, [r3, #20]
 80082c0:	011b      	lsls	r3, r3, #4
 80082c2:	4313      	orrs	r3, r2
 80082c4:	68fa      	ldr	r2, [r7, #12]
 80082c6:	4313      	orrs	r3, r2
 80082c8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	697a      	ldr	r2, [r7, #20]
 80082d0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	693a      	ldr	r2, [r7, #16]
 80082d8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	68fa      	ldr	r2, [r7, #12]
 80082e0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2201      	movs	r2, #1
 80082e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2201      	movs	r2, #1
 80082ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2201      	movs	r2, #1
 80082f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2201      	movs	r2, #1
 80082fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2201      	movs	r2, #1
 8008306:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2201      	movs	r2, #1
 800830e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008312:	2300      	movs	r3, #0
}
 8008314:	4618      	mov	r0, r3
 8008316:	3718      	adds	r7, #24
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}

0800831c <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b084      	sub	sp, #16
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800832c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008334:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800833c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008344:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008346:	683b      	ldr	r3, [r7, #0]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d110      	bne.n	800836e <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800834c:	7bfb      	ldrb	r3, [r7, #15]
 800834e:	2b01      	cmp	r3, #1
 8008350:	d102      	bne.n	8008358 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008352:	7b7b      	ldrb	r3, [r7, #13]
 8008354:	2b01      	cmp	r3, #1
 8008356:	d001      	beq.n	800835c <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8008358:	2301      	movs	r3, #1
 800835a:	e089      	b.n	8008470 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2202      	movs	r2, #2
 8008360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2202      	movs	r2, #2
 8008368:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800836c:	e031      	b.n	80083d2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	2b04      	cmp	r3, #4
 8008372:	d110      	bne.n	8008396 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008374:	7bbb      	ldrb	r3, [r7, #14]
 8008376:	2b01      	cmp	r3, #1
 8008378:	d102      	bne.n	8008380 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800837a:	7b3b      	ldrb	r3, [r7, #12]
 800837c:	2b01      	cmp	r3, #1
 800837e:	d001      	beq.n	8008384 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8008380:	2301      	movs	r3, #1
 8008382:	e075      	b.n	8008470 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2202      	movs	r2, #2
 8008388:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2202      	movs	r2, #2
 8008390:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008394:	e01d      	b.n	80083d2 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008396:	7bfb      	ldrb	r3, [r7, #15]
 8008398:	2b01      	cmp	r3, #1
 800839a:	d108      	bne.n	80083ae <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800839c:	7bbb      	ldrb	r3, [r7, #14]
 800839e:	2b01      	cmp	r3, #1
 80083a0:	d105      	bne.n	80083ae <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80083a2:	7b7b      	ldrb	r3, [r7, #13]
 80083a4:	2b01      	cmp	r3, #1
 80083a6:	d102      	bne.n	80083ae <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80083a8:	7b3b      	ldrb	r3, [r7, #12]
 80083aa:	2b01      	cmp	r3, #1
 80083ac:	d001      	beq.n	80083b2 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 80083ae:	2301      	movs	r3, #1
 80083b0:	e05e      	b.n	8008470 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2202      	movs	r2, #2
 80083b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2202      	movs	r2, #2
 80083be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2202      	movs	r2, #2
 80083c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2202      	movs	r2, #2
 80083ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d003      	beq.n	80083e0 <HAL_TIM_Encoder_Start_IT+0xc4>
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	2b04      	cmp	r3, #4
 80083dc:	d010      	beq.n	8008400 <HAL_TIM_Encoder_Start_IT+0xe4>
 80083de:	e01f      	b.n	8008420 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	2201      	movs	r2, #1
 80083e6:	2100      	movs	r1, #0
 80083e8:	4618      	mov	r0, r3
 80083ea:	f000 fa15 	bl	8008818 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	68da      	ldr	r2, [r3, #12]
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f042 0202 	orr.w	r2, r2, #2
 80083fc:	60da      	str	r2, [r3, #12]
      break;
 80083fe:	e02e      	b.n	800845e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	2201      	movs	r2, #1
 8008406:	2104      	movs	r1, #4
 8008408:	4618      	mov	r0, r3
 800840a:	f000 fa05 	bl	8008818 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	68da      	ldr	r2, [r3, #12]
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f042 0204 	orr.w	r2, r2, #4
 800841c:	60da      	str	r2, [r3, #12]
      break;
 800841e:	e01e      	b.n	800845e <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	2201      	movs	r2, #1
 8008426:	2100      	movs	r1, #0
 8008428:	4618      	mov	r0, r3
 800842a:	f000 f9f5 	bl	8008818 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	2201      	movs	r2, #1
 8008434:	2104      	movs	r1, #4
 8008436:	4618      	mov	r0, r3
 8008438:	f000 f9ee 	bl	8008818 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	68da      	ldr	r2, [r3, #12]
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f042 0202 	orr.w	r2, r2, #2
 800844a:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	68da      	ldr	r2, [r3, #12]
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f042 0204 	orr.w	r2, r2, #4
 800845a:	60da      	str	r2, [r3, #12]
      break;
 800845c:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	681a      	ldr	r2, [r3, #0]
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f042 0201 	orr.w	r2, r2, #1
 800846c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800846e:	2300      	movs	r3, #0
}
 8008470:	4618      	mov	r0, r3
 8008472:	3710      	adds	r7, #16
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}

08008478 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b082      	sub	sp, #8
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	691b      	ldr	r3, [r3, #16]
 8008486:	f003 0302 	and.w	r3, r3, #2
 800848a:	2b02      	cmp	r3, #2
 800848c:	d122      	bne.n	80084d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	68db      	ldr	r3, [r3, #12]
 8008494:	f003 0302 	and.w	r3, r3, #2
 8008498:	2b02      	cmp	r3, #2
 800849a:	d11b      	bne.n	80084d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f06f 0202 	mvn.w	r2, #2
 80084a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2201      	movs	r2, #1
 80084aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	699b      	ldr	r3, [r3, #24]
 80084b2:	f003 0303 	and.w	r3, r3, #3
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d003      	beq.n	80084c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f7f8 fd08 	bl	8000ed0 <HAL_TIM_IC_CaptureCallback>
 80084c0:	e005      	b.n	80084ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f000 f8ea 	bl	800869c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f000 f8f1 	bl	80086b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2200      	movs	r2, #0
 80084d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	691b      	ldr	r3, [r3, #16]
 80084da:	f003 0304 	and.w	r3, r3, #4
 80084de:	2b04      	cmp	r3, #4
 80084e0:	d122      	bne.n	8008528 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	68db      	ldr	r3, [r3, #12]
 80084e8:	f003 0304 	and.w	r3, r3, #4
 80084ec:	2b04      	cmp	r3, #4
 80084ee:	d11b      	bne.n	8008528 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f06f 0204 	mvn.w	r2, #4
 80084f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2202      	movs	r2, #2
 80084fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	699b      	ldr	r3, [r3, #24]
 8008506:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800850a:	2b00      	cmp	r3, #0
 800850c:	d003      	beq.n	8008516 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f7f8 fcde 	bl	8000ed0 <HAL_TIM_IC_CaptureCallback>
 8008514:	e005      	b.n	8008522 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f000 f8c0 	bl	800869c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	f000 f8c7 	bl	80086b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2200      	movs	r2, #0
 8008526:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	691b      	ldr	r3, [r3, #16]
 800852e:	f003 0308 	and.w	r3, r3, #8
 8008532:	2b08      	cmp	r3, #8
 8008534:	d122      	bne.n	800857c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	68db      	ldr	r3, [r3, #12]
 800853c:	f003 0308 	and.w	r3, r3, #8
 8008540:	2b08      	cmp	r3, #8
 8008542:	d11b      	bne.n	800857c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f06f 0208 	mvn.w	r2, #8
 800854c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2204      	movs	r2, #4
 8008552:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	69db      	ldr	r3, [r3, #28]
 800855a:	f003 0303 	and.w	r3, r3, #3
 800855e:	2b00      	cmp	r3, #0
 8008560:	d003      	beq.n	800856a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f7f8 fcb4 	bl	8000ed0 <HAL_TIM_IC_CaptureCallback>
 8008568:	e005      	b.n	8008576 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f000 f896 	bl	800869c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f000 f89d 	bl	80086b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2200      	movs	r2, #0
 800857a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	691b      	ldr	r3, [r3, #16]
 8008582:	f003 0310 	and.w	r3, r3, #16
 8008586:	2b10      	cmp	r3, #16
 8008588:	d122      	bne.n	80085d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	68db      	ldr	r3, [r3, #12]
 8008590:	f003 0310 	and.w	r3, r3, #16
 8008594:	2b10      	cmp	r3, #16
 8008596:	d11b      	bne.n	80085d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f06f 0210 	mvn.w	r2, #16
 80085a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2208      	movs	r2, #8
 80085a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	69db      	ldr	r3, [r3, #28]
 80085ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d003      	beq.n	80085be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f7f8 fc8a 	bl	8000ed0 <HAL_TIM_IC_CaptureCallback>
 80085bc:	e005      	b.n	80085ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f000 f86c 	bl	800869c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f000 f873 	bl	80086b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2200      	movs	r2, #0
 80085ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	691b      	ldr	r3, [r3, #16]
 80085d6:	f003 0301 	and.w	r3, r3, #1
 80085da:	2b01      	cmp	r3, #1
 80085dc:	d10e      	bne.n	80085fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	68db      	ldr	r3, [r3, #12]
 80085e4:	f003 0301 	and.w	r3, r3, #1
 80085e8:	2b01      	cmp	r3, #1
 80085ea:	d107      	bne.n	80085fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f06f 0201 	mvn.w	r2, #1
 80085f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	f000 f846 	bl	8008688 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	691b      	ldr	r3, [r3, #16]
 8008602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008606:	2b80      	cmp	r3, #128	; 0x80
 8008608:	d10e      	bne.n	8008628 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	68db      	ldr	r3, [r3, #12]
 8008610:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008614:	2b80      	cmp	r3, #128	; 0x80
 8008616:	d107      	bne.n	8008628 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008620:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f000 f9a4 	bl	8008970 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	691b      	ldr	r3, [r3, #16]
 800862e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008632:	2b40      	cmp	r3, #64	; 0x40
 8008634:	d10e      	bne.n	8008654 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	68db      	ldr	r3, [r3, #12]
 800863c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008640:	2b40      	cmp	r3, #64	; 0x40
 8008642:	d107      	bne.n	8008654 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800864c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f000 f838 	bl	80086c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	691b      	ldr	r3, [r3, #16]
 800865a:	f003 0320 	and.w	r3, r3, #32
 800865e:	2b20      	cmp	r3, #32
 8008660:	d10e      	bne.n	8008680 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	68db      	ldr	r3, [r3, #12]
 8008668:	f003 0320 	and.w	r3, r3, #32
 800866c:	2b20      	cmp	r3, #32
 800866e:	d107      	bne.n	8008680 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f06f 0220 	mvn.w	r2, #32
 8008678:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f000 f96e 	bl	800895c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008680:	bf00      	nop
 8008682:	3708      	adds	r7, #8
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}

08008688 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008688:	b480      	push	{r7}
 800868a:	b083      	sub	sp, #12
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008690:	bf00      	nop
 8008692:	370c      	adds	r7, #12
 8008694:	46bd      	mov	sp, r7
 8008696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869a:	4770      	bx	lr

0800869c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800869c:	b480      	push	{r7}
 800869e:	b083      	sub	sp, #12
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80086a4:	bf00      	nop
 80086a6:	370c      	adds	r7, #12
 80086a8:	46bd      	mov	sp, r7
 80086aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ae:	4770      	bx	lr

080086b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80086b0:	b480      	push	{r7}
 80086b2:	b083      	sub	sp, #12
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80086b8:	bf00      	nop
 80086ba:	370c      	adds	r7, #12
 80086bc:	46bd      	mov	sp, r7
 80086be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c2:	4770      	bx	lr

080086c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b083      	sub	sp, #12
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80086cc:	bf00      	nop
 80086ce:	370c      	adds	r7, #12
 80086d0:	46bd      	mov	sp, r7
 80086d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d6:	4770      	bx	lr

080086d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80086d8:	b480      	push	{r7}
 80086da:	b085      	sub	sp, #20
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
 80086e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	4a40      	ldr	r2, [pc, #256]	; (80087ec <TIM_Base_SetConfig+0x114>)
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d013      	beq.n	8008718 <TIM_Base_SetConfig+0x40>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086f6:	d00f      	beq.n	8008718 <TIM_Base_SetConfig+0x40>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	4a3d      	ldr	r2, [pc, #244]	; (80087f0 <TIM_Base_SetConfig+0x118>)
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d00b      	beq.n	8008718 <TIM_Base_SetConfig+0x40>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	4a3c      	ldr	r2, [pc, #240]	; (80087f4 <TIM_Base_SetConfig+0x11c>)
 8008704:	4293      	cmp	r3, r2
 8008706:	d007      	beq.n	8008718 <TIM_Base_SetConfig+0x40>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	4a3b      	ldr	r2, [pc, #236]	; (80087f8 <TIM_Base_SetConfig+0x120>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d003      	beq.n	8008718 <TIM_Base_SetConfig+0x40>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	4a3a      	ldr	r2, [pc, #232]	; (80087fc <TIM_Base_SetConfig+0x124>)
 8008714:	4293      	cmp	r3, r2
 8008716:	d108      	bne.n	800872a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800871e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	685b      	ldr	r3, [r3, #4]
 8008724:	68fa      	ldr	r2, [r7, #12]
 8008726:	4313      	orrs	r3, r2
 8008728:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	4a2f      	ldr	r2, [pc, #188]	; (80087ec <TIM_Base_SetConfig+0x114>)
 800872e:	4293      	cmp	r3, r2
 8008730:	d02b      	beq.n	800878a <TIM_Base_SetConfig+0xb2>
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008738:	d027      	beq.n	800878a <TIM_Base_SetConfig+0xb2>
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	4a2c      	ldr	r2, [pc, #176]	; (80087f0 <TIM_Base_SetConfig+0x118>)
 800873e:	4293      	cmp	r3, r2
 8008740:	d023      	beq.n	800878a <TIM_Base_SetConfig+0xb2>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	4a2b      	ldr	r2, [pc, #172]	; (80087f4 <TIM_Base_SetConfig+0x11c>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d01f      	beq.n	800878a <TIM_Base_SetConfig+0xb2>
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	4a2a      	ldr	r2, [pc, #168]	; (80087f8 <TIM_Base_SetConfig+0x120>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d01b      	beq.n	800878a <TIM_Base_SetConfig+0xb2>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	4a29      	ldr	r2, [pc, #164]	; (80087fc <TIM_Base_SetConfig+0x124>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d017      	beq.n	800878a <TIM_Base_SetConfig+0xb2>
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	4a28      	ldr	r2, [pc, #160]	; (8008800 <TIM_Base_SetConfig+0x128>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d013      	beq.n	800878a <TIM_Base_SetConfig+0xb2>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	4a27      	ldr	r2, [pc, #156]	; (8008804 <TIM_Base_SetConfig+0x12c>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d00f      	beq.n	800878a <TIM_Base_SetConfig+0xb2>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	4a26      	ldr	r2, [pc, #152]	; (8008808 <TIM_Base_SetConfig+0x130>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d00b      	beq.n	800878a <TIM_Base_SetConfig+0xb2>
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	4a25      	ldr	r2, [pc, #148]	; (800880c <TIM_Base_SetConfig+0x134>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d007      	beq.n	800878a <TIM_Base_SetConfig+0xb2>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	4a24      	ldr	r2, [pc, #144]	; (8008810 <TIM_Base_SetConfig+0x138>)
 800877e:	4293      	cmp	r3, r2
 8008780:	d003      	beq.n	800878a <TIM_Base_SetConfig+0xb2>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	4a23      	ldr	r2, [pc, #140]	; (8008814 <TIM_Base_SetConfig+0x13c>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d108      	bne.n	800879c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008790:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	68db      	ldr	r3, [r3, #12]
 8008796:	68fa      	ldr	r2, [r7, #12]
 8008798:	4313      	orrs	r3, r2
 800879a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	695b      	ldr	r3, [r3, #20]
 80087a6:	4313      	orrs	r3, r2
 80087a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	68fa      	ldr	r2, [r7, #12]
 80087ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	689a      	ldr	r2, [r3, #8]
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	681a      	ldr	r2, [r3, #0]
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	4a0a      	ldr	r2, [pc, #40]	; (80087ec <TIM_Base_SetConfig+0x114>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d003      	beq.n	80087d0 <TIM_Base_SetConfig+0xf8>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	4a0c      	ldr	r2, [pc, #48]	; (80087fc <TIM_Base_SetConfig+0x124>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d103      	bne.n	80087d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	691a      	ldr	r2, [r3, #16]
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2201      	movs	r2, #1
 80087dc:	615a      	str	r2, [r3, #20]
}
 80087de:	bf00      	nop
 80087e0:	3714      	adds	r7, #20
 80087e2:	46bd      	mov	sp, r7
 80087e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e8:	4770      	bx	lr
 80087ea:	bf00      	nop
 80087ec:	40010000 	.word	0x40010000
 80087f0:	40000400 	.word	0x40000400
 80087f4:	40000800 	.word	0x40000800
 80087f8:	40000c00 	.word	0x40000c00
 80087fc:	40010400 	.word	0x40010400
 8008800:	40014000 	.word	0x40014000
 8008804:	40014400 	.word	0x40014400
 8008808:	40014800 	.word	0x40014800
 800880c:	40001800 	.word	0x40001800
 8008810:	40001c00 	.word	0x40001c00
 8008814:	40002000 	.word	0x40002000

08008818 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008818:	b480      	push	{r7}
 800881a:	b087      	sub	sp, #28
 800881c:	af00      	add	r7, sp, #0
 800881e:	60f8      	str	r0, [r7, #12]
 8008820:	60b9      	str	r1, [r7, #8]
 8008822:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	f003 031f 	and.w	r3, r3, #31
 800882a:	2201      	movs	r2, #1
 800882c:	fa02 f303 	lsl.w	r3, r2, r3
 8008830:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	6a1a      	ldr	r2, [r3, #32]
 8008836:	697b      	ldr	r3, [r7, #20]
 8008838:	43db      	mvns	r3, r3
 800883a:	401a      	ands	r2, r3
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	6a1a      	ldr	r2, [r3, #32]
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	f003 031f 	and.w	r3, r3, #31
 800884a:	6879      	ldr	r1, [r7, #4]
 800884c:	fa01 f303 	lsl.w	r3, r1, r3
 8008850:	431a      	orrs	r2, r3
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	621a      	str	r2, [r3, #32]
}
 8008856:	bf00      	nop
 8008858:	371c      	adds	r7, #28
 800885a:	46bd      	mov	sp, r7
 800885c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008860:	4770      	bx	lr
	...

08008864 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008864:	b480      	push	{r7}
 8008866:	b085      	sub	sp, #20
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
 800886c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008874:	2b01      	cmp	r3, #1
 8008876:	d101      	bne.n	800887c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008878:	2302      	movs	r3, #2
 800887a:	e05a      	b.n	8008932 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2201      	movs	r2, #1
 8008880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2202      	movs	r2, #2
 8008888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	685b      	ldr	r3, [r3, #4]
 8008892:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	689b      	ldr	r3, [r3, #8]
 800889a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	68fa      	ldr	r2, [r7, #12]
 80088aa:	4313      	orrs	r3, r2
 80088ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	68fa      	ldr	r2, [r7, #12]
 80088b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	4a21      	ldr	r2, [pc, #132]	; (8008940 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80088bc:	4293      	cmp	r3, r2
 80088be:	d022      	beq.n	8008906 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088c8:	d01d      	beq.n	8008906 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	4a1d      	ldr	r2, [pc, #116]	; (8008944 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80088d0:	4293      	cmp	r3, r2
 80088d2:	d018      	beq.n	8008906 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	4a1b      	ldr	r2, [pc, #108]	; (8008948 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80088da:	4293      	cmp	r3, r2
 80088dc:	d013      	beq.n	8008906 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	4a1a      	ldr	r2, [pc, #104]	; (800894c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d00e      	beq.n	8008906 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4a18      	ldr	r2, [pc, #96]	; (8008950 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d009      	beq.n	8008906 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	4a17      	ldr	r2, [pc, #92]	; (8008954 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d004      	beq.n	8008906 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	4a15      	ldr	r2, [pc, #84]	; (8008958 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d10c      	bne.n	8008920 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008906:	68bb      	ldr	r3, [r7, #8]
 8008908:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800890c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	685b      	ldr	r3, [r3, #4]
 8008912:	68ba      	ldr	r2, [r7, #8]
 8008914:	4313      	orrs	r3, r2
 8008916:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	68ba      	ldr	r2, [r7, #8]
 800891e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2201      	movs	r2, #1
 8008924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2200      	movs	r2, #0
 800892c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008930:	2300      	movs	r3, #0
}
 8008932:	4618      	mov	r0, r3
 8008934:	3714      	adds	r7, #20
 8008936:	46bd      	mov	sp, r7
 8008938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893c:	4770      	bx	lr
 800893e:	bf00      	nop
 8008940:	40010000 	.word	0x40010000
 8008944:	40000400 	.word	0x40000400
 8008948:	40000800 	.word	0x40000800
 800894c:	40000c00 	.word	0x40000c00
 8008950:	40010400 	.word	0x40010400
 8008954:	40014000 	.word	0x40014000
 8008958:	40001800 	.word	0x40001800

0800895c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800895c:	b480      	push	{r7}
 800895e:	b083      	sub	sp, #12
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008964:	bf00      	nop
 8008966:	370c      	adds	r7, #12
 8008968:	46bd      	mov	sp, r7
 800896a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896e:	4770      	bx	lr

08008970 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008970:	b480      	push	{r7}
 8008972:	b083      	sub	sp, #12
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008978:	bf00      	nop
 800897a:	370c      	adds	r7, #12
 800897c:	46bd      	mov	sp, r7
 800897e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008982:	4770      	bx	lr

08008984 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b082      	sub	sp, #8
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d101      	bne.n	8008996 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008992:	2301      	movs	r3, #1
 8008994:	e03f      	b.n	8008a16 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800899c:	b2db      	uxtb	r3, r3
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d106      	bne.n	80089b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2200      	movs	r2, #0
 80089a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f7fd fd9a 	bl	80064e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2224      	movs	r2, #36	; 0x24
 80089b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	68da      	ldr	r2, [r3, #12]
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80089c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f000 ff43 	bl	8009854 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	691a      	ldr	r2, [r3, #16]
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80089dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	695a      	ldr	r2, [r3, #20]
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80089ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	68da      	ldr	r2, [r3, #12]
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80089fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	2200      	movs	r2, #0
 8008a02:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2220      	movs	r2, #32
 8008a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2220      	movs	r2, #32
 8008a10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008a14:	2300      	movs	r3, #0
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	3708      	adds	r7, #8
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}
	...

08008a20 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b08c      	sub	sp, #48	; 0x30
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	60f8      	str	r0, [r7, #12]
 8008a28:	60b9      	str	r1, [r7, #8]
 8008a2a:	4613      	mov	r3, r2
 8008a2c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a34:	b2db      	uxtb	r3, r3
 8008a36:	2b20      	cmp	r3, #32
 8008a38:	d165      	bne.n	8008b06 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d002      	beq.n	8008a46 <HAL_UART_Transmit_DMA+0x26>
 8008a40:	88fb      	ldrh	r3, [r7, #6]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d101      	bne.n	8008a4a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8008a46:	2301      	movs	r3, #1
 8008a48:	e05e      	b.n	8008b08 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a50:	2b01      	cmp	r3, #1
 8008a52:	d101      	bne.n	8008a58 <HAL_UART_Transmit_DMA+0x38>
 8008a54:	2302      	movs	r3, #2
 8008a56:	e057      	b.n	8008b08 <HAL_UART_Transmit_DMA+0xe8>
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	2201      	movs	r2, #1
 8008a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8008a60:	68ba      	ldr	r2, [r7, #8]
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	88fa      	ldrh	r2, [r7, #6]
 8008a6a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	88fa      	ldrh	r2, [r7, #6]
 8008a70:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	2200      	movs	r2, #0
 8008a76:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	2221      	movs	r2, #33	; 0x21
 8008a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a84:	4a22      	ldr	r2, [pc, #136]	; (8008b10 <HAL_UART_Transmit_DMA+0xf0>)
 8008a86:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a8c:	4a21      	ldr	r2, [pc, #132]	; (8008b14 <HAL_UART_Transmit_DMA+0xf4>)
 8008a8e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a94:	4a20      	ldr	r2, [pc, #128]	; (8008b18 <HAL_UART_Transmit_DMA+0xf8>)
 8008a96:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8008aa0:	f107 0308 	add.w	r3, r7, #8
 8008aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aac:	6819      	ldr	r1, [r3, #0]
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	3304      	adds	r3, #4
 8008ab4:	461a      	mov	r2, r3
 8008ab6:	88fb      	ldrh	r3, [r7, #6]
 8008ab8:	f7fe fa42 	bl	8006f40 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008ac4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	3314      	adds	r3, #20
 8008ad4:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ad6:	69bb      	ldr	r3, [r7, #24]
 8008ad8:	e853 3f00 	ldrex	r3, [r3]
 8008adc:	617b      	str	r3, [r7, #20]
   return(result);
 8008ade:	697b      	ldr	r3, [r7, #20]
 8008ae0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ae4:	62bb      	str	r3, [r7, #40]	; 0x28
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	3314      	adds	r3, #20
 8008aec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008aee:	627a      	str	r2, [r7, #36]	; 0x24
 8008af0:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008af2:	6a39      	ldr	r1, [r7, #32]
 8008af4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008af6:	e841 2300 	strex	r3, r2, [r1]
 8008afa:	61fb      	str	r3, [r7, #28]
   return(result);
 8008afc:	69fb      	ldr	r3, [r7, #28]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d1e5      	bne.n	8008ace <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8008b02:	2300      	movs	r3, #0
 8008b04:	e000      	b.n	8008b08 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8008b06:	2302      	movs	r3, #2
  }
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	3730      	adds	r7, #48	; 0x30
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bd80      	pop	{r7, pc}
 8008b10:	080090ed 	.word	0x080090ed
 8008b14:	08009187 	.word	0x08009187
 8008b18:	080092ff 	.word	0x080092ff

08008b1c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b084      	sub	sp, #16
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	60f8      	str	r0, [r7, #12]
 8008b24:	60b9      	str	r1, [r7, #8]
 8008b26:	4613      	mov	r3, r2
 8008b28:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008b30:	b2db      	uxtb	r3, r3
 8008b32:	2b20      	cmp	r3, #32
 8008b34:	d11d      	bne.n	8008b72 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d002      	beq.n	8008b42 <HAL_UART_Receive_DMA+0x26>
 8008b3c:	88fb      	ldrh	r3, [r7, #6]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d101      	bne.n	8008b46 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8008b42:	2301      	movs	r3, #1
 8008b44:	e016      	b.n	8008b74 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b4c:	2b01      	cmp	r3, #1
 8008b4e:	d101      	bne.n	8008b54 <HAL_UART_Receive_DMA+0x38>
 8008b50:	2302      	movs	r3, #2
 8008b52:	e00f      	b.n	8008b74 <HAL_UART_Receive_DMA+0x58>
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	2201      	movs	r2, #1
 8008b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	2200      	movs	r2, #0
 8008b60:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008b62:	88fb      	ldrh	r3, [r7, #6]
 8008b64:	461a      	mov	r2, r3
 8008b66:	68b9      	ldr	r1, [r7, #8]
 8008b68:	68f8      	ldr	r0, [r7, #12]
 8008b6a:	f000 fc13 	bl	8009394 <UART_Start_Receive_DMA>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	e000      	b.n	8008b74 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008b72:	2302      	movs	r3, #2
  }
}
 8008b74:	4618      	mov	r0, r3
 8008b76:	3710      	adds	r7, #16
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}

08008b7c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b0ba      	sub	sp, #232	; 0xe8
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	68db      	ldr	r3, [r3, #12]
 8008b94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	695b      	ldr	r3, [r3, #20]
 8008b9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008bae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008bb2:	f003 030f 	and.w	r3, r3, #15
 8008bb6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008bba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d10f      	bne.n	8008be2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008bc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008bc6:	f003 0320 	and.w	r3, r3, #32
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d009      	beq.n	8008be2 <HAL_UART_IRQHandler+0x66>
 8008bce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008bd2:	f003 0320 	and.w	r3, r3, #32
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d003      	beq.n	8008be2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	f000 fd7f 	bl	80096de <UART_Receive_IT>
      return;
 8008be0:	e256      	b.n	8009090 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008be2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	f000 80de 	beq.w	8008da8 <HAL_UART_IRQHandler+0x22c>
 8008bec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008bf0:	f003 0301 	and.w	r3, r3, #1
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d106      	bne.n	8008c06 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008bf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008bfc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	f000 80d1 	beq.w	8008da8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008c06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c0a:	f003 0301 	and.w	r3, r3, #1
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d00b      	beq.n	8008c2a <HAL_UART_IRQHandler+0xae>
 8008c12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d005      	beq.n	8008c2a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c22:	f043 0201 	orr.w	r2, r3, #1
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008c2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c2e:	f003 0304 	and.w	r3, r3, #4
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d00b      	beq.n	8008c4e <HAL_UART_IRQHandler+0xd2>
 8008c36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008c3a:	f003 0301 	and.w	r3, r3, #1
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d005      	beq.n	8008c4e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c46:	f043 0202 	orr.w	r2, r3, #2
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008c4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c52:	f003 0302 	and.w	r3, r3, #2
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d00b      	beq.n	8008c72 <HAL_UART_IRQHandler+0xf6>
 8008c5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008c5e:	f003 0301 	and.w	r3, r3, #1
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d005      	beq.n	8008c72 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c6a:	f043 0204 	orr.w	r2, r3, #4
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008c72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c76:	f003 0308 	and.w	r3, r3, #8
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d011      	beq.n	8008ca2 <HAL_UART_IRQHandler+0x126>
 8008c7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c82:	f003 0320 	and.w	r3, r3, #32
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d105      	bne.n	8008c96 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008c8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008c8e:	f003 0301 	and.w	r3, r3, #1
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d005      	beq.n	8008ca2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c9a:	f043 0208 	orr.w	r2, r3, #8
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	f000 81ed 	beq.w	8009086 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008cac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008cb0:	f003 0320 	and.w	r3, r3, #32
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d008      	beq.n	8008cca <HAL_UART_IRQHandler+0x14e>
 8008cb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008cbc:	f003 0320 	and.w	r3, r3, #32
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d002      	beq.n	8008cca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f000 fd0a 	bl	80096de <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	695b      	ldr	r3, [r3, #20]
 8008cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cd4:	2b40      	cmp	r3, #64	; 0x40
 8008cd6:	bf0c      	ite	eq
 8008cd8:	2301      	moveq	r3, #1
 8008cda:	2300      	movne	r3, #0
 8008cdc:	b2db      	uxtb	r3, r3
 8008cde:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ce6:	f003 0308 	and.w	r3, r3, #8
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d103      	bne.n	8008cf6 <HAL_UART_IRQHandler+0x17a>
 8008cee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d04f      	beq.n	8008d96 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f000 fc12 	bl	8009520 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	695b      	ldr	r3, [r3, #20]
 8008d02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d06:	2b40      	cmp	r3, #64	; 0x40
 8008d08:	d141      	bne.n	8008d8e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	3314      	adds	r3, #20
 8008d10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d14:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008d18:	e853 3f00 	ldrex	r3, [r3]
 8008d1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008d20:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008d24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	3314      	adds	r3, #20
 8008d32:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008d36:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008d3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d3e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008d42:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008d46:	e841 2300 	strex	r3, r2, [r1]
 8008d4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008d4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d1d9      	bne.n	8008d0a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d013      	beq.n	8008d86 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d62:	4a7d      	ldr	r2, [pc, #500]	; (8008f58 <HAL_UART_IRQHandler+0x3dc>)
 8008d64:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	f7fe f9b0 	bl	80070d0 <HAL_DMA_Abort_IT>
 8008d70:	4603      	mov	r3, r0
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d016      	beq.n	8008da4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d7c:	687a      	ldr	r2, [r7, #4]
 8008d7e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008d80:	4610      	mov	r0, r2
 8008d82:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d84:	e00e      	b.n	8008da4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f000 f99a 	bl	80090c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d8c:	e00a      	b.n	8008da4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f000 f996 	bl	80090c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d94:	e006      	b.n	8008da4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f000 f992 	bl	80090c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2200      	movs	r2, #0
 8008da0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008da2:	e170      	b.n	8009086 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008da4:	bf00      	nop
    return;
 8008da6:	e16e      	b.n	8009086 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dac:	2b01      	cmp	r3, #1
 8008dae:	f040 814a 	bne.w	8009046 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008db2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008db6:	f003 0310 	and.w	r3, r3, #16
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	f000 8143 	beq.w	8009046 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008dc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008dc4:	f003 0310 	and.w	r3, r3, #16
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	f000 813c 	beq.w	8009046 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008dce:	2300      	movs	r3, #0
 8008dd0:	60bb      	str	r3, [r7, #8]
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	60bb      	str	r3, [r7, #8]
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	685b      	ldr	r3, [r3, #4]
 8008de0:	60bb      	str	r3, [r7, #8]
 8008de2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	695b      	ldr	r3, [r3, #20]
 8008dea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dee:	2b40      	cmp	r3, #64	; 0x40
 8008df0:	f040 80b4 	bne.w	8008f5c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	685b      	ldr	r3, [r3, #4]
 8008dfc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008e00:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	f000 8140 	beq.w	800908a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008e0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008e12:	429a      	cmp	r2, r3
 8008e14:	f080 8139 	bcs.w	800908a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008e1e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e24:	69db      	ldr	r3, [r3, #28]
 8008e26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e2a:	f000 8088 	beq.w	8008f3e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	330c      	adds	r3, #12
 8008e34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e38:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008e3c:	e853 3f00 	ldrex	r3, [r3]
 8008e40:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008e44:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008e48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e4c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	330c      	adds	r3, #12
 8008e56:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008e5a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008e5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e62:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008e66:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008e6a:	e841 2300 	strex	r3, r2, [r1]
 8008e6e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008e72:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d1d9      	bne.n	8008e2e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	3314      	adds	r3, #20
 8008e80:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008e84:	e853 3f00 	ldrex	r3, [r3]
 8008e88:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008e8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008e8c:	f023 0301 	bic.w	r3, r3, #1
 8008e90:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	3314      	adds	r3, #20
 8008e9a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008e9e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008ea2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ea4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008ea6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008eaa:	e841 2300 	strex	r3, r2, [r1]
 8008eae:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008eb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d1e1      	bne.n	8008e7a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	3314      	adds	r3, #20
 8008ebc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ebe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008ec0:	e853 3f00 	ldrex	r3, [r3]
 8008ec4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008ec6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ec8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ecc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	3314      	adds	r3, #20
 8008ed6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008eda:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008edc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ede:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008ee0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008ee2:	e841 2300 	strex	r3, r2, [r1]
 8008ee6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008ee8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d1e3      	bne.n	8008eb6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	2220      	movs	r2, #32
 8008ef2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2200      	movs	r2, #0
 8008efa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	330c      	adds	r3, #12
 8008f02:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f06:	e853 3f00 	ldrex	r3, [r3]
 8008f0a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008f0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f0e:	f023 0310 	bic.w	r3, r3, #16
 8008f12:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	330c      	adds	r3, #12
 8008f1c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008f20:	65ba      	str	r2, [r7, #88]	; 0x58
 8008f22:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f24:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008f26:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008f28:	e841 2300 	strex	r3, r2, [r1]
 8008f2c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008f2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d1e3      	bne.n	8008efc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f7fe f859 	bl	8006ff0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008f46:	b29b      	uxth	r3, r3
 8008f48:	1ad3      	subs	r3, r2, r3
 8008f4a:	b29b      	uxth	r3, r3
 8008f4c:	4619      	mov	r1, r3
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f000 f8c0 	bl	80090d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008f54:	e099      	b.n	800908a <HAL_UART_IRQHandler+0x50e>
 8008f56:	bf00      	nop
 8008f58:	080095e7 	.word	0x080095e7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008f64:	b29b      	uxth	r3, r3
 8008f66:	1ad3      	subs	r3, r2, r3
 8008f68:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008f70:	b29b      	uxth	r3, r3
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	f000 808b 	beq.w	800908e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008f78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	f000 8086 	beq.w	800908e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	330c      	adds	r3, #12
 8008f88:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f8c:	e853 3f00 	ldrex	r3, [r3]
 8008f90:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f94:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008f98:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	330c      	adds	r3, #12
 8008fa2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008fa6:	647a      	str	r2, [r7, #68]	; 0x44
 8008fa8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008faa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008fac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008fae:	e841 2300 	strex	r3, r2, [r1]
 8008fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008fb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d1e3      	bne.n	8008f82 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	3314      	adds	r3, #20
 8008fc0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fc4:	e853 3f00 	ldrex	r3, [r3]
 8008fc8:	623b      	str	r3, [r7, #32]
   return(result);
 8008fca:	6a3b      	ldr	r3, [r7, #32]
 8008fcc:	f023 0301 	bic.w	r3, r3, #1
 8008fd0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	3314      	adds	r3, #20
 8008fda:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008fde:	633a      	str	r2, [r7, #48]	; 0x30
 8008fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fe2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008fe4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008fe6:	e841 2300 	strex	r3, r2, [r1]
 8008fea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d1e3      	bne.n	8008fba <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2220      	movs	r2, #32
 8008ff6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	330c      	adds	r3, #12
 8009006:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009008:	693b      	ldr	r3, [r7, #16]
 800900a:	e853 3f00 	ldrex	r3, [r3]
 800900e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	f023 0310 	bic.w	r3, r3, #16
 8009016:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	330c      	adds	r3, #12
 8009020:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009024:	61fa      	str	r2, [r7, #28]
 8009026:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009028:	69b9      	ldr	r1, [r7, #24]
 800902a:	69fa      	ldr	r2, [r7, #28]
 800902c:	e841 2300 	strex	r3, r2, [r1]
 8009030:	617b      	str	r3, [r7, #20]
   return(result);
 8009032:	697b      	ldr	r3, [r7, #20]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d1e3      	bne.n	8009000 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009038:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800903c:	4619      	mov	r1, r3
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f000 f848 	bl	80090d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009044:	e023      	b.n	800908e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009046:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800904a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800904e:	2b00      	cmp	r3, #0
 8009050:	d009      	beq.n	8009066 <HAL_UART_IRQHandler+0x4ea>
 8009052:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800905a:	2b00      	cmp	r3, #0
 800905c:	d003      	beq.n	8009066 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f000 fad5 	bl	800960e <UART_Transmit_IT>
    return;
 8009064:	e014      	b.n	8009090 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009066:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800906a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800906e:	2b00      	cmp	r3, #0
 8009070:	d00e      	beq.n	8009090 <HAL_UART_IRQHandler+0x514>
 8009072:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800907a:	2b00      	cmp	r3, #0
 800907c:	d008      	beq.n	8009090 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f000 fb15 	bl	80096ae <UART_EndTransmit_IT>
    return;
 8009084:	e004      	b.n	8009090 <HAL_UART_IRQHandler+0x514>
    return;
 8009086:	bf00      	nop
 8009088:	e002      	b.n	8009090 <HAL_UART_IRQHandler+0x514>
      return;
 800908a:	bf00      	nop
 800908c:	e000      	b.n	8009090 <HAL_UART_IRQHandler+0x514>
      return;
 800908e:	bf00      	nop
  }
}
 8009090:	37e8      	adds	r7, #232	; 0xe8
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}
 8009096:	bf00      	nop

08009098 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009098:	b480      	push	{r7}
 800909a:	b083      	sub	sp, #12
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80090a0:	bf00      	nop
 80090a2:	370c      	adds	r7, #12
 80090a4:	46bd      	mov	sp, r7
 80090a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090aa:	4770      	bx	lr

080090ac <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80090ac:	b480      	push	{r7}
 80090ae:	b083      	sub	sp, #12
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80090b4:	bf00      	nop
 80090b6:	370c      	adds	r7, #12
 80090b8:	46bd      	mov	sp, r7
 80090ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090be:	4770      	bx	lr

080090c0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80090c0:	b480      	push	{r7}
 80090c2:	b083      	sub	sp, #12
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80090c8:	bf00      	nop
 80090ca:	370c      	adds	r7, #12
 80090cc:	46bd      	mov	sp, r7
 80090ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d2:	4770      	bx	lr

080090d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80090d4:	b480      	push	{r7}
 80090d6:	b083      	sub	sp, #12
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
 80090dc:	460b      	mov	r3, r1
 80090de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80090e0:	bf00      	nop
 80090e2:	370c      	adds	r7, #12
 80090e4:	46bd      	mov	sp, r7
 80090e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ea:	4770      	bx	lr

080090ec <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b090      	sub	sp, #64	; 0x40
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009104:	2b00      	cmp	r3, #0
 8009106:	d137      	bne.n	8009178 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8009108:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800910a:	2200      	movs	r2, #0
 800910c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800910e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	3314      	adds	r3, #20
 8009114:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009118:	e853 3f00 	ldrex	r3, [r3]
 800911c:	623b      	str	r3, [r7, #32]
   return(result);
 800911e:	6a3b      	ldr	r3, [r7, #32]
 8009120:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009124:	63bb      	str	r3, [r7, #56]	; 0x38
 8009126:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	3314      	adds	r3, #20
 800912c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800912e:	633a      	str	r2, [r7, #48]	; 0x30
 8009130:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009132:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009134:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009136:	e841 2300 	strex	r3, r2, [r1]
 800913a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800913c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800913e:	2b00      	cmp	r3, #0
 8009140:	d1e5      	bne.n	800910e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009142:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	330c      	adds	r3, #12
 8009148:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800914a:	693b      	ldr	r3, [r7, #16]
 800914c:	e853 3f00 	ldrex	r3, [r3]
 8009150:	60fb      	str	r3, [r7, #12]
   return(result);
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009158:	637b      	str	r3, [r7, #52]	; 0x34
 800915a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	330c      	adds	r3, #12
 8009160:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009162:	61fa      	str	r2, [r7, #28]
 8009164:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009166:	69b9      	ldr	r1, [r7, #24]
 8009168:	69fa      	ldr	r2, [r7, #28]
 800916a:	e841 2300 	strex	r3, r2, [r1]
 800916e:	617b      	str	r3, [r7, #20]
   return(result);
 8009170:	697b      	ldr	r3, [r7, #20]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d1e5      	bne.n	8009142 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009176:	e002      	b.n	800917e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8009178:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800917a:	f7fc faaf 	bl	80056dc <HAL_UART_TxCpltCallback>
}
 800917e:	bf00      	nop
 8009180:	3740      	adds	r7, #64	; 0x40
 8009182:	46bd      	mov	sp, r7
 8009184:	bd80      	pop	{r7, pc}

08009186 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009186:	b580      	push	{r7, lr}
 8009188:	b084      	sub	sp, #16
 800918a:	af00      	add	r7, sp, #0
 800918c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009192:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009194:	68f8      	ldr	r0, [r7, #12]
 8009196:	f7ff ff7f 	bl	8009098 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800919a:	bf00      	nop
 800919c:	3710      	adds	r7, #16
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}

080091a2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80091a2:	b580      	push	{r7, lr}
 80091a4:	b09c      	sub	sp, #112	; 0x70
 80091a6:	af00      	add	r7, sp, #0
 80091a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091ae:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d172      	bne.n	80092a4 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80091be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091c0:	2200      	movs	r2, #0
 80091c2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80091c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	330c      	adds	r3, #12
 80091ca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091ce:	e853 3f00 	ldrex	r3, [r3]
 80091d2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80091d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80091d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80091da:	66bb      	str	r3, [r7, #104]	; 0x68
 80091dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	330c      	adds	r3, #12
 80091e2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80091e4:	65ba      	str	r2, [r7, #88]	; 0x58
 80091e6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091e8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80091ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80091ec:	e841 2300 	strex	r3, r2, [r1]
 80091f0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80091f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d1e5      	bne.n	80091c4 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80091f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	3314      	adds	r3, #20
 80091fe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009202:	e853 3f00 	ldrex	r3, [r3]
 8009206:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800920a:	f023 0301 	bic.w	r3, r3, #1
 800920e:	667b      	str	r3, [r7, #100]	; 0x64
 8009210:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	3314      	adds	r3, #20
 8009216:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009218:	647a      	str	r2, [r7, #68]	; 0x44
 800921a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800921c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800921e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009220:	e841 2300 	strex	r3, r2, [r1]
 8009224:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009226:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009228:	2b00      	cmp	r3, #0
 800922a:	d1e5      	bne.n	80091f8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800922c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	3314      	adds	r3, #20
 8009232:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009236:	e853 3f00 	ldrex	r3, [r3]
 800923a:	623b      	str	r3, [r7, #32]
   return(result);
 800923c:	6a3b      	ldr	r3, [r7, #32]
 800923e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009242:	663b      	str	r3, [r7, #96]	; 0x60
 8009244:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	3314      	adds	r3, #20
 800924a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800924c:	633a      	str	r2, [r7, #48]	; 0x30
 800924e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009250:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009252:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009254:	e841 2300 	strex	r3, r2, [r1]
 8009258:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800925a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800925c:	2b00      	cmp	r3, #0
 800925e:	d1e5      	bne.n	800922c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009260:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009262:	2220      	movs	r2, #32
 8009264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009268:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800926a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800926c:	2b01      	cmp	r3, #1
 800926e:	d119      	bne.n	80092a4 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009270:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	330c      	adds	r3, #12
 8009276:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009278:	693b      	ldr	r3, [r7, #16]
 800927a:	e853 3f00 	ldrex	r3, [r3]
 800927e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	f023 0310 	bic.w	r3, r3, #16
 8009286:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009288:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	330c      	adds	r3, #12
 800928e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009290:	61fa      	str	r2, [r7, #28]
 8009292:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009294:	69b9      	ldr	r1, [r7, #24]
 8009296:	69fa      	ldr	r2, [r7, #28]
 8009298:	e841 2300 	strex	r3, r2, [r1]
 800929c:	617b      	str	r3, [r7, #20]
   return(result);
 800929e:	697b      	ldr	r3, [r7, #20]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d1e5      	bne.n	8009270 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092a8:	2b01      	cmp	r3, #1
 80092aa:	d106      	bne.n	80092ba <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80092ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092ae:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80092b0:	4619      	mov	r1, r3
 80092b2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80092b4:	f7ff ff0e 	bl	80090d4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80092b8:	e002      	b.n	80092c0 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80092ba:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80092bc:	f7fc fa20 	bl	8005700 <HAL_UART_RxCpltCallback>
}
 80092c0:	bf00      	nop
 80092c2:	3770      	adds	r7, #112	; 0x70
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}

080092c8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b084      	sub	sp, #16
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092d4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092da:	2b01      	cmp	r3, #1
 80092dc:	d108      	bne.n	80092f0 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80092e2:	085b      	lsrs	r3, r3, #1
 80092e4:	b29b      	uxth	r3, r3
 80092e6:	4619      	mov	r1, r3
 80092e8:	68f8      	ldr	r0, [r7, #12]
 80092ea:	f7ff fef3 	bl	80090d4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80092ee:	e002      	b.n	80092f6 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80092f0:	68f8      	ldr	r0, [r7, #12]
 80092f2:	f7ff fedb 	bl	80090ac <HAL_UART_RxHalfCpltCallback>
}
 80092f6:	bf00      	nop
 80092f8:	3710      	adds	r7, #16
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}

080092fe <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80092fe:	b580      	push	{r7, lr}
 8009300:	b084      	sub	sp, #16
 8009302:	af00      	add	r7, sp, #0
 8009304:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009306:	2300      	movs	r3, #0
 8009308:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800930e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	695b      	ldr	r3, [r3, #20]
 8009316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800931a:	2b80      	cmp	r3, #128	; 0x80
 800931c:	bf0c      	ite	eq
 800931e:	2301      	moveq	r3, #1
 8009320:	2300      	movne	r3, #0
 8009322:	b2db      	uxtb	r3, r3
 8009324:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009326:	68bb      	ldr	r3, [r7, #8]
 8009328:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800932c:	b2db      	uxtb	r3, r3
 800932e:	2b21      	cmp	r3, #33	; 0x21
 8009330:	d108      	bne.n	8009344 <UART_DMAError+0x46>
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d005      	beq.n	8009344 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009338:	68bb      	ldr	r3, [r7, #8]
 800933a:	2200      	movs	r2, #0
 800933c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800933e:	68b8      	ldr	r0, [r7, #8]
 8009340:	f000 f8c6 	bl	80094d0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	695b      	ldr	r3, [r3, #20]
 800934a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800934e:	2b40      	cmp	r3, #64	; 0x40
 8009350:	bf0c      	ite	eq
 8009352:	2301      	moveq	r3, #1
 8009354:	2300      	movne	r3, #0
 8009356:	b2db      	uxtb	r3, r3
 8009358:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800935a:	68bb      	ldr	r3, [r7, #8]
 800935c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009360:	b2db      	uxtb	r3, r3
 8009362:	2b22      	cmp	r3, #34	; 0x22
 8009364:	d108      	bne.n	8009378 <UART_DMAError+0x7a>
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d005      	beq.n	8009378 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	2200      	movs	r2, #0
 8009370:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8009372:	68b8      	ldr	r0, [r7, #8]
 8009374:	f000 f8d4 	bl	8009520 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800937c:	f043 0210 	orr.w	r2, r3, #16
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009384:	68b8      	ldr	r0, [r7, #8]
 8009386:	f7ff fe9b 	bl	80090c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800938a:	bf00      	nop
 800938c:	3710      	adds	r7, #16
 800938e:	46bd      	mov	sp, r7
 8009390:	bd80      	pop	{r7, pc}
	...

08009394 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b098      	sub	sp, #96	; 0x60
 8009398:	af00      	add	r7, sp, #0
 800939a:	60f8      	str	r0, [r7, #12]
 800939c:	60b9      	str	r1, [r7, #8]
 800939e:	4613      	mov	r3, r2
 80093a0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80093a2:	68ba      	ldr	r2, [r7, #8]
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	88fa      	ldrh	r2, [r7, #6]
 80093ac:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	2200      	movs	r2, #0
 80093b2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	2222      	movs	r2, #34	; 0x22
 80093b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093c0:	4a40      	ldr	r2, [pc, #256]	; (80094c4 <UART_Start_Receive_DMA+0x130>)
 80093c2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093c8:	4a3f      	ldr	r2, [pc, #252]	; (80094c8 <UART_Start_Receive_DMA+0x134>)
 80093ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093d0:	4a3e      	ldr	r2, [pc, #248]	; (80094cc <UART_Start_Receive_DMA+0x138>)
 80093d2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093d8:	2200      	movs	r2, #0
 80093da:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80093dc:	f107 0308 	add.w	r3, r7, #8
 80093e0:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	3304      	adds	r3, #4
 80093ec:	4619      	mov	r1, r3
 80093ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80093f0:	681a      	ldr	r2, [r3, #0]
 80093f2:	88fb      	ldrh	r3, [r7, #6]
 80093f4:	f7fd fda4 	bl	8006f40 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80093f8:	2300      	movs	r3, #0
 80093fa:	613b      	str	r3, [r7, #16]
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	613b      	str	r3, [r7, #16]
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	685b      	ldr	r3, [r3, #4]
 800940a:	613b      	str	r3, [r7, #16]
 800940c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	2200      	movs	r2, #0
 8009412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	691b      	ldr	r3, [r3, #16]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d019      	beq.n	8009452 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	330c      	adds	r3, #12
 8009424:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009426:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009428:	e853 3f00 	ldrex	r3, [r3]
 800942c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800942e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009430:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009434:	65bb      	str	r3, [r7, #88]	; 0x58
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	330c      	adds	r3, #12
 800943c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800943e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8009440:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009442:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009444:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009446:	e841 2300 	strex	r3, r2, [r1]
 800944a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800944c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800944e:	2b00      	cmp	r3, #0
 8009450:	d1e5      	bne.n	800941e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	3314      	adds	r3, #20
 8009458:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800945a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800945c:	e853 3f00 	ldrex	r3, [r3]
 8009460:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009464:	f043 0301 	orr.w	r3, r3, #1
 8009468:	657b      	str	r3, [r7, #84]	; 0x54
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	3314      	adds	r3, #20
 8009470:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009472:	63ba      	str	r2, [r7, #56]	; 0x38
 8009474:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009476:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009478:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800947a:	e841 2300 	strex	r3, r2, [r1]
 800947e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009482:	2b00      	cmp	r3, #0
 8009484:	d1e5      	bne.n	8009452 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	3314      	adds	r3, #20
 800948c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800948e:	69bb      	ldr	r3, [r7, #24]
 8009490:	e853 3f00 	ldrex	r3, [r3]
 8009494:	617b      	str	r3, [r7, #20]
   return(result);
 8009496:	697b      	ldr	r3, [r7, #20]
 8009498:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800949c:	653b      	str	r3, [r7, #80]	; 0x50
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	3314      	adds	r3, #20
 80094a4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80094a6:	627a      	str	r2, [r7, #36]	; 0x24
 80094a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094aa:	6a39      	ldr	r1, [r7, #32]
 80094ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094ae:	e841 2300 	strex	r3, r2, [r1]
 80094b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80094b4:	69fb      	ldr	r3, [r7, #28]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d1e5      	bne.n	8009486 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80094ba:	2300      	movs	r3, #0
}
 80094bc:	4618      	mov	r0, r3
 80094be:	3760      	adds	r7, #96	; 0x60
 80094c0:	46bd      	mov	sp, r7
 80094c2:	bd80      	pop	{r7, pc}
 80094c4:	080091a3 	.word	0x080091a3
 80094c8:	080092c9 	.word	0x080092c9
 80094cc:	080092ff 	.word	0x080092ff

080094d0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80094d0:	b480      	push	{r7}
 80094d2:	b089      	sub	sp, #36	; 0x24
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	330c      	adds	r3, #12
 80094de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	e853 3f00 	ldrex	r3, [r3]
 80094e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80094ee:	61fb      	str	r3, [r7, #28]
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	330c      	adds	r3, #12
 80094f6:	69fa      	ldr	r2, [r7, #28]
 80094f8:	61ba      	str	r2, [r7, #24]
 80094fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094fc:	6979      	ldr	r1, [r7, #20]
 80094fe:	69ba      	ldr	r2, [r7, #24]
 8009500:	e841 2300 	strex	r3, r2, [r1]
 8009504:	613b      	str	r3, [r7, #16]
   return(result);
 8009506:	693b      	ldr	r3, [r7, #16]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d1e5      	bne.n	80094d8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2220      	movs	r2, #32
 8009510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8009514:	bf00      	nop
 8009516:	3724      	adds	r7, #36	; 0x24
 8009518:	46bd      	mov	sp, r7
 800951a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951e:	4770      	bx	lr

08009520 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009520:	b480      	push	{r7}
 8009522:	b095      	sub	sp, #84	; 0x54
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	330c      	adds	r3, #12
 800952e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009532:	e853 3f00 	ldrex	r3, [r3]
 8009536:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800953a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800953e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	330c      	adds	r3, #12
 8009546:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009548:	643a      	str	r2, [r7, #64]	; 0x40
 800954a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800954c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800954e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009550:	e841 2300 	strex	r3, r2, [r1]
 8009554:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009556:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009558:	2b00      	cmp	r3, #0
 800955a:	d1e5      	bne.n	8009528 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	3314      	adds	r3, #20
 8009562:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009564:	6a3b      	ldr	r3, [r7, #32]
 8009566:	e853 3f00 	ldrex	r3, [r3]
 800956a:	61fb      	str	r3, [r7, #28]
   return(result);
 800956c:	69fb      	ldr	r3, [r7, #28]
 800956e:	f023 0301 	bic.w	r3, r3, #1
 8009572:	64bb      	str	r3, [r7, #72]	; 0x48
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	3314      	adds	r3, #20
 800957a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800957c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800957e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009580:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009582:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009584:	e841 2300 	strex	r3, r2, [r1]
 8009588:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800958a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800958c:	2b00      	cmp	r3, #0
 800958e:	d1e5      	bne.n	800955c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009594:	2b01      	cmp	r3, #1
 8009596:	d119      	bne.n	80095cc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	330c      	adds	r3, #12
 800959e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	e853 3f00 	ldrex	r3, [r3]
 80095a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	f023 0310 	bic.w	r3, r3, #16
 80095ae:	647b      	str	r3, [r7, #68]	; 0x44
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	330c      	adds	r3, #12
 80095b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80095b8:	61ba      	str	r2, [r7, #24]
 80095ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095bc:	6979      	ldr	r1, [r7, #20]
 80095be:	69ba      	ldr	r2, [r7, #24]
 80095c0:	e841 2300 	strex	r3, r2, [r1]
 80095c4:	613b      	str	r3, [r7, #16]
   return(result);
 80095c6:	693b      	ldr	r3, [r7, #16]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d1e5      	bne.n	8009598 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2220      	movs	r2, #32
 80095d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2200      	movs	r2, #0
 80095d8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80095da:	bf00      	nop
 80095dc:	3754      	adds	r7, #84	; 0x54
 80095de:	46bd      	mov	sp, r7
 80095e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e4:	4770      	bx	lr

080095e6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80095e6:	b580      	push	{r7, lr}
 80095e8:	b084      	sub	sp, #16
 80095ea:	af00      	add	r7, sp, #0
 80095ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095f2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	2200      	movs	r2, #0
 80095f8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	2200      	movs	r2, #0
 80095fe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009600:	68f8      	ldr	r0, [r7, #12]
 8009602:	f7ff fd5d 	bl	80090c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009606:	bf00      	nop
 8009608:	3710      	adds	r7, #16
 800960a:	46bd      	mov	sp, r7
 800960c:	bd80      	pop	{r7, pc}

0800960e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800960e:	b480      	push	{r7}
 8009610:	b085      	sub	sp, #20
 8009612:	af00      	add	r7, sp, #0
 8009614:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800961c:	b2db      	uxtb	r3, r3
 800961e:	2b21      	cmp	r3, #33	; 0x21
 8009620:	d13e      	bne.n	80096a0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	689b      	ldr	r3, [r3, #8]
 8009626:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800962a:	d114      	bne.n	8009656 <UART_Transmit_IT+0x48>
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	691b      	ldr	r3, [r3, #16]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d110      	bne.n	8009656 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6a1b      	ldr	r3, [r3, #32]
 8009638:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	881b      	ldrh	r3, [r3, #0]
 800963e:	461a      	mov	r2, r3
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009648:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	6a1b      	ldr	r3, [r3, #32]
 800964e:	1c9a      	adds	r2, r3, #2
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	621a      	str	r2, [r3, #32]
 8009654:	e008      	b.n	8009668 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6a1b      	ldr	r3, [r3, #32]
 800965a:	1c59      	adds	r1, r3, #1
 800965c:	687a      	ldr	r2, [r7, #4]
 800965e:	6211      	str	r1, [r2, #32]
 8009660:	781a      	ldrb	r2, [r3, #0]
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800966c:	b29b      	uxth	r3, r3
 800966e:	3b01      	subs	r3, #1
 8009670:	b29b      	uxth	r3, r3
 8009672:	687a      	ldr	r2, [r7, #4]
 8009674:	4619      	mov	r1, r3
 8009676:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009678:	2b00      	cmp	r3, #0
 800967a:	d10f      	bne.n	800969c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	68da      	ldr	r2, [r3, #12]
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800968a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	68da      	ldr	r2, [r3, #12]
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800969a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800969c:	2300      	movs	r3, #0
 800969e:	e000      	b.n	80096a2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80096a0:	2302      	movs	r3, #2
  }
}
 80096a2:	4618      	mov	r0, r3
 80096a4:	3714      	adds	r7, #20
 80096a6:	46bd      	mov	sp, r7
 80096a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ac:	4770      	bx	lr

080096ae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80096ae:	b580      	push	{r7, lr}
 80096b0:	b082      	sub	sp, #8
 80096b2:	af00      	add	r7, sp, #0
 80096b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	68da      	ldr	r2, [r3, #12]
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80096c4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2220      	movs	r2, #32
 80096ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80096ce:	6878      	ldr	r0, [r7, #4]
 80096d0:	f7fc f804 	bl	80056dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80096d4:	2300      	movs	r3, #0
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	3708      	adds	r7, #8
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}

080096de <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80096de:	b580      	push	{r7, lr}
 80096e0:	b08c      	sub	sp, #48	; 0x30
 80096e2:	af00      	add	r7, sp, #0
 80096e4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80096ec:	b2db      	uxtb	r3, r3
 80096ee:	2b22      	cmp	r3, #34	; 0x22
 80096f0:	f040 80ab 	bne.w	800984a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	689b      	ldr	r3, [r3, #8]
 80096f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096fc:	d117      	bne.n	800972e <UART_Receive_IT+0x50>
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	691b      	ldr	r3, [r3, #16]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d113      	bne.n	800972e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009706:	2300      	movs	r3, #0
 8009708:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800970e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	685b      	ldr	r3, [r3, #4]
 8009716:	b29b      	uxth	r3, r3
 8009718:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800971c:	b29a      	uxth	r2, r3
 800971e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009720:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009726:	1c9a      	adds	r2, r3, #2
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	629a      	str	r2, [r3, #40]	; 0x28
 800972c:	e026      	b.n	800977c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009732:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009734:	2300      	movs	r3, #0
 8009736:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	689b      	ldr	r3, [r3, #8]
 800973c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009740:	d007      	beq.n	8009752 <UART_Receive_IT+0x74>
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	689b      	ldr	r3, [r3, #8]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d10a      	bne.n	8009760 <UART_Receive_IT+0x82>
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	691b      	ldr	r3, [r3, #16]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d106      	bne.n	8009760 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	685b      	ldr	r3, [r3, #4]
 8009758:	b2da      	uxtb	r2, r3
 800975a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800975c:	701a      	strb	r2, [r3, #0]
 800975e:	e008      	b.n	8009772 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	685b      	ldr	r3, [r3, #4]
 8009766:	b2db      	uxtb	r3, r3
 8009768:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800976c:	b2da      	uxtb	r2, r3
 800976e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009770:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009776:	1c5a      	adds	r2, r3, #1
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009780:	b29b      	uxth	r3, r3
 8009782:	3b01      	subs	r3, #1
 8009784:	b29b      	uxth	r3, r3
 8009786:	687a      	ldr	r2, [r7, #4]
 8009788:	4619      	mov	r1, r3
 800978a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800978c:	2b00      	cmp	r3, #0
 800978e:	d15a      	bne.n	8009846 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	68da      	ldr	r2, [r3, #12]
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	f022 0220 	bic.w	r2, r2, #32
 800979e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	68da      	ldr	r2, [r3, #12]
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80097ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	695a      	ldr	r2, [r3, #20]
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f022 0201 	bic.w	r2, r2, #1
 80097be:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2220      	movs	r2, #32
 80097c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097cc:	2b01      	cmp	r3, #1
 80097ce:	d135      	bne.n	800983c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2200      	movs	r2, #0
 80097d4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	330c      	adds	r3, #12
 80097dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097de:	697b      	ldr	r3, [r7, #20]
 80097e0:	e853 3f00 	ldrex	r3, [r3]
 80097e4:	613b      	str	r3, [r7, #16]
   return(result);
 80097e6:	693b      	ldr	r3, [r7, #16]
 80097e8:	f023 0310 	bic.w	r3, r3, #16
 80097ec:	627b      	str	r3, [r7, #36]	; 0x24
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	330c      	adds	r3, #12
 80097f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097f6:	623a      	str	r2, [r7, #32]
 80097f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097fa:	69f9      	ldr	r1, [r7, #28]
 80097fc:	6a3a      	ldr	r2, [r7, #32]
 80097fe:	e841 2300 	strex	r3, r2, [r1]
 8009802:	61bb      	str	r3, [r7, #24]
   return(result);
 8009804:	69bb      	ldr	r3, [r7, #24]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d1e5      	bne.n	80097d6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	f003 0310 	and.w	r3, r3, #16
 8009814:	2b10      	cmp	r3, #16
 8009816:	d10a      	bne.n	800982e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009818:	2300      	movs	r3, #0
 800981a:	60fb      	str	r3, [r7, #12]
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	60fb      	str	r3, [r7, #12]
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	685b      	ldr	r3, [r3, #4]
 800982a:	60fb      	str	r3, [r7, #12]
 800982c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009832:	4619      	mov	r1, r3
 8009834:	6878      	ldr	r0, [r7, #4]
 8009836:	f7ff fc4d 	bl	80090d4 <HAL_UARTEx_RxEventCallback>
 800983a:	e002      	b.n	8009842 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800983c:	6878      	ldr	r0, [r7, #4]
 800983e:	f7fb ff5f 	bl	8005700 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009842:	2300      	movs	r3, #0
 8009844:	e002      	b.n	800984c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009846:	2300      	movs	r3, #0
 8009848:	e000      	b.n	800984c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800984a:	2302      	movs	r3, #2
  }
}
 800984c:	4618      	mov	r0, r3
 800984e:	3730      	adds	r7, #48	; 0x30
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}

08009854 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009854:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009858:	b0c0      	sub	sp, #256	; 0x100
 800985a:	af00      	add	r7, sp, #0
 800985c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	691b      	ldr	r3, [r3, #16]
 8009868:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800986c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009870:	68d9      	ldr	r1, [r3, #12]
 8009872:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009876:	681a      	ldr	r2, [r3, #0]
 8009878:	ea40 0301 	orr.w	r3, r0, r1
 800987c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800987e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009882:	689a      	ldr	r2, [r3, #8]
 8009884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009888:	691b      	ldr	r3, [r3, #16]
 800988a:	431a      	orrs	r2, r3
 800988c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009890:	695b      	ldr	r3, [r3, #20]
 8009892:	431a      	orrs	r2, r3
 8009894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009898:	69db      	ldr	r3, [r3, #28]
 800989a:	4313      	orrs	r3, r2
 800989c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80098a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	68db      	ldr	r3, [r3, #12]
 80098a8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80098ac:	f021 010c 	bic.w	r1, r1, #12
 80098b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098b4:	681a      	ldr	r2, [r3, #0]
 80098b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80098ba:	430b      	orrs	r3, r1
 80098bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80098be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	695b      	ldr	r3, [r3, #20]
 80098c6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80098ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098ce:	6999      	ldr	r1, [r3, #24]
 80098d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098d4:	681a      	ldr	r2, [r3, #0]
 80098d6:	ea40 0301 	orr.w	r3, r0, r1
 80098da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80098dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098e0:	681a      	ldr	r2, [r3, #0]
 80098e2:	4b8f      	ldr	r3, [pc, #572]	; (8009b20 <UART_SetConfig+0x2cc>)
 80098e4:	429a      	cmp	r2, r3
 80098e6:	d005      	beq.n	80098f4 <UART_SetConfig+0xa0>
 80098e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098ec:	681a      	ldr	r2, [r3, #0]
 80098ee:	4b8d      	ldr	r3, [pc, #564]	; (8009b24 <UART_SetConfig+0x2d0>)
 80098f0:	429a      	cmp	r2, r3
 80098f2:	d104      	bne.n	80098fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80098f4:	f7fe fc58 	bl	80081a8 <HAL_RCC_GetPCLK2Freq>
 80098f8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80098fc:	e003      	b.n	8009906 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80098fe:	f7fe fc3f 	bl	8008180 <HAL_RCC_GetPCLK1Freq>
 8009902:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009906:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800990a:	69db      	ldr	r3, [r3, #28]
 800990c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009910:	f040 810c 	bne.w	8009b2c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009914:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009918:	2200      	movs	r2, #0
 800991a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800991e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009922:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009926:	4622      	mov	r2, r4
 8009928:	462b      	mov	r3, r5
 800992a:	1891      	adds	r1, r2, r2
 800992c:	65b9      	str	r1, [r7, #88]	; 0x58
 800992e:	415b      	adcs	r3, r3
 8009930:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009932:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009936:	4621      	mov	r1, r4
 8009938:	eb12 0801 	adds.w	r8, r2, r1
 800993c:	4629      	mov	r1, r5
 800993e:	eb43 0901 	adc.w	r9, r3, r1
 8009942:	f04f 0200 	mov.w	r2, #0
 8009946:	f04f 0300 	mov.w	r3, #0
 800994a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800994e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009952:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009956:	4690      	mov	r8, r2
 8009958:	4699      	mov	r9, r3
 800995a:	4623      	mov	r3, r4
 800995c:	eb18 0303 	adds.w	r3, r8, r3
 8009960:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009964:	462b      	mov	r3, r5
 8009966:	eb49 0303 	adc.w	r3, r9, r3
 800996a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800996e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009972:	685b      	ldr	r3, [r3, #4]
 8009974:	2200      	movs	r2, #0
 8009976:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800997a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800997e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009982:	460b      	mov	r3, r1
 8009984:	18db      	adds	r3, r3, r3
 8009986:	653b      	str	r3, [r7, #80]	; 0x50
 8009988:	4613      	mov	r3, r2
 800998a:	eb42 0303 	adc.w	r3, r2, r3
 800998e:	657b      	str	r3, [r7, #84]	; 0x54
 8009990:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009994:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009998:	f7f7 f8ec 	bl	8000b74 <__aeabi_uldivmod>
 800999c:	4602      	mov	r2, r0
 800999e:	460b      	mov	r3, r1
 80099a0:	4b61      	ldr	r3, [pc, #388]	; (8009b28 <UART_SetConfig+0x2d4>)
 80099a2:	fba3 2302 	umull	r2, r3, r3, r2
 80099a6:	095b      	lsrs	r3, r3, #5
 80099a8:	011c      	lsls	r4, r3, #4
 80099aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80099ae:	2200      	movs	r2, #0
 80099b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80099b4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80099b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80099bc:	4642      	mov	r2, r8
 80099be:	464b      	mov	r3, r9
 80099c0:	1891      	adds	r1, r2, r2
 80099c2:	64b9      	str	r1, [r7, #72]	; 0x48
 80099c4:	415b      	adcs	r3, r3
 80099c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80099c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80099cc:	4641      	mov	r1, r8
 80099ce:	eb12 0a01 	adds.w	sl, r2, r1
 80099d2:	4649      	mov	r1, r9
 80099d4:	eb43 0b01 	adc.w	fp, r3, r1
 80099d8:	f04f 0200 	mov.w	r2, #0
 80099dc:	f04f 0300 	mov.w	r3, #0
 80099e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80099e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80099e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80099ec:	4692      	mov	sl, r2
 80099ee:	469b      	mov	fp, r3
 80099f0:	4643      	mov	r3, r8
 80099f2:	eb1a 0303 	adds.w	r3, sl, r3
 80099f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80099fa:	464b      	mov	r3, r9
 80099fc:	eb4b 0303 	adc.w	r3, fp, r3
 8009a00:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a08:	685b      	ldr	r3, [r3, #4]
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009a10:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009a14:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009a18:	460b      	mov	r3, r1
 8009a1a:	18db      	adds	r3, r3, r3
 8009a1c:	643b      	str	r3, [r7, #64]	; 0x40
 8009a1e:	4613      	mov	r3, r2
 8009a20:	eb42 0303 	adc.w	r3, r2, r3
 8009a24:	647b      	str	r3, [r7, #68]	; 0x44
 8009a26:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009a2a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009a2e:	f7f7 f8a1 	bl	8000b74 <__aeabi_uldivmod>
 8009a32:	4602      	mov	r2, r0
 8009a34:	460b      	mov	r3, r1
 8009a36:	4611      	mov	r1, r2
 8009a38:	4b3b      	ldr	r3, [pc, #236]	; (8009b28 <UART_SetConfig+0x2d4>)
 8009a3a:	fba3 2301 	umull	r2, r3, r3, r1
 8009a3e:	095b      	lsrs	r3, r3, #5
 8009a40:	2264      	movs	r2, #100	; 0x64
 8009a42:	fb02 f303 	mul.w	r3, r2, r3
 8009a46:	1acb      	subs	r3, r1, r3
 8009a48:	00db      	lsls	r3, r3, #3
 8009a4a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009a4e:	4b36      	ldr	r3, [pc, #216]	; (8009b28 <UART_SetConfig+0x2d4>)
 8009a50:	fba3 2302 	umull	r2, r3, r3, r2
 8009a54:	095b      	lsrs	r3, r3, #5
 8009a56:	005b      	lsls	r3, r3, #1
 8009a58:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009a5c:	441c      	add	r4, r3
 8009a5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009a62:	2200      	movs	r2, #0
 8009a64:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009a68:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009a6c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009a70:	4642      	mov	r2, r8
 8009a72:	464b      	mov	r3, r9
 8009a74:	1891      	adds	r1, r2, r2
 8009a76:	63b9      	str	r1, [r7, #56]	; 0x38
 8009a78:	415b      	adcs	r3, r3
 8009a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009a7c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009a80:	4641      	mov	r1, r8
 8009a82:	1851      	adds	r1, r2, r1
 8009a84:	6339      	str	r1, [r7, #48]	; 0x30
 8009a86:	4649      	mov	r1, r9
 8009a88:	414b      	adcs	r3, r1
 8009a8a:	637b      	str	r3, [r7, #52]	; 0x34
 8009a8c:	f04f 0200 	mov.w	r2, #0
 8009a90:	f04f 0300 	mov.w	r3, #0
 8009a94:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009a98:	4659      	mov	r1, fp
 8009a9a:	00cb      	lsls	r3, r1, #3
 8009a9c:	4651      	mov	r1, sl
 8009a9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009aa2:	4651      	mov	r1, sl
 8009aa4:	00ca      	lsls	r2, r1, #3
 8009aa6:	4610      	mov	r0, r2
 8009aa8:	4619      	mov	r1, r3
 8009aaa:	4603      	mov	r3, r0
 8009aac:	4642      	mov	r2, r8
 8009aae:	189b      	adds	r3, r3, r2
 8009ab0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009ab4:	464b      	mov	r3, r9
 8009ab6:	460a      	mov	r2, r1
 8009ab8:	eb42 0303 	adc.w	r3, r2, r3
 8009abc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ac4:	685b      	ldr	r3, [r3, #4]
 8009ac6:	2200      	movs	r2, #0
 8009ac8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009acc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009ad0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009ad4:	460b      	mov	r3, r1
 8009ad6:	18db      	adds	r3, r3, r3
 8009ad8:	62bb      	str	r3, [r7, #40]	; 0x28
 8009ada:	4613      	mov	r3, r2
 8009adc:	eb42 0303 	adc.w	r3, r2, r3
 8009ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009ae2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009ae6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009aea:	f7f7 f843 	bl	8000b74 <__aeabi_uldivmod>
 8009aee:	4602      	mov	r2, r0
 8009af0:	460b      	mov	r3, r1
 8009af2:	4b0d      	ldr	r3, [pc, #52]	; (8009b28 <UART_SetConfig+0x2d4>)
 8009af4:	fba3 1302 	umull	r1, r3, r3, r2
 8009af8:	095b      	lsrs	r3, r3, #5
 8009afa:	2164      	movs	r1, #100	; 0x64
 8009afc:	fb01 f303 	mul.w	r3, r1, r3
 8009b00:	1ad3      	subs	r3, r2, r3
 8009b02:	00db      	lsls	r3, r3, #3
 8009b04:	3332      	adds	r3, #50	; 0x32
 8009b06:	4a08      	ldr	r2, [pc, #32]	; (8009b28 <UART_SetConfig+0x2d4>)
 8009b08:	fba2 2303 	umull	r2, r3, r2, r3
 8009b0c:	095b      	lsrs	r3, r3, #5
 8009b0e:	f003 0207 	and.w	r2, r3, #7
 8009b12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	4422      	add	r2, r4
 8009b1a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009b1c:	e105      	b.n	8009d2a <UART_SetConfig+0x4d6>
 8009b1e:	bf00      	nop
 8009b20:	40011000 	.word	0x40011000
 8009b24:	40011400 	.word	0x40011400
 8009b28:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009b2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009b30:	2200      	movs	r2, #0
 8009b32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009b36:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009b3a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009b3e:	4642      	mov	r2, r8
 8009b40:	464b      	mov	r3, r9
 8009b42:	1891      	adds	r1, r2, r2
 8009b44:	6239      	str	r1, [r7, #32]
 8009b46:	415b      	adcs	r3, r3
 8009b48:	627b      	str	r3, [r7, #36]	; 0x24
 8009b4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009b4e:	4641      	mov	r1, r8
 8009b50:	1854      	adds	r4, r2, r1
 8009b52:	4649      	mov	r1, r9
 8009b54:	eb43 0501 	adc.w	r5, r3, r1
 8009b58:	f04f 0200 	mov.w	r2, #0
 8009b5c:	f04f 0300 	mov.w	r3, #0
 8009b60:	00eb      	lsls	r3, r5, #3
 8009b62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009b66:	00e2      	lsls	r2, r4, #3
 8009b68:	4614      	mov	r4, r2
 8009b6a:	461d      	mov	r5, r3
 8009b6c:	4643      	mov	r3, r8
 8009b6e:	18e3      	adds	r3, r4, r3
 8009b70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009b74:	464b      	mov	r3, r9
 8009b76:	eb45 0303 	adc.w	r3, r5, r3
 8009b7a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b82:	685b      	ldr	r3, [r3, #4]
 8009b84:	2200      	movs	r2, #0
 8009b86:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009b8a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009b8e:	f04f 0200 	mov.w	r2, #0
 8009b92:	f04f 0300 	mov.w	r3, #0
 8009b96:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009b9a:	4629      	mov	r1, r5
 8009b9c:	008b      	lsls	r3, r1, #2
 8009b9e:	4621      	mov	r1, r4
 8009ba0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009ba4:	4621      	mov	r1, r4
 8009ba6:	008a      	lsls	r2, r1, #2
 8009ba8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009bac:	f7f6 ffe2 	bl	8000b74 <__aeabi_uldivmod>
 8009bb0:	4602      	mov	r2, r0
 8009bb2:	460b      	mov	r3, r1
 8009bb4:	4b60      	ldr	r3, [pc, #384]	; (8009d38 <UART_SetConfig+0x4e4>)
 8009bb6:	fba3 2302 	umull	r2, r3, r3, r2
 8009bba:	095b      	lsrs	r3, r3, #5
 8009bbc:	011c      	lsls	r4, r3, #4
 8009bbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009bc8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009bcc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009bd0:	4642      	mov	r2, r8
 8009bd2:	464b      	mov	r3, r9
 8009bd4:	1891      	adds	r1, r2, r2
 8009bd6:	61b9      	str	r1, [r7, #24]
 8009bd8:	415b      	adcs	r3, r3
 8009bda:	61fb      	str	r3, [r7, #28]
 8009bdc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009be0:	4641      	mov	r1, r8
 8009be2:	1851      	adds	r1, r2, r1
 8009be4:	6139      	str	r1, [r7, #16]
 8009be6:	4649      	mov	r1, r9
 8009be8:	414b      	adcs	r3, r1
 8009bea:	617b      	str	r3, [r7, #20]
 8009bec:	f04f 0200 	mov.w	r2, #0
 8009bf0:	f04f 0300 	mov.w	r3, #0
 8009bf4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009bf8:	4659      	mov	r1, fp
 8009bfa:	00cb      	lsls	r3, r1, #3
 8009bfc:	4651      	mov	r1, sl
 8009bfe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009c02:	4651      	mov	r1, sl
 8009c04:	00ca      	lsls	r2, r1, #3
 8009c06:	4610      	mov	r0, r2
 8009c08:	4619      	mov	r1, r3
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	4642      	mov	r2, r8
 8009c0e:	189b      	adds	r3, r3, r2
 8009c10:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009c14:	464b      	mov	r3, r9
 8009c16:	460a      	mov	r2, r1
 8009c18:	eb42 0303 	adc.w	r3, r2, r3
 8009c1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c24:	685b      	ldr	r3, [r3, #4]
 8009c26:	2200      	movs	r2, #0
 8009c28:	67bb      	str	r3, [r7, #120]	; 0x78
 8009c2a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009c2c:	f04f 0200 	mov.w	r2, #0
 8009c30:	f04f 0300 	mov.w	r3, #0
 8009c34:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009c38:	4649      	mov	r1, r9
 8009c3a:	008b      	lsls	r3, r1, #2
 8009c3c:	4641      	mov	r1, r8
 8009c3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009c42:	4641      	mov	r1, r8
 8009c44:	008a      	lsls	r2, r1, #2
 8009c46:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009c4a:	f7f6 ff93 	bl	8000b74 <__aeabi_uldivmod>
 8009c4e:	4602      	mov	r2, r0
 8009c50:	460b      	mov	r3, r1
 8009c52:	4b39      	ldr	r3, [pc, #228]	; (8009d38 <UART_SetConfig+0x4e4>)
 8009c54:	fba3 1302 	umull	r1, r3, r3, r2
 8009c58:	095b      	lsrs	r3, r3, #5
 8009c5a:	2164      	movs	r1, #100	; 0x64
 8009c5c:	fb01 f303 	mul.w	r3, r1, r3
 8009c60:	1ad3      	subs	r3, r2, r3
 8009c62:	011b      	lsls	r3, r3, #4
 8009c64:	3332      	adds	r3, #50	; 0x32
 8009c66:	4a34      	ldr	r2, [pc, #208]	; (8009d38 <UART_SetConfig+0x4e4>)
 8009c68:	fba2 2303 	umull	r2, r3, r2, r3
 8009c6c:	095b      	lsrs	r3, r3, #5
 8009c6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009c72:	441c      	add	r4, r3
 8009c74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009c78:	2200      	movs	r2, #0
 8009c7a:	673b      	str	r3, [r7, #112]	; 0x70
 8009c7c:	677a      	str	r2, [r7, #116]	; 0x74
 8009c7e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009c82:	4642      	mov	r2, r8
 8009c84:	464b      	mov	r3, r9
 8009c86:	1891      	adds	r1, r2, r2
 8009c88:	60b9      	str	r1, [r7, #8]
 8009c8a:	415b      	adcs	r3, r3
 8009c8c:	60fb      	str	r3, [r7, #12]
 8009c8e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009c92:	4641      	mov	r1, r8
 8009c94:	1851      	adds	r1, r2, r1
 8009c96:	6039      	str	r1, [r7, #0]
 8009c98:	4649      	mov	r1, r9
 8009c9a:	414b      	adcs	r3, r1
 8009c9c:	607b      	str	r3, [r7, #4]
 8009c9e:	f04f 0200 	mov.w	r2, #0
 8009ca2:	f04f 0300 	mov.w	r3, #0
 8009ca6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009caa:	4659      	mov	r1, fp
 8009cac:	00cb      	lsls	r3, r1, #3
 8009cae:	4651      	mov	r1, sl
 8009cb0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009cb4:	4651      	mov	r1, sl
 8009cb6:	00ca      	lsls	r2, r1, #3
 8009cb8:	4610      	mov	r0, r2
 8009cba:	4619      	mov	r1, r3
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	4642      	mov	r2, r8
 8009cc0:	189b      	adds	r3, r3, r2
 8009cc2:	66bb      	str	r3, [r7, #104]	; 0x68
 8009cc4:	464b      	mov	r3, r9
 8009cc6:	460a      	mov	r2, r1
 8009cc8:	eb42 0303 	adc.w	r3, r2, r3
 8009ccc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009cce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009cd2:	685b      	ldr	r3, [r3, #4]
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	663b      	str	r3, [r7, #96]	; 0x60
 8009cd8:	667a      	str	r2, [r7, #100]	; 0x64
 8009cda:	f04f 0200 	mov.w	r2, #0
 8009cde:	f04f 0300 	mov.w	r3, #0
 8009ce2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009ce6:	4649      	mov	r1, r9
 8009ce8:	008b      	lsls	r3, r1, #2
 8009cea:	4641      	mov	r1, r8
 8009cec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009cf0:	4641      	mov	r1, r8
 8009cf2:	008a      	lsls	r2, r1, #2
 8009cf4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009cf8:	f7f6 ff3c 	bl	8000b74 <__aeabi_uldivmod>
 8009cfc:	4602      	mov	r2, r0
 8009cfe:	460b      	mov	r3, r1
 8009d00:	4b0d      	ldr	r3, [pc, #52]	; (8009d38 <UART_SetConfig+0x4e4>)
 8009d02:	fba3 1302 	umull	r1, r3, r3, r2
 8009d06:	095b      	lsrs	r3, r3, #5
 8009d08:	2164      	movs	r1, #100	; 0x64
 8009d0a:	fb01 f303 	mul.w	r3, r1, r3
 8009d0e:	1ad3      	subs	r3, r2, r3
 8009d10:	011b      	lsls	r3, r3, #4
 8009d12:	3332      	adds	r3, #50	; 0x32
 8009d14:	4a08      	ldr	r2, [pc, #32]	; (8009d38 <UART_SetConfig+0x4e4>)
 8009d16:	fba2 2303 	umull	r2, r3, r2, r3
 8009d1a:	095b      	lsrs	r3, r3, #5
 8009d1c:	f003 020f 	and.w	r2, r3, #15
 8009d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	4422      	add	r2, r4
 8009d28:	609a      	str	r2, [r3, #8]
}
 8009d2a:	bf00      	nop
 8009d2c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009d30:	46bd      	mov	sp, r7
 8009d32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009d36:	bf00      	nop
 8009d38:	51eb851f 	.word	0x51eb851f

08009d3c <__cxa_pure_virtual>:
 8009d3c:	b508      	push	{r3, lr}
 8009d3e:	f000 f80d 	bl	8009d5c <_ZSt9terminatev>

08009d42 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8009d42:	b508      	push	{r3, lr}
 8009d44:	4780      	blx	r0
 8009d46:	f001 fe51 	bl	800b9ec <abort>
	...

08009d4c <_ZSt13get_terminatev>:
 8009d4c:	4b02      	ldr	r3, [pc, #8]	; (8009d58 <_ZSt13get_terminatev+0xc>)
 8009d4e:	6818      	ldr	r0, [r3, #0]
 8009d50:	f3bf 8f5b 	dmb	ish
 8009d54:	4770      	bx	lr
 8009d56:	bf00      	nop
 8009d58:	2000000c 	.word	0x2000000c

08009d5c <_ZSt9terminatev>:
 8009d5c:	b508      	push	{r3, lr}
 8009d5e:	f7ff fff5 	bl	8009d4c <_ZSt13get_terminatev>
 8009d62:	f7ff ffee 	bl	8009d42 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08009d68 <cos>:
 8009d68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009d6a:	ec53 2b10 	vmov	r2, r3, d0
 8009d6e:	4826      	ldr	r0, [pc, #152]	; (8009e08 <cos+0xa0>)
 8009d70:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009d74:	4281      	cmp	r1, r0
 8009d76:	dc06      	bgt.n	8009d86 <cos+0x1e>
 8009d78:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8009e00 <cos+0x98>
 8009d7c:	b005      	add	sp, #20
 8009d7e:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d82:	f000 bc71 	b.w	800a668 <__kernel_cos>
 8009d86:	4821      	ldr	r0, [pc, #132]	; (8009e0c <cos+0xa4>)
 8009d88:	4281      	cmp	r1, r0
 8009d8a:	dd09      	ble.n	8009da0 <cos+0x38>
 8009d8c:	ee10 0a10 	vmov	r0, s0
 8009d90:	4619      	mov	r1, r3
 8009d92:	f7f6 fa25 	bl	80001e0 <__aeabi_dsub>
 8009d96:	ec41 0b10 	vmov	d0, r0, r1
 8009d9a:	b005      	add	sp, #20
 8009d9c:	f85d fb04 	ldr.w	pc, [sp], #4
 8009da0:	4668      	mov	r0, sp
 8009da2:	f000 f919 	bl	8009fd8 <__ieee754_rem_pio2>
 8009da6:	f000 0003 	and.w	r0, r0, #3
 8009daa:	2801      	cmp	r0, #1
 8009dac:	d00b      	beq.n	8009dc6 <cos+0x5e>
 8009dae:	2802      	cmp	r0, #2
 8009db0:	d016      	beq.n	8009de0 <cos+0x78>
 8009db2:	b9e0      	cbnz	r0, 8009dee <cos+0x86>
 8009db4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009db8:	ed9d 0b00 	vldr	d0, [sp]
 8009dbc:	f000 fc54 	bl	800a668 <__kernel_cos>
 8009dc0:	ec51 0b10 	vmov	r0, r1, d0
 8009dc4:	e7e7      	b.n	8009d96 <cos+0x2e>
 8009dc6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009dca:	ed9d 0b00 	vldr	d0, [sp]
 8009dce:	f001 f863 	bl	800ae98 <__kernel_sin>
 8009dd2:	ec53 2b10 	vmov	r2, r3, d0
 8009dd6:	ee10 0a10 	vmov	r0, s0
 8009dda:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009dde:	e7da      	b.n	8009d96 <cos+0x2e>
 8009de0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009de4:	ed9d 0b00 	vldr	d0, [sp]
 8009de8:	f000 fc3e 	bl	800a668 <__kernel_cos>
 8009dec:	e7f1      	b.n	8009dd2 <cos+0x6a>
 8009dee:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009df2:	ed9d 0b00 	vldr	d0, [sp]
 8009df6:	2001      	movs	r0, #1
 8009df8:	f001 f84e 	bl	800ae98 <__kernel_sin>
 8009dfc:	e7e0      	b.n	8009dc0 <cos+0x58>
 8009dfe:	bf00      	nop
	...
 8009e08:	3fe921fb 	.word	0x3fe921fb
 8009e0c:	7fefffff 	.word	0x7fefffff

08009e10 <sin>:
 8009e10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009e12:	ec53 2b10 	vmov	r2, r3, d0
 8009e16:	4828      	ldr	r0, [pc, #160]	; (8009eb8 <sin+0xa8>)
 8009e18:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009e1c:	4281      	cmp	r1, r0
 8009e1e:	dc07      	bgt.n	8009e30 <sin+0x20>
 8009e20:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8009eb0 <sin+0xa0>
 8009e24:	2000      	movs	r0, #0
 8009e26:	b005      	add	sp, #20
 8009e28:	f85d eb04 	ldr.w	lr, [sp], #4
 8009e2c:	f001 b834 	b.w	800ae98 <__kernel_sin>
 8009e30:	4822      	ldr	r0, [pc, #136]	; (8009ebc <sin+0xac>)
 8009e32:	4281      	cmp	r1, r0
 8009e34:	dd09      	ble.n	8009e4a <sin+0x3a>
 8009e36:	ee10 0a10 	vmov	r0, s0
 8009e3a:	4619      	mov	r1, r3
 8009e3c:	f7f6 f9d0 	bl	80001e0 <__aeabi_dsub>
 8009e40:	ec41 0b10 	vmov	d0, r0, r1
 8009e44:	b005      	add	sp, #20
 8009e46:	f85d fb04 	ldr.w	pc, [sp], #4
 8009e4a:	4668      	mov	r0, sp
 8009e4c:	f000 f8c4 	bl	8009fd8 <__ieee754_rem_pio2>
 8009e50:	f000 0003 	and.w	r0, r0, #3
 8009e54:	2801      	cmp	r0, #1
 8009e56:	d00c      	beq.n	8009e72 <sin+0x62>
 8009e58:	2802      	cmp	r0, #2
 8009e5a:	d011      	beq.n	8009e80 <sin+0x70>
 8009e5c:	b9f0      	cbnz	r0, 8009e9c <sin+0x8c>
 8009e5e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009e62:	ed9d 0b00 	vldr	d0, [sp]
 8009e66:	2001      	movs	r0, #1
 8009e68:	f001 f816 	bl	800ae98 <__kernel_sin>
 8009e6c:	ec51 0b10 	vmov	r0, r1, d0
 8009e70:	e7e6      	b.n	8009e40 <sin+0x30>
 8009e72:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009e76:	ed9d 0b00 	vldr	d0, [sp]
 8009e7a:	f000 fbf5 	bl	800a668 <__kernel_cos>
 8009e7e:	e7f5      	b.n	8009e6c <sin+0x5c>
 8009e80:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009e84:	ed9d 0b00 	vldr	d0, [sp]
 8009e88:	2001      	movs	r0, #1
 8009e8a:	f001 f805 	bl	800ae98 <__kernel_sin>
 8009e8e:	ec53 2b10 	vmov	r2, r3, d0
 8009e92:	ee10 0a10 	vmov	r0, s0
 8009e96:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009e9a:	e7d1      	b.n	8009e40 <sin+0x30>
 8009e9c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009ea0:	ed9d 0b00 	vldr	d0, [sp]
 8009ea4:	f000 fbe0 	bl	800a668 <__kernel_cos>
 8009ea8:	e7f1      	b.n	8009e8e <sin+0x7e>
 8009eaa:	bf00      	nop
 8009eac:	f3af 8000 	nop.w
	...
 8009eb8:	3fe921fb 	.word	0x3fe921fb
 8009ebc:	7fefffff 	.word	0x7fefffff

08009ec0 <cosf>:
 8009ec0:	ee10 3a10 	vmov	r3, s0
 8009ec4:	b507      	push	{r0, r1, r2, lr}
 8009ec6:	4a1e      	ldr	r2, [pc, #120]	; (8009f40 <cosf+0x80>)
 8009ec8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009ecc:	4293      	cmp	r3, r2
 8009ece:	dc06      	bgt.n	8009ede <cosf+0x1e>
 8009ed0:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8009f44 <cosf+0x84>
 8009ed4:	b003      	add	sp, #12
 8009ed6:	f85d eb04 	ldr.w	lr, [sp], #4
 8009eda:	f001 b89b 	b.w	800b014 <__kernel_cosf>
 8009ede:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009ee2:	db04      	blt.n	8009eee <cosf+0x2e>
 8009ee4:	ee30 0a40 	vsub.f32	s0, s0, s0
 8009ee8:	b003      	add	sp, #12
 8009eea:	f85d fb04 	ldr.w	pc, [sp], #4
 8009eee:	4668      	mov	r0, sp
 8009ef0:	f000 fa7e 	bl	800a3f0 <__ieee754_rem_pio2f>
 8009ef4:	f000 0003 	and.w	r0, r0, #3
 8009ef8:	2801      	cmp	r0, #1
 8009efa:	d009      	beq.n	8009f10 <cosf+0x50>
 8009efc:	2802      	cmp	r0, #2
 8009efe:	d010      	beq.n	8009f22 <cosf+0x62>
 8009f00:	b9b0      	cbnz	r0, 8009f30 <cosf+0x70>
 8009f02:	eddd 0a01 	vldr	s1, [sp, #4]
 8009f06:	ed9d 0a00 	vldr	s0, [sp]
 8009f0a:	f001 f883 	bl	800b014 <__kernel_cosf>
 8009f0e:	e7eb      	b.n	8009ee8 <cosf+0x28>
 8009f10:	eddd 0a01 	vldr	s1, [sp, #4]
 8009f14:	ed9d 0a00 	vldr	s0, [sp]
 8009f18:	f001 fb52 	bl	800b5c0 <__kernel_sinf>
 8009f1c:	eeb1 0a40 	vneg.f32	s0, s0
 8009f20:	e7e2      	b.n	8009ee8 <cosf+0x28>
 8009f22:	eddd 0a01 	vldr	s1, [sp, #4]
 8009f26:	ed9d 0a00 	vldr	s0, [sp]
 8009f2a:	f001 f873 	bl	800b014 <__kernel_cosf>
 8009f2e:	e7f5      	b.n	8009f1c <cosf+0x5c>
 8009f30:	eddd 0a01 	vldr	s1, [sp, #4]
 8009f34:	ed9d 0a00 	vldr	s0, [sp]
 8009f38:	2001      	movs	r0, #1
 8009f3a:	f001 fb41 	bl	800b5c0 <__kernel_sinf>
 8009f3e:	e7d3      	b.n	8009ee8 <cosf+0x28>
 8009f40:	3f490fd8 	.word	0x3f490fd8
 8009f44:	00000000 	.word	0x00000000

08009f48 <sinf>:
 8009f48:	ee10 3a10 	vmov	r3, s0
 8009f4c:	b507      	push	{r0, r1, r2, lr}
 8009f4e:	4a1f      	ldr	r2, [pc, #124]	; (8009fcc <sinf+0x84>)
 8009f50:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009f54:	4293      	cmp	r3, r2
 8009f56:	dc07      	bgt.n	8009f68 <sinf+0x20>
 8009f58:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8009fd0 <sinf+0x88>
 8009f5c:	2000      	movs	r0, #0
 8009f5e:	b003      	add	sp, #12
 8009f60:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f64:	f001 bb2c 	b.w	800b5c0 <__kernel_sinf>
 8009f68:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009f6c:	db04      	blt.n	8009f78 <sinf+0x30>
 8009f6e:	ee30 0a40 	vsub.f32	s0, s0, s0
 8009f72:	b003      	add	sp, #12
 8009f74:	f85d fb04 	ldr.w	pc, [sp], #4
 8009f78:	4668      	mov	r0, sp
 8009f7a:	f000 fa39 	bl	800a3f0 <__ieee754_rem_pio2f>
 8009f7e:	f000 0003 	and.w	r0, r0, #3
 8009f82:	2801      	cmp	r0, #1
 8009f84:	d00a      	beq.n	8009f9c <sinf+0x54>
 8009f86:	2802      	cmp	r0, #2
 8009f88:	d00f      	beq.n	8009faa <sinf+0x62>
 8009f8a:	b9c0      	cbnz	r0, 8009fbe <sinf+0x76>
 8009f8c:	eddd 0a01 	vldr	s1, [sp, #4]
 8009f90:	ed9d 0a00 	vldr	s0, [sp]
 8009f94:	2001      	movs	r0, #1
 8009f96:	f001 fb13 	bl	800b5c0 <__kernel_sinf>
 8009f9a:	e7ea      	b.n	8009f72 <sinf+0x2a>
 8009f9c:	eddd 0a01 	vldr	s1, [sp, #4]
 8009fa0:	ed9d 0a00 	vldr	s0, [sp]
 8009fa4:	f001 f836 	bl	800b014 <__kernel_cosf>
 8009fa8:	e7e3      	b.n	8009f72 <sinf+0x2a>
 8009faa:	eddd 0a01 	vldr	s1, [sp, #4]
 8009fae:	ed9d 0a00 	vldr	s0, [sp]
 8009fb2:	2001      	movs	r0, #1
 8009fb4:	f001 fb04 	bl	800b5c0 <__kernel_sinf>
 8009fb8:	eeb1 0a40 	vneg.f32	s0, s0
 8009fbc:	e7d9      	b.n	8009f72 <sinf+0x2a>
 8009fbe:	eddd 0a01 	vldr	s1, [sp, #4]
 8009fc2:	ed9d 0a00 	vldr	s0, [sp]
 8009fc6:	f001 f825 	bl	800b014 <__kernel_cosf>
 8009fca:	e7f5      	b.n	8009fb8 <sinf+0x70>
 8009fcc:	3f490fd8 	.word	0x3f490fd8
	...

08009fd8 <__ieee754_rem_pio2>:
 8009fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fdc:	ed2d 8b02 	vpush	{d8}
 8009fe0:	ec55 4b10 	vmov	r4, r5, d0
 8009fe4:	4bca      	ldr	r3, [pc, #808]	; (800a310 <__ieee754_rem_pio2+0x338>)
 8009fe6:	b08b      	sub	sp, #44	; 0x2c
 8009fe8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8009fec:	4598      	cmp	r8, r3
 8009fee:	4682      	mov	sl, r0
 8009ff0:	9502      	str	r5, [sp, #8]
 8009ff2:	dc08      	bgt.n	800a006 <__ieee754_rem_pio2+0x2e>
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	ed80 0b00 	vstr	d0, [r0]
 8009ffc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a000:	f04f 0b00 	mov.w	fp, #0
 800a004:	e028      	b.n	800a058 <__ieee754_rem_pio2+0x80>
 800a006:	4bc3      	ldr	r3, [pc, #780]	; (800a314 <__ieee754_rem_pio2+0x33c>)
 800a008:	4598      	cmp	r8, r3
 800a00a:	dc78      	bgt.n	800a0fe <__ieee754_rem_pio2+0x126>
 800a00c:	9b02      	ldr	r3, [sp, #8]
 800a00e:	4ec2      	ldr	r6, [pc, #776]	; (800a318 <__ieee754_rem_pio2+0x340>)
 800a010:	2b00      	cmp	r3, #0
 800a012:	ee10 0a10 	vmov	r0, s0
 800a016:	a3b0      	add	r3, pc, #704	; (adr r3, 800a2d8 <__ieee754_rem_pio2+0x300>)
 800a018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a01c:	4629      	mov	r1, r5
 800a01e:	dd39      	ble.n	800a094 <__ieee754_rem_pio2+0xbc>
 800a020:	f7f6 f8de 	bl	80001e0 <__aeabi_dsub>
 800a024:	45b0      	cmp	r8, r6
 800a026:	4604      	mov	r4, r0
 800a028:	460d      	mov	r5, r1
 800a02a:	d01b      	beq.n	800a064 <__ieee754_rem_pio2+0x8c>
 800a02c:	a3ac      	add	r3, pc, #688	; (adr r3, 800a2e0 <__ieee754_rem_pio2+0x308>)
 800a02e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a032:	f7f6 f8d5 	bl	80001e0 <__aeabi_dsub>
 800a036:	4602      	mov	r2, r0
 800a038:	460b      	mov	r3, r1
 800a03a:	e9ca 2300 	strd	r2, r3, [sl]
 800a03e:	4620      	mov	r0, r4
 800a040:	4629      	mov	r1, r5
 800a042:	f7f6 f8cd 	bl	80001e0 <__aeabi_dsub>
 800a046:	a3a6      	add	r3, pc, #664	; (adr r3, 800a2e0 <__ieee754_rem_pio2+0x308>)
 800a048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a04c:	f7f6 f8c8 	bl	80001e0 <__aeabi_dsub>
 800a050:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a054:	f04f 0b01 	mov.w	fp, #1
 800a058:	4658      	mov	r0, fp
 800a05a:	b00b      	add	sp, #44	; 0x2c
 800a05c:	ecbd 8b02 	vpop	{d8}
 800a060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a064:	a3a0      	add	r3, pc, #640	; (adr r3, 800a2e8 <__ieee754_rem_pio2+0x310>)
 800a066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a06a:	f7f6 f8b9 	bl	80001e0 <__aeabi_dsub>
 800a06e:	a3a0      	add	r3, pc, #640	; (adr r3, 800a2f0 <__ieee754_rem_pio2+0x318>)
 800a070:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a074:	4604      	mov	r4, r0
 800a076:	460d      	mov	r5, r1
 800a078:	f7f6 f8b2 	bl	80001e0 <__aeabi_dsub>
 800a07c:	4602      	mov	r2, r0
 800a07e:	460b      	mov	r3, r1
 800a080:	e9ca 2300 	strd	r2, r3, [sl]
 800a084:	4620      	mov	r0, r4
 800a086:	4629      	mov	r1, r5
 800a088:	f7f6 f8aa 	bl	80001e0 <__aeabi_dsub>
 800a08c:	a398      	add	r3, pc, #608	; (adr r3, 800a2f0 <__ieee754_rem_pio2+0x318>)
 800a08e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a092:	e7db      	b.n	800a04c <__ieee754_rem_pio2+0x74>
 800a094:	f7f6 f8a6 	bl	80001e4 <__adddf3>
 800a098:	45b0      	cmp	r8, r6
 800a09a:	4604      	mov	r4, r0
 800a09c:	460d      	mov	r5, r1
 800a09e:	d016      	beq.n	800a0ce <__ieee754_rem_pio2+0xf6>
 800a0a0:	a38f      	add	r3, pc, #572	; (adr r3, 800a2e0 <__ieee754_rem_pio2+0x308>)
 800a0a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0a6:	f7f6 f89d 	bl	80001e4 <__adddf3>
 800a0aa:	4602      	mov	r2, r0
 800a0ac:	460b      	mov	r3, r1
 800a0ae:	e9ca 2300 	strd	r2, r3, [sl]
 800a0b2:	4620      	mov	r0, r4
 800a0b4:	4629      	mov	r1, r5
 800a0b6:	f7f6 f893 	bl	80001e0 <__aeabi_dsub>
 800a0ba:	a389      	add	r3, pc, #548	; (adr r3, 800a2e0 <__ieee754_rem_pio2+0x308>)
 800a0bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0c0:	f7f6 f890 	bl	80001e4 <__adddf3>
 800a0c4:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800a0c8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a0cc:	e7c4      	b.n	800a058 <__ieee754_rem_pio2+0x80>
 800a0ce:	a386      	add	r3, pc, #536	; (adr r3, 800a2e8 <__ieee754_rem_pio2+0x310>)
 800a0d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0d4:	f7f6 f886 	bl	80001e4 <__adddf3>
 800a0d8:	a385      	add	r3, pc, #532	; (adr r3, 800a2f0 <__ieee754_rem_pio2+0x318>)
 800a0da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0de:	4604      	mov	r4, r0
 800a0e0:	460d      	mov	r5, r1
 800a0e2:	f7f6 f87f 	bl	80001e4 <__adddf3>
 800a0e6:	4602      	mov	r2, r0
 800a0e8:	460b      	mov	r3, r1
 800a0ea:	e9ca 2300 	strd	r2, r3, [sl]
 800a0ee:	4620      	mov	r0, r4
 800a0f0:	4629      	mov	r1, r5
 800a0f2:	f7f6 f875 	bl	80001e0 <__aeabi_dsub>
 800a0f6:	a37e      	add	r3, pc, #504	; (adr r3, 800a2f0 <__ieee754_rem_pio2+0x318>)
 800a0f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0fc:	e7e0      	b.n	800a0c0 <__ieee754_rem_pio2+0xe8>
 800a0fe:	4b87      	ldr	r3, [pc, #540]	; (800a31c <__ieee754_rem_pio2+0x344>)
 800a100:	4598      	cmp	r8, r3
 800a102:	f300 80d9 	bgt.w	800a2b8 <__ieee754_rem_pio2+0x2e0>
 800a106:	f001 faa3 	bl	800b650 <fabs>
 800a10a:	ec55 4b10 	vmov	r4, r5, d0
 800a10e:	ee10 0a10 	vmov	r0, s0
 800a112:	a379      	add	r3, pc, #484	; (adr r3, 800a2f8 <__ieee754_rem_pio2+0x320>)
 800a114:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a118:	4629      	mov	r1, r5
 800a11a:	f7f6 fa19 	bl	8000550 <__aeabi_dmul>
 800a11e:	4b80      	ldr	r3, [pc, #512]	; (800a320 <__ieee754_rem_pio2+0x348>)
 800a120:	2200      	movs	r2, #0
 800a122:	f7f6 f85f 	bl	80001e4 <__adddf3>
 800a126:	f7f6 fcad 	bl	8000a84 <__aeabi_d2iz>
 800a12a:	4683      	mov	fp, r0
 800a12c:	f7f6 f9a6 	bl	800047c <__aeabi_i2d>
 800a130:	4602      	mov	r2, r0
 800a132:	460b      	mov	r3, r1
 800a134:	ec43 2b18 	vmov	d8, r2, r3
 800a138:	a367      	add	r3, pc, #412	; (adr r3, 800a2d8 <__ieee754_rem_pio2+0x300>)
 800a13a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a13e:	f7f6 fa07 	bl	8000550 <__aeabi_dmul>
 800a142:	4602      	mov	r2, r0
 800a144:	460b      	mov	r3, r1
 800a146:	4620      	mov	r0, r4
 800a148:	4629      	mov	r1, r5
 800a14a:	f7f6 f849 	bl	80001e0 <__aeabi_dsub>
 800a14e:	a364      	add	r3, pc, #400	; (adr r3, 800a2e0 <__ieee754_rem_pio2+0x308>)
 800a150:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a154:	4606      	mov	r6, r0
 800a156:	460f      	mov	r7, r1
 800a158:	ec51 0b18 	vmov	r0, r1, d8
 800a15c:	f7f6 f9f8 	bl	8000550 <__aeabi_dmul>
 800a160:	f1bb 0f1f 	cmp.w	fp, #31
 800a164:	4604      	mov	r4, r0
 800a166:	460d      	mov	r5, r1
 800a168:	dc0d      	bgt.n	800a186 <__ieee754_rem_pio2+0x1ae>
 800a16a:	4b6e      	ldr	r3, [pc, #440]	; (800a324 <__ieee754_rem_pio2+0x34c>)
 800a16c:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 800a170:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a174:	4543      	cmp	r3, r8
 800a176:	d006      	beq.n	800a186 <__ieee754_rem_pio2+0x1ae>
 800a178:	4622      	mov	r2, r4
 800a17a:	462b      	mov	r3, r5
 800a17c:	4630      	mov	r0, r6
 800a17e:	4639      	mov	r1, r7
 800a180:	f7f6 f82e 	bl	80001e0 <__aeabi_dsub>
 800a184:	e00f      	b.n	800a1a6 <__ieee754_rem_pio2+0x1ce>
 800a186:	462b      	mov	r3, r5
 800a188:	4622      	mov	r2, r4
 800a18a:	4630      	mov	r0, r6
 800a18c:	4639      	mov	r1, r7
 800a18e:	f7f6 f827 	bl	80001e0 <__aeabi_dsub>
 800a192:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a196:	9303      	str	r3, [sp, #12]
 800a198:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a19c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800a1a0:	f1b8 0f10 	cmp.w	r8, #16
 800a1a4:	dc02      	bgt.n	800a1ac <__ieee754_rem_pio2+0x1d4>
 800a1a6:	e9ca 0100 	strd	r0, r1, [sl]
 800a1aa:	e039      	b.n	800a220 <__ieee754_rem_pio2+0x248>
 800a1ac:	a34e      	add	r3, pc, #312	; (adr r3, 800a2e8 <__ieee754_rem_pio2+0x310>)
 800a1ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1b2:	ec51 0b18 	vmov	r0, r1, d8
 800a1b6:	f7f6 f9cb 	bl	8000550 <__aeabi_dmul>
 800a1ba:	4604      	mov	r4, r0
 800a1bc:	460d      	mov	r5, r1
 800a1be:	4602      	mov	r2, r0
 800a1c0:	460b      	mov	r3, r1
 800a1c2:	4630      	mov	r0, r6
 800a1c4:	4639      	mov	r1, r7
 800a1c6:	f7f6 f80b 	bl	80001e0 <__aeabi_dsub>
 800a1ca:	4602      	mov	r2, r0
 800a1cc:	460b      	mov	r3, r1
 800a1ce:	4680      	mov	r8, r0
 800a1d0:	4689      	mov	r9, r1
 800a1d2:	4630      	mov	r0, r6
 800a1d4:	4639      	mov	r1, r7
 800a1d6:	f7f6 f803 	bl	80001e0 <__aeabi_dsub>
 800a1da:	4622      	mov	r2, r4
 800a1dc:	462b      	mov	r3, r5
 800a1de:	f7f5 ffff 	bl	80001e0 <__aeabi_dsub>
 800a1e2:	a343      	add	r3, pc, #268	; (adr r3, 800a2f0 <__ieee754_rem_pio2+0x318>)
 800a1e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1e8:	4604      	mov	r4, r0
 800a1ea:	460d      	mov	r5, r1
 800a1ec:	ec51 0b18 	vmov	r0, r1, d8
 800a1f0:	f7f6 f9ae 	bl	8000550 <__aeabi_dmul>
 800a1f4:	4622      	mov	r2, r4
 800a1f6:	462b      	mov	r3, r5
 800a1f8:	f7f5 fff2 	bl	80001e0 <__aeabi_dsub>
 800a1fc:	4602      	mov	r2, r0
 800a1fe:	460b      	mov	r3, r1
 800a200:	4604      	mov	r4, r0
 800a202:	460d      	mov	r5, r1
 800a204:	4640      	mov	r0, r8
 800a206:	4649      	mov	r1, r9
 800a208:	f7f5 ffea 	bl	80001e0 <__aeabi_dsub>
 800a20c:	9a03      	ldr	r2, [sp, #12]
 800a20e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a212:	1ad3      	subs	r3, r2, r3
 800a214:	2b31      	cmp	r3, #49	; 0x31
 800a216:	dc24      	bgt.n	800a262 <__ieee754_rem_pio2+0x28a>
 800a218:	e9ca 0100 	strd	r0, r1, [sl]
 800a21c:	4646      	mov	r6, r8
 800a21e:	464f      	mov	r7, r9
 800a220:	e9da 8900 	ldrd	r8, r9, [sl]
 800a224:	4630      	mov	r0, r6
 800a226:	4642      	mov	r2, r8
 800a228:	464b      	mov	r3, r9
 800a22a:	4639      	mov	r1, r7
 800a22c:	f7f5 ffd8 	bl	80001e0 <__aeabi_dsub>
 800a230:	462b      	mov	r3, r5
 800a232:	4622      	mov	r2, r4
 800a234:	f7f5 ffd4 	bl	80001e0 <__aeabi_dsub>
 800a238:	9b02      	ldr	r3, [sp, #8]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a240:	f6bf af0a 	bge.w	800a058 <__ieee754_rem_pio2+0x80>
 800a244:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a248:	f8ca 3004 	str.w	r3, [sl, #4]
 800a24c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a250:	f8ca 8000 	str.w	r8, [sl]
 800a254:	f8ca 0008 	str.w	r0, [sl, #8]
 800a258:	f8ca 300c 	str.w	r3, [sl, #12]
 800a25c:	f1cb 0b00 	rsb	fp, fp, #0
 800a260:	e6fa      	b.n	800a058 <__ieee754_rem_pio2+0x80>
 800a262:	a327      	add	r3, pc, #156	; (adr r3, 800a300 <__ieee754_rem_pio2+0x328>)
 800a264:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a268:	ec51 0b18 	vmov	r0, r1, d8
 800a26c:	f7f6 f970 	bl	8000550 <__aeabi_dmul>
 800a270:	4604      	mov	r4, r0
 800a272:	460d      	mov	r5, r1
 800a274:	4602      	mov	r2, r0
 800a276:	460b      	mov	r3, r1
 800a278:	4640      	mov	r0, r8
 800a27a:	4649      	mov	r1, r9
 800a27c:	f7f5 ffb0 	bl	80001e0 <__aeabi_dsub>
 800a280:	4602      	mov	r2, r0
 800a282:	460b      	mov	r3, r1
 800a284:	4606      	mov	r6, r0
 800a286:	460f      	mov	r7, r1
 800a288:	4640      	mov	r0, r8
 800a28a:	4649      	mov	r1, r9
 800a28c:	f7f5 ffa8 	bl	80001e0 <__aeabi_dsub>
 800a290:	4622      	mov	r2, r4
 800a292:	462b      	mov	r3, r5
 800a294:	f7f5 ffa4 	bl	80001e0 <__aeabi_dsub>
 800a298:	a31b      	add	r3, pc, #108	; (adr r3, 800a308 <__ieee754_rem_pio2+0x330>)
 800a29a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a29e:	4604      	mov	r4, r0
 800a2a0:	460d      	mov	r5, r1
 800a2a2:	ec51 0b18 	vmov	r0, r1, d8
 800a2a6:	f7f6 f953 	bl	8000550 <__aeabi_dmul>
 800a2aa:	4622      	mov	r2, r4
 800a2ac:	462b      	mov	r3, r5
 800a2ae:	f7f5 ff97 	bl	80001e0 <__aeabi_dsub>
 800a2b2:	4604      	mov	r4, r0
 800a2b4:	460d      	mov	r5, r1
 800a2b6:	e75f      	b.n	800a178 <__ieee754_rem_pio2+0x1a0>
 800a2b8:	4b1b      	ldr	r3, [pc, #108]	; (800a328 <__ieee754_rem_pio2+0x350>)
 800a2ba:	4598      	cmp	r8, r3
 800a2bc:	dd36      	ble.n	800a32c <__ieee754_rem_pio2+0x354>
 800a2be:	ee10 2a10 	vmov	r2, s0
 800a2c2:	462b      	mov	r3, r5
 800a2c4:	4620      	mov	r0, r4
 800a2c6:	4629      	mov	r1, r5
 800a2c8:	f7f5 ff8a 	bl	80001e0 <__aeabi_dsub>
 800a2cc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800a2d0:	e9ca 0100 	strd	r0, r1, [sl]
 800a2d4:	e694      	b.n	800a000 <__ieee754_rem_pio2+0x28>
 800a2d6:	bf00      	nop
 800a2d8:	54400000 	.word	0x54400000
 800a2dc:	3ff921fb 	.word	0x3ff921fb
 800a2e0:	1a626331 	.word	0x1a626331
 800a2e4:	3dd0b461 	.word	0x3dd0b461
 800a2e8:	1a600000 	.word	0x1a600000
 800a2ec:	3dd0b461 	.word	0x3dd0b461
 800a2f0:	2e037073 	.word	0x2e037073
 800a2f4:	3ba3198a 	.word	0x3ba3198a
 800a2f8:	6dc9c883 	.word	0x6dc9c883
 800a2fc:	3fe45f30 	.word	0x3fe45f30
 800a300:	2e000000 	.word	0x2e000000
 800a304:	3ba3198a 	.word	0x3ba3198a
 800a308:	252049c1 	.word	0x252049c1
 800a30c:	397b839a 	.word	0x397b839a
 800a310:	3fe921fb 	.word	0x3fe921fb
 800a314:	4002d97b 	.word	0x4002d97b
 800a318:	3ff921fb 	.word	0x3ff921fb
 800a31c:	413921fb 	.word	0x413921fb
 800a320:	3fe00000 	.word	0x3fe00000
 800a324:	0800c304 	.word	0x0800c304
 800a328:	7fefffff 	.word	0x7fefffff
 800a32c:	ea4f 5428 	mov.w	r4, r8, asr #20
 800a330:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800a334:	ee10 0a10 	vmov	r0, s0
 800a338:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800a33c:	ee10 6a10 	vmov	r6, s0
 800a340:	460f      	mov	r7, r1
 800a342:	f7f6 fb9f 	bl	8000a84 <__aeabi_d2iz>
 800a346:	f7f6 f899 	bl	800047c <__aeabi_i2d>
 800a34a:	4602      	mov	r2, r0
 800a34c:	460b      	mov	r3, r1
 800a34e:	4630      	mov	r0, r6
 800a350:	4639      	mov	r1, r7
 800a352:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a356:	f7f5 ff43 	bl	80001e0 <__aeabi_dsub>
 800a35a:	4b23      	ldr	r3, [pc, #140]	; (800a3e8 <__ieee754_rem_pio2+0x410>)
 800a35c:	2200      	movs	r2, #0
 800a35e:	f7f6 f8f7 	bl	8000550 <__aeabi_dmul>
 800a362:	460f      	mov	r7, r1
 800a364:	4606      	mov	r6, r0
 800a366:	f7f6 fb8d 	bl	8000a84 <__aeabi_d2iz>
 800a36a:	f7f6 f887 	bl	800047c <__aeabi_i2d>
 800a36e:	4602      	mov	r2, r0
 800a370:	460b      	mov	r3, r1
 800a372:	4630      	mov	r0, r6
 800a374:	4639      	mov	r1, r7
 800a376:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a37a:	f7f5 ff31 	bl	80001e0 <__aeabi_dsub>
 800a37e:	4b1a      	ldr	r3, [pc, #104]	; (800a3e8 <__ieee754_rem_pio2+0x410>)
 800a380:	2200      	movs	r2, #0
 800a382:	f7f6 f8e5 	bl	8000550 <__aeabi_dmul>
 800a386:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a38a:	ad04      	add	r5, sp, #16
 800a38c:	f04f 0803 	mov.w	r8, #3
 800a390:	46a9      	mov	r9, r5
 800a392:	2600      	movs	r6, #0
 800a394:	2700      	movs	r7, #0
 800a396:	4632      	mov	r2, r6
 800a398:	463b      	mov	r3, r7
 800a39a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800a39e:	46c3      	mov	fp, r8
 800a3a0:	3d08      	subs	r5, #8
 800a3a2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800a3a6:	f7f6 fb3b 	bl	8000a20 <__aeabi_dcmpeq>
 800a3aa:	2800      	cmp	r0, #0
 800a3ac:	d1f3      	bne.n	800a396 <__ieee754_rem_pio2+0x3be>
 800a3ae:	4b0f      	ldr	r3, [pc, #60]	; (800a3ec <__ieee754_rem_pio2+0x414>)
 800a3b0:	9301      	str	r3, [sp, #4]
 800a3b2:	2302      	movs	r3, #2
 800a3b4:	9300      	str	r3, [sp, #0]
 800a3b6:	4622      	mov	r2, r4
 800a3b8:	465b      	mov	r3, fp
 800a3ba:	4651      	mov	r1, sl
 800a3bc:	4648      	mov	r0, r9
 800a3be:	f000 fa1b 	bl	800a7f8 <__kernel_rem_pio2>
 800a3c2:	9b02      	ldr	r3, [sp, #8]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	4683      	mov	fp, r0
 800a3c8:	f6bf ae46 	bge.w	800a058 <__ieee754_rem_pio2+0x80>
 800a3cc:	e9da 2100 	ldrd	r2, r1, [sl]
 800a3d0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a3d4:	e9ca 2300 	strd	r2, r3, [sl]
 800a3d8:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800a3dc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a3e0:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800a3e4:	e73a      	b.n	800a25c <__ieee754_rem_pio2+0x284>
 800a3e6:	bf00      	nop
 800a3e8:	41700000 	.word	0x41700000
 800a3ec:	0800c384 	.word	0x0800c384

0800a3f0 <__ieee754_rem_pio2f>:
 800a3f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a3f2:	ee10 6a10 	vmov	r6, s0
 800a3f6:	4b8e      	ldr	r3, [pc, #568]	; (800a630 <__ieee754_rem_pio2f+0x240>)
 800a3f8:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800a3fc:	429d      	cmp	r5, r3
 800a3fe:	b087      	sub	sp, #28
 800a400:	eef0 7a40 	vmov.f32	s15, s0
 800a404:	4604      	mov	r4, r0
 800a406:	dc05      	bgt.n	800a414 <__ieee754_rem_pio2f+0x24>
 800a408:	2300      	movs	r3, #0
 800a40a:	ed80 0a00 	vstr	s0, [r0]
 800a40e:	6043      	str	r3, [r0, #4]
 800a410:	2000      	movs	r0, #0
 800a412:	e01a      	b.n	800a44a <__ieee754_rem_pio2f+0x5a>
 800a414:	4b87      	ldr	r3, [pc, #540]	; (800a634 <__ieee754_rem_pio2f+0x244>)
 800a416:	429d      	cmp	r5, r3
 800a418:	dc46      	bgt.n	800a4a8 <__ieee754_rem_pio2f+0xb8>
 800a41a:	2e00      	cmp	r6, #0
 800a41c:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800a638 <__ieee754_rem_pio2f+0x248>
 800a420:	4b86      	ldr	r3, [pc, #536]	; (800a63c <__ieee754_rem_pio2f+0x24c>)
 800a422:	f025 050f 	bic.w	r5, r5, #15
 800a426:	dd1f      	ble.n	800a468 <__ieee754_rem_pio2f+0x78>
 800a428:	429d      	cmp	r5, r3
 800a42a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a42e:	d00e      	beq.n	800a44e <__ieee754_rem_pio2f+0x5e>
 800a430:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800a640 <__ieee754_rem_pio2f+0x250>
 800a434:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800a438:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a43c:	ed80 0a00 	vstr	s0, [r0]
 800a440:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a444:	2001      	movs	r0, #1
 800a446:	edc4 7a01 	vstr	s15, [r4, #4]
 800a44a:	b007      	add	sp, #28
 800a44c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a44e:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800a644 <__ieee754_rem_pio2f+0x254>
 800a452:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800a648 <__ieee754_rem_pio2f+0x258>
 800a456:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a45a:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800a45e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a462:	edc0 6a00 	vstr	s13, [r0]
 800a466:	e7eb      	b.n	800a440 <__ieee754_rem_pio2f+0x50>
 800a468:	429d      	cmp	r5, r3
 800a46a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a46e:	d00e      	beq.n	800a48e <__ieee754_rem_pio2f+0x9e>
 800a470:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800a640 <__ieee754_rem_pio2f+0x250>
 800a474:	ee37 0a87 	vadd.f32	s0, s15, s14
 800a478:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800a47c:	ed80 0a00 	vstr	s0, [r0]
 800a480:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a484:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a488:	edc4 7a01 	vstr	s15, [r4, #4]
 800a48c:	e7dd      	b.n	800a44a <__ieee754_rem_pio2f+0x5a>
 800a48e:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800a644 <__ieee754_rem_pio2f+0x254>
 800a492:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800a648 <__ieee754_rem_pio2f+0x258>
 800a496:	ee77 7a80 	vadd.f32	s15, s15, s0
 800a49a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a49e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a4a2:	edc0 6a00 	vstr	s13, [r0]
 800a4a6:	e7eb      	b.n	800a480 <__ieee754_rem_pio2f+0x90>
 800a4a8:	4b68      	ldr	r3, [pc, #416]	; (800a64c <__ieee754_rem_pio2f+0x25c>)
 800a4aa:	429d      	cmp	r5, r3
 800a4ac:	dc72      	bgt.n	800a594 <__ieee754_rem_pio2f+0x1a4>
 800a4ae:	f001 f9e1 	bl	800b874 <fabsf>
 800a4b2:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800a650 <__ieee754_rem_pio2f+0x260>
 800a4b6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800a4ba:	eee0 7a07 	vfma.f32	s15, s0, s14
 800a4be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a4c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a4c6:	ee17 0a90 	vmov	r0, s15
 800a4ca:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800a638 <__ieee754_rem_pio2f+0x248>
 800a4ce:	eea7 0a67 	vfms.f32	s0, s14, s15
 800a4d2:	281f      	cmp	r0, #31
 800a4d4:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800a640 <__ieee754_rem_pio2f+0x250>
 800a4d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4dc:	eeb1 6a47 	vneg.f32	s12, s14
 800a4e0:	ee70 6a67 	vsub.f32	s13, s0, s15
 800a4e4:	ee16 2a90 	vmov	r2, s13
 800a4e8:	dc1c      	bgt.n	800a524 <__ieee754_rem_pio2f+0x134>
 800a4ea:	495a      	ldr	r1, [pc, #360]	; (800a654 <__ieee754_rem_pio2f+0x264>)
 800a4ec:	1e47      	subs	r7, r0, #1
 800a4ee:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800a4f2:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800a4f6:	428b      	cmp	r3, r1
 800a4f8:	d014      	beq.n	800a524 <__ieee754_rem_pio2f+0x134>
 800a4fa:	6022      	str	r2, [r4, #0]
 800a4fc:	ed94 7a00 	vldr	s14, [r4]
 800a500:	ee30 0a47 	vsub.f32	s0, s0, s14
 800a504:	2e00      	cmp	r6, #0
 800a506:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a50a:	ed84 0a01 	vstr	s0, [r4, #4]
 800a50e:	da9c      	bge.n	800a44a <__ieee754_rem_pio2f+0x5a>
 800a510:	eeb1 7a47 	vneg.f32	s14, s14
 800a514:	eeb1 0a40 	vneg.f32	s0, s0
 800a518:	ed84 7a00 	vstr	s14, [r4]
 800a51c:	ed84 0a01 	vstr	s0, [r4, #4]
 800a520:	4240      	negs	r0, r0
 800a522:	e792      	b.n	800a44a <__ieee754_rem_pio2f+0x5a>
 800a524:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800a528:	15eb      	asrs	r3, r5, #23
 800a52a:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800a52e:	2d08      	cmp	r5, #8
 800a530:	dde3      	ble.n	800a4fa <__ieee754_rem_pio2f+0x10a>
 800a532:	eddf 7a44 	vldr	s15, [pc, #272]	; 800a644 <__ieee754_rem_pio2f+0x254>
 800a536:	eddf 5a44 	vldr	s11, [pc, #272]	; 800a648 <__ieee754_rem_pio2f+0x258>
 800a53a:	eef0 6a40 	vmov.f32	s13, s0
 800a53e:	eee6 6a27 	vfma.f32	s13, s12, s15
 800a542:	ee30 0a66 	vsub.f32	s0, s0, s13
 800a546:	eea6 0a27 	vfma.f32	s0, s12, s15
 800a54a:	eef0 7a40 	vmov.f32	s15, s0
 800a54e:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800a552:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800a556:	ee15 2a90 	vmov	r2, s11
 800a55a:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800a55e:	1a5b      	subs	r3, r3, r1
 800a560:	2b19      	cmp	r3, #25
 800a562:	dc04      	bgt.n	800a56e <__ieee754_rem_pio2f+0x17e>
 800a564:	edc4 5a00 	vstr	s11, [r4]
 800a568:	eeb0 0a66 	vmov.f32	s0, s13
 800a56c:	e7c6      	b.n	800a4fc <__ieee754_rem_pio2f+0x10c>
 800a56e:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800a658 <__ieee754_rem_pio2f+0x268>
 800a572:	eeb0 0a66 	vmov.f32	s0, s13
 800a576:	eea6 0a25 	vfma.f32	s0, s12, s11
 800a57a:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800a57e:	eddf 6a37 	vldr	s13, [pc, #220]	; 800a65c <__ieee754_rem_pio2f+0x26c>
 800a582:	eee6 7a25 	vfma.f32	s15, s12, s11
 800a586:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800a58a:	ee30 7a67 	vsub.f32	s14, s0, s15
 800a58e:	ed84 7a00 	vstr	s14, [r4]
 800a592:	e7b3      	b.n	800a4fc <__ieee754_rem_pio2f+0x10c>
 800a594:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800a598:	db06      	blt.n	800a5a8 <__ieee754_rem_pio2f+0x1b8>
 800a59a:	ee70 7a40 	vsub.f32	s15, s0, s0
 800a59e:	edc0 7a01 	vstr	s15, [r0, #4]
 800a5a2:	edc0 7a00 	vstr	s15, [r0]
 800a5a6:	e733      	b.n	800a410 <__ieee754_rem_pio2f+0x20>
 800a5a8:	15ea      	asrs	r2, r5, #23
 800a5aa:	3a86      	subs	r2, #134	; 0x86
 800a5ac:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800a5b0:	ee07 3a90 	vmov	s15, r3
 800a5b4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800a5b8:	eddf 6a29 	vldr	s13, [pc, #164]	; 800a660 <__ieee754_rem_pio2f+0x270>
 800a5bc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a5c0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a5c4:	ed8d 7a03 	vstr	s14, [sp, #12]
 800a5c8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a5cc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800a5d0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a5d4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a5d8:	ed8d 7a04 	vstr	s14, [sp, #16]
 800a5dc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a5e0:	eef5 7a40 	vcmp.f32	s15, #0.0
 800a5e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5e8:	edcd 7a05 	vstr	s15, [sp, #20]
 800a5ec:	d11e      	bne.n	800a62c <__ieee754_rem_pio2f+0x23c>
 800a5ee:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800a5f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5f6:	bf14      	ite	ne
 800a5f8:	2302      	movne	r3, #2
 800a5fa:	2301      	moveq	r3, #1
 800a5fc:	4919      	ldr	r1, [pc, #100]	; (800a664 <__ieee754_rem_pio2f+0x274>)
 800a5fe:	9101      	str	r1, [sp, #4]
 800a600:	2102      	movs	r1, #2
 800a602:	9100      	str	r1, [sp, #0]
 800a604:	a803      	add	r0, sp, #12
 800a606:	4621      	mov	r1, r4
 800a608:	f000 fd64 	bl	800b0d4 <__kernel_rem_pio2f>
 800a60c:	2e00      	cmp	r6, #0
 800a60e:	f6bf af1c 	bge.w	800a44a <__ieee754_rem_pio2f+0x5a>
 800a612:	edd4 7a00 	vldr	s15, [r4]
 800a616:	eef1 7a67 	vneg.f32	s15, s15
 800a61a:	edc4 7a00 	vstr	s15, [r4]
 800a61e:	edd4 7a01 	vldr	s15, [r4, #4]
 800a622:	eef1 7a67 	vneg.f32	s15, s15
 800a626:	edc4 7a01 	vstr	s15, [r4, #4]
 800a62a:	e779      	b.n	800a520 <__ieee754_rem_pio2f+0x130>
 800a62c:	2303      	movs	r3, #3
 800a62e:	e7e5      	b.n	800a5fc <__ieee754_rem_pio2f+0x20c>
 800a630:	3f490fd8 	.word	0x3f490fd8
 800a634:	4016cbe3 	.word	0x4016cbe3
 800a638:	3fc90f80 	.word	0x3fc90f80
 800a63c:	3fc90fd0 	.word	0x3fc90fd0
 800a640:	37354443 	.word	0x37354443
 800a644:	37354400 	.word	0x37354400
 800a648:	2e85a308 	.word	0x2e85a308
 800a64c:	43490f80 	.word	0x43490f80
 800a650:	3f22f984 	.word	0x3f22f984
 800a654:	0800c48c 	.word	0x0800c48c
 800a658:	2e85a300 	.word	0x2e85a300
 800a65c:	248d3132 	.word	0x248d3132
 800a660:	43800000 	.word	0x43800000
 800a664:	0800c50c 	.word	0x0800c50c

0800a668 <__kernel_cos>:
 800a668:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a66c:	ec57 6b10 	vmov	r6, r7, d0
 800a670:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800a674:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800a678:	ed8d 1b00 	vstr	d1, [sp]
 800a67c:	da07      	bge.n	800a68e <__kernel_cos+0x26>
 800a67e:	ee10 0a10 	vmov	r0, s0
 800a682:	4639      	mov	r1, r7
 800a684:	f7f6 f9fe 	bl	8000a84 <__aeabi_d2iz>
 800a688:	2800      	cmp	r0, #0
 800a68a:	f000 8088 	beq.w	800a79e <__kernel_cos+0x136>
 800a68e:	4632      	mov	r2, r6
 800a690:	463b      	mov	r3, r7
 800a692:	4630      	mov	r0, r6
 800a694:	4639      	mov	r1, r7
 800a696:	f7f5 ff5b 	bl	8000550 <__aeabi_dmul>
 800a69a:	4b51      	ldr	r3, [pc, #324]	; (800a7e0 <__kernel_cos+0x178>)
 800a69c:	2200      	movs	r2, #0
 800a69e:	4604      	mov	r4, r0
 800a6a0:	460d      	mov	r5, r1
 800a6a2:	f7f5 ff55 	bl	8000550 <__aeabi_dmul>
 800a6a6:	a340      	add	r3, pc, #256	; (adr r3, 800a7a8 <__kernel_cos+0x140>)
 800a6a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ac:	4682      	mov	sl, r0
 800a6ae:	468b      	mov	fp, r1
 800a6b0:	4620      	mov	r0, r4
 800a6b2:	4629      	mov	r1, r5
 800a6b4:	f7f5 ff4c 	bl	8000550 <__aeabi_dmul>
 800a6b8:	a33d      	add	r3, pc, #244	; (adr r3, 800a7b0 <__kernel_cos+0x148>)
 800a6ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6be:	f7f5 fd91 	bl	80001e4 <__adddf3>
 800a6c2:	4622      	mov	r2, r4
 800a6c4:	462b      	mov	r3, r5
 800a6c6:	f7f5 ff43 	bl	8000550 <__aeabi_dmul>
 800a6ca:	a33b      	add	r3, pc, #236	; (adr r3, 800a7b8 <__kernel_cos+0x150>)
 800a6cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6d0:	f7f5 fd86 	bl	80001e0 <__aeabi_dsub>
 800a6d4:	4622      	mov	r2, r4
 800a6d6:	462b      	mov	r3, r5
 800a6d8:	f7f5 ff3a 	bl	8000550 <__aeabi_dmul>
 800a6dc:	a338      	add	r3, pc, #224	; (adr r3, 800a7c0 <__kernel_cos+0x158>)
 800a6de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6e2:	f7f5 fd7f 	bl	80001e4 <__adddf3>
 800a6e6:	4622      	mov	r2, r4
 800a6e8:	462b      	mov	r3, r5
 800a6ea:	f7f5 ff31 	bl	8000550 <__aeabi_dmul>
 800a6ee:	a336      	add	r3, pc, #216	; (adr r3, 800a7c8 <__kernel_cos+0x160>)
 800a6f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6f4:	f7f5 fd74 	bl	80001e0 <__aeabi_dsub>
 800a6f8:	4622      	mov	r2, r4
 800a6fa:	462b      	mov	r3, r5
 800a6fc:	f7f5 ff28 	bl	8000550 <__aeabi_dmul>
 800a700:	a333      	add	r3, pc, #204	; (adr r3, 800a7d0 <__kernel_cos+0x168>)
 800a702:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a706:	f7f5 fd6d 	bl	80001e4 <__adddf3>
 800a70a:	4622      	mov	r2, r4
 800a70c:	462b      	mov	r3, r5
 800a70e:	f7f5 ff1f 	bl	8000550 <__aeabi_dmul>
 800a712:	4622      	mov	r2, r4
 800a714:	462b      	mov	r3, r5
 800a716:	f7f5 ff1b 	bl	8000550 <__aeabi_dmul>
 800a71a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a71e:	4604      	mov	r4, r0
 800a720:	460d      	mov	r5, r1
 800a722:	4630      	mov	r0, r6
 800a724:	4639      	mov	r1, r7
 800a726:	f7f5 ff13 	bl	8000550 <__aeabi_dmul>
 800a72a:	460b      	mov	r3, r1
 800a72c:	4602      	mov	r2, r0
 800a72e:	4629      	mov	r1, r5
 800a730:	4620      	mov	r0, r4
 800a732:	f7f5 fd55 	bl	80001e0 <__aeabi_dsub>
 800a736:	4b2b      	ldr	r3, [pc, #172]	; (800a7e4 <__kernel_cos+0x17c>)
 800a738:	4598      	cmp	r8, r3
 800a73a:	4606      	mov	r6, r0
 800a73c:	460f      	mov	r7, r1
 800a73e:	dc10      	bgt.n	800a762 <__kernel_cos+0xfa>
 800a740:	4602      	mov	r2, r0
 800a742:	460b      	mov	r3, r1
 800a744:	4650      	mov	r0, sl
 800a746:	4659      	mov	r1, fp
 800a748:	f7f5 fd4a 	bl	80001e0 <__aeabi_dsub>
 800a74c:	460b      	mov	r3, r1
 800a74e:	4926      	ldr	r1, [pc, #152]	; (800a7e8 <__kernel_cos+0x180>)
 800a750:	4602      	mov	r2, r0
 800a752:	2000      	movs	r0, #0
 800a754:	f7f5 fd44 	bl	80001e0 <__aeabi_dsub>
 800a758:	ec41 0b10 	vmov	d0, r0, r1
 800a75c:	b003      	add	sp, #12
 800a75e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a762:	4b22      	ldr	r3, [pc, #136]	; (800a7ec <__kernel_cos+0x184>)
 800a764:	4920      	ldr	r1, [pc, #128]	; (800a7e8 <__kernel_cos+0x180>)
 800a766:	4598      	cmp	r8, r3
 800a768:	bfcc      	ite	gt
 800a76a:	4d21      	ldrgt	r5, [pc, #132]	; (800a7f0 <__kernel_cos+0x188>)
 800a76c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800a770:	2400      	movs	r4, #0
 800a772:	4622      	mov	r2, r4
 800a774:	462b      	mov	r3, r5
 800a776:	2000      	movs	r0, #0
 800a778:	f7f5 fd32 	bl	80001e0 <__aeabi_dsub>
 800a77c:	4622      	mov	r2, r4
 800a77e:	4680      	mov	r8, r0
 800a780:	4689      	mov	r9, r1
 800a782:	462b      	mov	r3, r5
 800a784:	4650      	mov	r0, sl
 800a786:	4659      	mov	r1, fp
 800a788:	f7f5 fd2a 	bl	80001e0 <__aeabi_dsub>
 800a78c:	4632      	mov	r2, r6
 800a78e:	463b      	mov	r3, r7
 800a790:	f7f5 fd26 	bl	80001e0 <__aeabi_dsub>
 800a794:	4602      	mov	r2, r0
 800a796:	460b      	mov	r3, r1
 800a798:	4640      	mov	r0, r8
 800a79a:	4649      	mov	r1, r9
 800a79c:	e7da      	b.n	800a754 <__kernel_cos+0xec>
 800a79e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800a7d8 <__kernel_cos+0x170>
 800a7a2:	e7db      	b.n	800a75c <__kernel_cos+0xf4>
 800a7a4:	f3af 8000 	nop.w
 800a7a8:	be8838d4 	.word	0xbe8838d4
 800a7ac:	bda8fae9 	.word	0xbda8fae9
 800a7b0:	bdb4b1c4 	.word	0xbdb4b1c4
 800a7b4:	3e21ee9e 	.word	0x3e21ee9e
 800a7b8:	809c52ad 	.word	0x809c52ad
 800a7bc:	3e927e4f 	.word	0x3e927e4f
 800a7c0:	19cb1590 	.word	0x19cb1590
 800a7c4:	3efa01a0 	.word	0x3efa01a0
 800a7c8:	16c15177 	.word	0x16c15177
 800a7cc:	3f56c16c 	.word	0x3f56c16c
 800a7d0:	5555554c 	.word	0x5555554c
 800a7d4:	3fa55555 	.word	0x3fa55555
 800a7d8:	00000000 	.word	0x00000000
 800a7dc:	3ff00000 	.word	0x3ff00000
 800a7e0:	3fe00000 	.word	0x3fe00000
 800a7e4:	3fd33332 	.word	0x3fd33332
 800a7e8:	3ff00000 	.word	0x3ff00000
 800a7ec:	3fe90000 	.word	0x3fe90000
 800a7f0:	3fd20000 	.word	0x3fd20000
 800a7f4:	00000000 	.word	0x00000000

0800a7f8 <__kernel_rem_pio2>:
 800a7f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7fc:	ed2d 8b02 	vpush	{d8}
 800a800:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800a804:	f112 0f14 	cmn.w	r2, #20
 800a808:	9308      	str	r3, [sp, #32]
 800a80a:	9101      	str	r1, [sp, #4]
 800a80c:	4bc4      	ldr	r3, [pc, #784]	; (800ab20 <__kernel_rem_pio2+0x328>)
 800a80e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800a810:	900b      	str	r0, [sp, #44]	; 0x2c
 800a812:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a816:	9302      	str	r3, [sp, #8]
 800a818:	9b08      	ldr	r3, [sp, #32]
 800a81a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800a81e:	bfa8      	it	ge
 800a820:	1ed4      	subge	r4, r2, #3
 800a822:	9306      	str	r3, [sp, #24]
 800a824:	bfb2      	itee	lt
 800a826:	2400      	movlt	r4, #0
 800a828:	2318      	movge	r3, #24
 800a82a:	fb94 f4f3 	sdivge	r4, r4, r3
 800a82e:	f06f 0317 	mvn.w	r3, #23
 800a832:	fb04 3303 	mla	r3, r4, r3, r3
 800a836:	eb03 0a02 	add.w	sl, r3, r2
 800a83a:	9b02      	ldr	r3, [sp, #8]
 800a83c:	9a06      	ldr	r2, [sp, #24]
 800a83e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800ab10 <__kernel_rem_pio2+0x318>
 800a842:	eb03 0802 	add.w	r8, r3, r2
 800a846:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800a848:	1aa7      	subs	r7, r4, r2
 800a84a:	ae22      	add	r6, sp, #136	; 0x88
 800a84c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800a850:	2500      	movs	r5, #0
 800a852:	4545      	cmp	r5, r8
 800a854:	dd13      	ble.n	800a87e <__kernel_rem_pio2+0x86>
 800a856:	9b08      	ldr	r3, [sp, #32]
 800a858:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800ab10 <__kernel_rem_pio2+0x318>
 800a85c:	aa22      	add	r2, sp, #136	; 0x88
 800a85e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800a862:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800a866:	f04f 0800 	mov.w	r8, #0
 800a86a:	9b02      	ldr	r3, [sp, #8]
 800a86c:	4598      	cmp	r8, r3
 800a86e:	dc2f      	bgt.n	800a8d0 <__kernel_rem_pio2+0xd8>
 800a870:	ed8d 8b04 	vstr	d8, [sp, #16]
 800a874:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800a878:	462f      	mov	r7, r5
 800a87a:	2600      	movs	r6, #0
 800a87c:	e01b      	b.n	800a8b6 <__kernel_rem_pio2+0xbe>
 800a87e:	42ef      	cmn	r7, r5
 800a880:	d407      	bmi.n	800a892 <__kernel_rem_pio2+0x9a>
 800a882:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800a886:	f7f5 fdf9 	bl	800047c <__aeabi_i2d>
 800a88a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a88e:	3501      	adds	r5, #1
 800a890:	e7df      	b.n	800a852 <__kernel_rem_pio2+0x5a>
 800a892:	ec51 0b18 	vmov	r0, r1, d8
 800a896:	e7f8      	b.n	800a88a <__kernel_rem_pio2+0x92>
 800a898:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a89c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800a8a0:	f7f5 fe56 	bl	8000550 <__aeabi_dmul>
 800a8a4:	4602      	mov	r2, r0
 800a8a6:	460b      	mov	r3, r1
 800a8a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a8ac:	f7f5 fc9a 	bl	80001e4 <__adddf3>
 800a8b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a8b4:	3601      	adds	r6, #1
 800a8b6:	9b06      	ldr	r3, [sp, #24]
 800a8b8:	429e      	cmp	r6, r3
 800a8ba:	f1a7 0708 	sub.w	r7, r7, #8
 800a8be:	ddeb      	ble.n	800a898 <__kernel_rem_pio2+0xa0>
 800a8c0:	ed9d 7b04 	vldr	d7, [sp, #16]
 800a8c4:	f108 0801 	add.w	r8, r8, #1
 800a8c8:	ecab 7b02 	vstmia	fp!, {d7}
 800a8cc:	3508      	adds	r5, #8
 800a8ce:	e7cc      	b.n	800a86a <__kernel_rem_pio2+0x72>
 800a8d0:	9b02      	ldr	r3, [sp, #8]
 800a8d2:	aa0e      	add	r2, sp, #56	; 0x38
 800a8d4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a8d8:	930d      	str	r3, [sp, #52]	; 0x34
 800a8da:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800a8dc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a8e0:	9c02      	ldr	r4, [sp, #8]
 800a8e2:	930c      	str	r3, [sp, #48]	; 0x30
 800a8e4:	00e3      	lsls	r3, r4, #3
 800a8e6:	930a      	str	r3, [sp, #40]	; 0x28
 800a8e8:	ab9a      	add	r3, sp, #616	; 0x268
 800a8ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a8ee:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800a8f2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800a8f6:	ab72      	add	r3, sp, #456	; 0x1c8
 800a8f8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800a8fc:	46c3      	mov	fp, r8
 800a8fe:	46a1      	mov	r9, r4
 800a900:	f1b9 0f00 	cmp.w	r9, #0
 800a904:	f1a5 0508 	sub.w	r5, r5, #8
 800a908:	dc77      	bgt.n	800a9fa <__kernel_rem_pio2+0x202>
 800a90a:	ec47 6b10 	vmov	d0, r6, r7
 800a90e:	4650      	mov	r0, sl
 800a910:	f000 ff2a 	bl	800b768 <scalbn>
 800a914:	ec57 6b10 	vmov	r6, r7, d0
 800a918:	2200      	movs	r2, #0
 800a91a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800a91e:	ee10 0a10 	vmov	r0, s0
 800a922:	4639      	mov	r1, r7
 800a924:	f7f5 fe14 	bl	8000550 <__aeabi_dmul>
 800a928:	ec41 0b10 	vmov	d0, r0, r1
 800a92c:	f000 fe9c 	bl	800b668 <floor>
 800a930:	4b7c      	ldr	r3, [pc, #496]	; (800ab24 <__kernel_rem_pio2+0x32c>)
 800a932:	ec51 0b10 	vmov	r0, r1, d0
 800a936:	2200      	movs	r2, #0
 800a938:	f7f5 fe0a 	bl	8000550 <__aeabi_dmul>
 800a93c:	4602      	mov	r2, r0
 800a93e:	460b      	mov	r3, r1
 800a940:	4630      	mov	r0, r6
 800a942:	4639      	mov	r1, r7
 800a944:	f7f5 fc4c 	bl	80001e0 <__aeabi_dsub>
 800a948:	460f      	mov	r7, r1
 800a94a:	4606      	mov	r6, r0
 800a94c:	f7f6 f89a 	bl	8000a84 <__aeabi_d2iz>
 800a950:	9004      	str	r0, [sp, #16]
 800a952:	f7f5 fd93 	bl	800047c <__aeabi_i2d>
 800a956:	4602      	mov	r2, r0
 800a958:	460b      	mov	r3, r1
 800a95a:	4630      	mov	r0, r6
 800a95c:	4639      	mov	r1, r7
 800a95e:	f7f5 fc3f 	bl	80001e0 <__aeabi_dsub>
 800a962:	f1ba 0f00 	cmp.w	sl, #0
 800a966:	4606      	mov	r6, r0
 800a968:	460f      	mov	r7, r1
 800a96a:	dd6d      	ble.n	800aa48 <__kernel_rem_pio2+0x250>
 800a96c:	1e62      	subs	r2, r4, #1
 800a96e:	ab0e      	add	r3, sp, #56	; 0x38
 800a970:	9d04      	ldr	r5, [sp, #16]
 800a972:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800a976:	f1ca 0118 	rsb	r1, sl, #24
 800a97a:	fa40 f301 	asr.w	r3, r0, r1
 800a97e:	441d      	add	r5, r3
 800a980:	408b      	lsls	r3, r1
 800a982:	1ac0      	subs	r0, r0, r3
 800a984:	ab0e      	add	r3, sp, #56	; 0x38
 800a986:	9504      	str	r5, [sp, #16]
 800a988:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800a98c:	f1ca 0317 	rsb	r3, sl, #23
 800a990:	fa40 fb03 	asr.w	fp, r0, r3
 800a994:	f1bb 0f00 	cmp.w	fp, #0
 800a998:	dd65      	ble.n	800aa66 <__kernel_rem_pio2+0x26e>
 800a99a:	9b04      	ldr	r3, [sp, #16]
 800a99c:	2200      	movs	r2, #0
 800a99e:	3301      	adds	r3, #1
 800a9a0:	9304      	str	r3, [sp, #16]
 800a9a2:	4615      	mov	r5, r2
 800a9a4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800a9a8:	4294      	cmp	r4, r2
 800a9aa:	f300 809c 	bgt.w	800aae6 <__kernel_rem_pio2+0x2ee>
 800a9ae:	f1ba 0f00 	cmp.w	sl, #0
 800a9b2:	dd07      	ble.n	800a9c4 <__kernel_rem_pio2+0x1cc>
 800a9b4:	f1ba 0f01 	cmp.w	sl, #1
 800a9b8:	f000 80c0 	beq.w	800ab3c <__kernel_rem_pio2+0x344>
 800a9bc:	f1ba 0f02 	cmp.w	sl, #2
 800a9c0:	f000 80c6 	beq.w	800ab50 <__kernel_rem_pio2+0x358>
 800a9c4:	f1bb 0f02 	cmp.w	fp, #2
 800a9c8:	d14d      	bne.n	800aa66 <__kernel_rem_pio2+0x26e>
 800a9ca:	4632      	mov	r2, r6
 800a9cc:	463b      	mov	r3, r7
 800a9ce:	4956      	ldr	r1, [pc, #344]	; (800ab28 <__kernel_rem_pio2+0x330>)
 800a9d0:	2000      	movs	r0, #0
 800a9d2:	f7f5 fc05 	bl	80001e0 <__aeabi_dsub>
 800a9d6:	4606      	mov	r6, r0
 800a9d8:	460f      	mov	r7, r1
 800a9da:	2d00      	cmp	r5, #0
 800a9dc:	d043      	beq.n	800aa66 <__kernel_rem_pio2+0x26e>
 800a9de:	4650      	mov	r0, sl
 800a9e0:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800ab18 <__kernel_rem_pio2+0x320>
 800a9e4:	f000 fec0 	bl	800b768 <scalbn>
 800a9e8:	4630      	mov	r0, r6
 800a9ea:	4639      	mov	r1, r7
 800a9ec:	ec53 2b10 	vmov	r2, r3, d0
 800a9f0:	f7f5 fbf6 	bl	80001e0 <__aeabi_dsub>
 800a9f4:	4606      	mov	r6, r0
 800a9f6:	460f      	mov	r7, r1
 800a9f8:	e035      	b.n	800aa66 <__kernel_rem_pio2+0x26e>
 800a9fa:	4b4c      	ldr	r3, [pc, #304]	; (800ab2c <__kernel_rem_pio2+0x334>)
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	4630      	mov	r0, r6
 800aa00:	4639      	mov	r1, r7
 800aa02:	f7f5 fda5 	bl	8000550 <__aeabi_dmul>
 800aa06:	f7f6 f83d 	bl	8000a84 <__aeabi_d2iz>
 800aa0a:	f7f5 fd37 	bl	800047c <__aeabi_i2d>
 800aa0e:	4602      	mov	r2, r0
 800aa10:	460b      	mov	r3, r1
 800aa12:	ec43 2b18 	vmov	d8, r2, r3
 800aa16:	4b46      	ldr	r3, [pc, #280]	; (800ab30 <__kernel_rem_pio2+0x338>)
 800aa18:	2200      	movs	r2, #0
 800aa1a:	f7f5 fd99 	bl	8000550 <__aeabi_dmul>
 800aa1e:	4602      	mov	r2, r0
 800aa20:	460b      	mov	r3, r1
 800aa22:	4630      	mov	r0, r6
 800aa24:	4639      	mov	r1, r7
 800aa26:	f7f5 fbdb 	bl	80001e0 <__aeabi_dsub>
 800aa2a:	f7f6 f82b 	bl	8000a84 <__aeabi_d2iz>
 800aa2e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800aa32:	f84b 0b04 	str.w	r0, [fp], #4
 800aa36:	ec51 0b18 	vmov	r0, r1, d8
 800aa3a:	f7f5 fbd3 	bl	80001e4 <__adddf3>
 800aa3e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800aa42:	4606      	mov	r6, r0
 800aa44:	460f      	mov	r7, r1
 800aa46:	e75b      	b.n	800a900 <__kernel_rem_pio2+0x108>
 800aa48:	d106      	bne.n	800aa58 <__kernel_rem_pio2+0x260>
 800aa4a:	1e63      	subs	r3, r4, #1
 800aa4c:	aa0e      	add	r2, sp, #56	; 0x38
 800aa4e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800aa52:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800aa56:	e79d      	b.n	800a994 <__kernel_rem_pio2+0x19c>
 800aa58:	4b36      	ldr	r3, [pc, #216]	; (800ab34 <__kernel_rem_pio2+0x33c>)
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	f7f5 fffe 	bl	8000a5c <__aeabi_dcmpge>
 800aa60:	2800      	cmp	r0, #0
 800aa62:	d13d      	bne.n	800aae0 <__kernel_rem_pio2+0x2e8>
 800aa64:	4683      	mov	fp, r0
 800aa66:	2200      	movs	r2, #0
 800aa68:	2300      	movs	r3, #0
 800aa6a:	4630      	mov	r0, r6
 800aa6c:	4639      	mov	r1, r7
 800aa6e:	f7f5 ffd7 	bl	8000a20 <__aeabi_dcmpeq>
 800aa72:	2800      	cmp	r0, #0
 800aa74:	f000 80c0 	beq.w	800abf8 <__kernel_rem_pio2+0x400>
 800aa78:	1e65      	subs	r5, r4, #1
 800aa7a:	462b      	mov	r3, r5
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	9902      	ldr	r1, [sp, #8]
 800aa80:	428b      	cmp	r3, r1
 800aa82:	da6c      	bge.n	800ab5e <__kernel_rem_pio2+0x366>
 800aa84:	2a00      	cmp	r2, #0
 800aa86:	f000 8089 	beq.w	800ab9c <__kernel_rem_pio2+0x3a4>
 800aa8a:	ab0e      	add	r3, sp, #56	; 0x38
 800aa8c:	f1aa 0a18 	sub.w	sl, sl, #24
 800aa90:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	f000 80ad 	beq.w	800abf4 <__kernel_rem_pio2+0x3fc>
 800aa9a:	4650      	mov	r0, sl
 800aa9c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800ab18 <__kernel_rem_pio2+0x320>
 800aaa0:	f000 fe62 	bl	800b768 <scalbn>
 800aaa4:	ab9a      	add	r3, sp, #616	; 0x268
 800aaa6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800aaaa:	ec57 6b10 	vmov	r6, r7, d0
 800aaae:	00ec      	lsls	r4, r5, #3
 800aab0:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800aab4:	46aa      	mov	sl, r5
 800aab6:	f1ba 0f00 	cmp.w	sl, #0
 800aaba:	f280 80d6 	bge.w	800ac6a <__kernel_rem_pio2+0x472>
 800aabe:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800ab10 <__kernel_rem_pio2+0x318>
 800aac2:	462e      	mov	r6, r5
 800aac4:	2e00      	cmp	r6, #0
 800aac6:	f2c0 8104 	blt.w	800acd2 <__kernel_rem_pio2+0x4da>
 800aaca:	ab72      	add	r3, sp, #456	; 0x1c8
 800aacc:	ed8d 8b06 	vstr	d8, [sp, #24]
 800aad0:	f8df a064 	ldr.w	sl, [pc, #100]	; 800ab38 <__kernel_rem_pio2+0x340>
 800aad4:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800aad8:	f04f 0800 	mov.w	r8, #0
 800aadc:	1baf      	subs	r7, r5, r6
 800aade:	e0ea      	b.n	800acb6 <__kernel_rem_pio2+0x4be>
 800aae0:	f04f 0b02 	mov.w	fp, #2
 800aae4:	e759      	b.n	800a99a <__kernel_rem_pio2+0x1a2>
 800aae6:	f8d8 3000 	ldr.w	r3, [r8]
 800aaea:	b955      	cbnz	r5, 800ab02 <__kernel_rem_pio2+0x30a>
 800aaec:	b123      	cbz	r3, 800aaf8 <__kernel_rem_pio2+0x300>
 800aaee:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800aaf2:	f8c8 3000 	str.w	r3, [r8]
 800aaf6:	2301      	movs	r3, #1
 800aaf8:	3201      	adds	r2, #1
 800aafa:	f108 0804 	add.w	r8, r8, #4
 800aafe:	461d      	mov	r5, r3
 800ab00:	e752      	b.n	800a9a8 <__kernel_rem_pio2+0x1b0>
 800ab02:	1acb      	subs	r3, r1, r3
 800ab04:	f8c8 3000 	str.w	r3, [r8]
 800ab08:	462b      	mov	r3, r5
 800ab0a:	e7f5      	b.n	800aaf8 <__kernel_rem_pio2+0x300>
 800ab0c:	f3af 8000 	nop.w
	...
 800ab1c:	3ff00000 	.word	0x3ff00000
 800ab20:	0800c868 	.word	0x0800c868
 800ab24:	40200000 	.word	0x40200000
 800ab28:	3ff00000 	.word	0x3ff00000
 800ab2c:	3e700000 	.word	0x3e700000
 800ab30:	41700000 	.word	0x41700000
 800ab34:	3fe00000 	.word	0x3fe00000
 800ab38:	0800c828 	.word	0x0800c828
 800ab3c:	1e62      	subs	r2, r4, #1
 800ab3e:	ab0e      	add	r3, sp, #56	; 0x38
 800ab40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab44:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800ab48:	a90e      	add	r1, sp, #56	; 0x38
 800ab4a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800ab4e:	e739      	b.n	800a9c4 <__kernel_rem_pio2+0x1cc>
 800ab50:	1e62      	subs	r2, r4, #1
 800ab52:	ab0e      	add	r3, sp, #56	; 0x38
 800ab54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab58:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ab5c:	e7f4      	b.n	800ab48 <__kernel_rem_pio2+0x350>
 800ab5e:	a90e      	add	r1, sp, #56	; 0x38
 800ab60:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800ab64:	3b01      	subs	r3, #1
 800ab66:	430a      	orrs	r2, r1
 800ab68:	e789      	b.n	800aa7e <__kernel_rem_pio2+0x286>
 800ab6a:	3301      	adds	r3, #1
 800ab6c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800ab70:	2900      	cmp	r1, #0
 800ab72:	d0fa      	beq.n	800ab6a <__kernel_rem_pio2+0x372>
 800ab74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ab76:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800ab7a:	446a      	add	r2, sp
 800ab7c:	3a98      	subs	r2, #152	; 0x98
 800ab7e:	920a      	str	r2, [sp, #40]	; 0x28
 800ab80:	9a08      	ldr	r2, [sp, #32]
 800ab82:	18e3      	adds	r3, r4, r3
 800ab84:	18a5      	adds	r5, r4, r2
 800ab86:	aa22      	add	r2, sp, #136	; 0x88
 800ab88:	f104 0801 	add.w	r8, r4, #1
 800ab8c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800ab90:	9304      	str	r3, [sp, #16]
 800ab92:	9b04      	ldr	r3, [sp, #16]
 800ab94:	4543      	cmp	r3, r8
 800ab96:	da04      	bge.n	800aba2 <__kernel_rem_pio2+0x3aa>
 800ab98:	461c      	mov	r4, r3
 800ab9a:	e6a3      	b.n	800a8e4 <__kernel_rem_pio2+0xec>
 800ab9c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ab9e:	2301      	movs	r3, #1
 800aba0:	e7e4      	b.n	800ab6c <__kernel_rem_pio2+0x374>
 800aba2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aba4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800aba8:	f7f5 fc68 	bl	800047c <__aeabi_i2d>
 800abac:	e8e5 0102 	strd	r0, r1, [r5], #8
 800abb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800abb2:	46ab      	mov	fp, r5
 800abb4:	461c      	mov	r4, r3
 800abb6:	f04f 0900 	mov.w	r9, #0
 800abba:	2600      	movs	r6, #0
 800abbc:	2700      	movs	r7, #0
 800abbe:	9b06      	ldr	r3, [sp, #24]
 800abc0:	4599      	cmp	r9, r3
 800abc2:	dd06      	ble.n	800abd2 <__kernel_rem_pio2+0x3da>
 800abc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abc6:	e8e3 6702 	strd	r6, r7, [r3], #8
 800abca:	f108 0801 	add.w	r8, r8, #1
 800abce:	930a      	str	r3, [sp, #40]	; 0x28
 800abd0:	e7df      	b.n	800ab92 <__kernel_rem_pio2+0x39a>
 800abd2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800abd6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800abda:	f7f5 fcb9 	bl	8000550 <__aeabi_dmul>
 800abde:	4602      	mov	r2, r0
 800abe0:	460b      	mov	r3, r1
 800abe2:	4630      	mov	r0, r6
 800abe4:	4639      	mov	r1, r7
 800abe6:	f7f5 fafd 	bl	80001e4 <__adddf3>
 800abea:	f109 0901 	add.w	r9, r9, #1
 800abee:	4606      	mov	r6, r0
 800abf0:	460f      	mov	r7, r1
 800abf2:	e7e4      	b.n	800abbe <__kernel_rem_pio2+0x3c6>
 800abf4:	3d01      	subs	r5, #1
 800abf6:	e748      	b.n	800aa8a <__kernel_rem_pio2+0x292>
 800abf8:	ec47 6b10 	vmov	d0, r6, r7
 800abfc:	f1ca 0000 	rsb	r0, sl, #0
 800ac00:	f000 fdb2 	bl	800b768 <scalbn>
 800ac04:	ec57 6b10 	vmov	r6, r7, d0
 800ac08:	4ba0      	ldr	r3, [pc, #640]	; (800ae8c <__kernel_rem_pio2+0x694>)
 800ac0a:	ee10 0a10 	vmov	r0, s0
 800ac0e:	2200      	movs	r2, #0
 800ac10:	4639      	mov	r1, r7
 800ac12:	f7f5 ff23 	bl	8000a5c <__aeabi_dcmpge>
 800ac16:	b1f8      	cbz	r0, 800ac58 <__kernel_rem_pio2+0x460>
 800ac18:	4b9d      	ldr	r3, [pc, #628]	; (800ae90 <__kernel_rem_pio2+0x698>)
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	4630      	mov	r0, r6
 800ac1e:	4639      	mov	r1, r7
 800ac20:	f7f5 fc96 	bl	8000550 <__aeabi_dmul>
 800ac24:	f7f5 ff2e 	bl	8000a84 <__aeabi_d2iz>
 800ac28:	4680      	mov	r8, r0
 800ac2a:	f7f5 fc27 	bl	800047c <__aeabi_i2d>
 800ac2e:	4b97      	ldr	r3, [pc, #604]	; (800ae8c <__kernel_rem_pio2+0x694>)
 800ac30:	2200      	movs	r2, #0
 800ac32:	f7f5 fc8d 	bl	8000550 <__aeabi_dmul>
 800ac36:	460b      	mov	r3, r1
 800ac38:	4602      	mov	r2, r0
 800ac3a:	4639      	mov	r1, r7
 800ac3c:	4630      	mov	r0, r6
 800ac3e:	f7f5 facf 	bl	80001e0 <__aeabi_dsub>
 800ac42:	f7f5 ff1f 	bl	8000a84 <__aeabi_d2iz>
 800ac46:	1c65      	adds	r5, r4, #1
 800ac48:	ab0e      	add	r3, sp, #56	; 0x38
 800ac4a:	f10a 0a18 	add.w	sl, sl, #24
 800ac4e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ac52:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800ac56:	e720      	b.n	800aa9a <__kernel_rem_pio2+0x2a2>
 800ac58:	4630      	mov	r0, r6
 800ac5a:	4639      	mov	r1, r7
 800ac5c:	f7f5 ff12 	bl	8000a84 <__aeabi_d2iz>
 800ac60:	ab0e      	add	r3, sp, #56	; 0x38
 800ac62:	4625      	mov	r5, r4
 800ac64:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ac68:	e717      	b.n	800aa9a <__kernel_rem_pio2+0x2a2>
 800ac6a:	ab0e      	add	r3, sp, #56	; 0x38
 800ac6c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800ac70:	f7f5 fc04 	bl	800047c <__aeabi_i2d>
 800ac74:	4632      	mov	r2, r6
 800ac76:	463b      	mov	r3, r7
 800ac78:	f7f5 fc6a 	bl	8000550 <__aeabi_dmul>
 800ac7c:	4b84      	ldr	r3, [pc, #528]	; (800ae90 <__kernel_rem_pio2+0x698>)
 800ac7e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800ac82:	2200      	movs	r2, #0
 800ac84:	4630      	mov	r0, r6
 800ac86:	4639      	mov	r1, r7
 800ac88:	f7f5 fc62 	bl	8000550 <__aeabi_dmul>
 800ac8c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800ac90:	4606      	mov	r6, r0
 800ac92:	460f      	mov	r7, r1
 800ac94:	e70f      	b.n	800aab6 <__kernel_rem_pio2+0x2be>
 800ac96:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800ac9a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800ac9e:	f7f5 fc57 	bl	8000550 <__aeabi_dmul>
 800aca2:	4602      	mov	r2, r0
 800aca4:	460b      	mov	r3, r1
 800aca6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800acaa:	f7f5 fa9b 	bl	80001e4 <__adddf3>
 800acae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800acb2:	f108 0801 	add.w	r8, r8, #1
 800acb6:	9b02      	ldr	r3, [sp, #8]
 800acb8:	4598      	cmp	r8, r3
 800acba:	dc01      	bgt.n	800acc0 <__kernel_rem_pio2+0x4c8>
 800acbc:	45b8      	cmp	r8, r7
 800acbe:	ddea      	ble.n	800ac96 <__kernel_rem_pio2+0x49e>
 800acc0:	ed9d 7b06 	vldr	d7, [sp, #24]
 800acc4:	ab4a      	add	r3, sp, #296	; 0x128
 800acc6:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800acca:	ed87 7b00 	vstr	d7, [r7]
 800acce:	3e01      	subs	r6, #1
 800acd0:	e6f8      	b.n	800aac4 <__kernel_rem_pio2+0x2cc>
 800acd2:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800acd4:	2b02      	cmp	r3, #2
 800acd6:	dc0b      	bgt.n	800acf0 <__kernel_rem_pio2+0x4f8>
 800acd8:	2b00      	cmp	r3, #0
 800acda:	dc35      	bgt.n	800ad48 <__kernel_rem_pio2+0x550>
 800acdc:	d059      	beq.n	800ad92 <__kernel_rem_pio2+0x59a>
 800acde:	9b04      	ldr	r3, [sp, #16]
 800ace0:	f003 0007 	and.w	r0, r3, #7
 800ace4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800ace8:	ecbd 8b02 	vpop	{d8}
 800acec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acf0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800acf2:	2b03      	cmp	r3, #3
 800acf4:	d1f3      	bne.n	800acde <__kernel_rem_pio2+0x4e6>
 800acf6:	ab4a      	add	r3, sp, #296	; 0x128
 800acf8:	4423      	add	r3, r4
 800acfa:	9306      	str	r3, [sp, #24]
 800acfc:	461c      	mov	r4, r3
 800acfe:	469a      	mov	sl, r3
 800ad00:	9502      	str	r5, [sp, #8]
 800ad02:	9b02      	ldr	r3, [sp, #8]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	f1aa 0a08 	sub.w	sl, sl, #8
 800ad0a:	dc6b      	bgt.n	800ade4 <__kernel_rem_pio2+0x5ec>
 800ad0c:	46aa      	mov	sl, r5
 800ad0e:	f1ba 0f01 	cmp.w	sl, #1
 800ad12:	f1a4 0408 	sub.w	r4, r4, #8
 800ad16:	f300 8085 	bgt.w	800ae24 <__kernel_rem_pio2+0x62c>
 800ad1a:	9c06      	ldr	r4, [sp, #24]
 800ad1c:	2000      	movs	r0, #0
 800ad1e:	3408      	adds	r4, #8
 800ad20:	2100      	movs	r1, #0
 800ad22:	2d01      	cmp	r5, #1
 800ad24:	f300 809d 	bgt.w	800ae62 <__kernel_rem_pio2+0x66a>
 800ad28:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800ad2c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800ad30:	f1bb 0f00 	cmp.w	fp, #0
 800ad34:	f040 809b 	bne.w	800ae6e <__kernel_rem_pio2+0x676>
 800ad38:	9b01      	ldr	r3, [sp, #4]
 800ad3a:	e9c3 5600 	strd	r5, r6, [r3]
 800ad3e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800ad42:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800ad46:	e7ca      	b.n	800acde <__kernel_rem_pio2+0x4e6>
 800ad48:	3408      	adds	r4, #8
 800ad4a:	ab4a      	add	r3, sp, #296	; 0x128
 800ad4c:	441c      	add	r4, r3
 800ad4e:	462e      	mov	r6, r5
 800ad50:	2000      	movs	r0, #0
 800ad52:	2100      	movs	r1, #0
 800ad54:	2e00      	cmp	r6, #0
 800ad56:	da36      	bge.n	800adc6 <__kernel_rem_pio2+0x5ce>
 800ad58:	f1bb 0f00 	cmp.w	fp, #0
 800ad5c:	d039      	beq.n	800add2 <__kernel_rem_pio2+0x5da>
 800ad5e:	4602      	mov	r2, r0
 800ad60:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ad64:	9c01      	ldr	r4, [sp, #4]
 800ad66:	e9c4 2300 	strd	r2, r3, [r4]
 800ad6a:	4602      	mov	r2, r0
 800ad6c:	460b      	mov	r3, r1
 800ad6e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800ad72:	f7f5 fa35 	bl	80001e0 <__aeabi_dsub>
 800ad76:	ae4c      	add	r6, sp, #304	; 0x130
 800ad78:	2401      	movs	r4, #1
 800ad7a:	42a5      	cmp	r5, r4
 800ad7c:	da2c      	bge.n	800add8 <__kernel_rem_pio2+0x5e0>
 800ad7e:	f1bb 0f00 	cmp.w	fp, #0
 800ad82:	d002      	beq.n	800ad8a <__kernel_rem_pio2+0x592>
 800ad84:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ad88:	4619      	mov	r1, r3
 800ad8a:	9b01      	ldr	r3, [sp, #4]
 800ad8c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800ad90:	e7a5      	b.n	800acde <__kernel_rem_pio2+0x4e6>
 800ad92:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800ad96:	eb0d 0403 	add.w	r4, sp, r3
 800ad9a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800ad9e:	2000      	movs	r0, #0
 800ada0:	2100      	movs	r1, #0
 800ada2:	2d00      	cmp	r5, #0
 800ada4:	da09      	bge.n	800adba <__kernel_rem_pio2+0x5c2>
 800ada6:	f1bb 0f00 	cmp.w	fp, #0
 800adaa:	d002      	beq.n	800adb2 <__kernel_rem_pio2+0x5ba>
 800adac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800adb0:	4619      	mov	r1, r3
 800adb2:	9b01      	ldr	r3, [sp, #4]
 800adb4:	e9c3 0100 	strd	r0, r1, [r3]
 800adb8:	e791      	b.n	800acde <__kernel_rem_pio2+0x4e6>
 800adba:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800adbe:	f7f5 fa11 	bl	80001e4 <__adddf3>
 800adc2:	3d01      	subs	r5, #1
 800adc4:	e7ed      	b.n	800ada2 <__kernel_rem_pio2+0x5aa>
 800adc6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800adca:	f7f5 fa0b 	bl	80001e4 <__adddf3>
 800adce:	3e01      	subs	r6, #1
 800add0:	e7c0      	b.n	800ad54 <__kernel_rem_pio2+0x55c>
 800add2:	4602      	mov	r2, r0
 800add4:	460b      	mov	r3, r1
 800add6:	e7c5      	b.n	800ad64 <__kernel_rem_pio2+0x56c>
 800add8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800addc:	f7f5 fa02 	bl	80001e4 <__adddf3>
 800ade0:	3401      	adds	r4, #1
 800ade2:	e7ca      	b.n	800ad7a <__kernel_rem_pio2+0x582>
 800ade4:	e9da 8900 	ldrd	r8, r9, [sl]
 800ade8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800adec:	9b02      	ldr	r3, [sp, #8]
 800adee:	3b01      	subs	r3, #1
 800adf0:	9302      	str	r3, [sp, #8]
 800adf2:	4632      	mov	r2, r6
 800adf4:	463b      	mov	r3, r7
 800adf6:	4640      	mov	r0, r8
 800adf8:	4649      	mov	r1, r9
 800adfa:	f7f5 f9f3 	bl	80001e4 <__adddf3>
 800adfe:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ae02:	4602      	mov	r2, r0
 800ae04:	460b      	mov	r3, r1
 800ae06:	4640      	mov	r0, r8
 800ae08:	4649      	mov	r1, r9
 800ae0a:	f7f5 f9e9 	bl	80001e0 <__aeabi_dsub>
 800ae0e:	4632      	mov	r2, r6
 800ae10:	463b      	mov	r3, r7
 800ae12:	f7f5 f9e7 	bl	80001e4 <__adddf3>
 800ae16:	ed9d 7b08 	vldr	d7, [sp, #32]
 800ae1a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ae1e:	ed8a 7b00 	vstr	d7, [sl]
 800ae22:	e76e      	b.n	800ad02 <__kernel_rem_pio2+0x50a>
 800ae24:	e9d4 8900 	ldrd	r8, r9, [r4]
 800ae28:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800ae2c:	4640      	mov	r0, r8
 800ae2e:	4632      	mov	r2, r6
 800ae30:	463b      	mov	r3, r7
 800ae32:	4649      	mov	r1, r9
 800ae34:	f7f5 f9d6 	bl	80001e4 <__adddf3>
 800ae38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ae3c:	4602      	mov	r2, r0
 800ae3e:	460b      	mov	r3, r1
 800ae40:	4640      	mov	r0, r8
 800ae42:	4649      	mov	r1, r9
 800ae44:	f7f5 f9cc 	bl	80001e0 <__aeabi_dsub>
 800ae48:	4632      	mov	r2, r6
 800ae4a:	463b      	mov	r3, r7
 800ae4c:	f7f5 f9ca 	bl	80001e4 <__adddf3>
 800ae50:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ae54:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ae58:	ed84 7b00 	vstr	d7, [r4]
 800ae5c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800ae60:	e755      	b.n	800ad0e <__kernel_rem_pio2+0x516>
 800ae62:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ae66:	f7f5 f9bd 	bl	80001e4 <__adddf3>
 800ae6a:	3d01      	subs	r5, #1
 800ae6c:	e759      	b.n	800ad22 <__kernel_rem_pio2+0x52a>
 800ae6e:	9b01      	ldr	r3, [sp, #4]
 800ae70:	9a01      	ldr	r2, [sp, #4]
 800ae72:	601d      	str	r5, [r3, #0]
 800ae74:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800ae78:	605c      	str	r4, [r3, #4]
 800ae7a:	609f      	str	r7, [r3, #8]
 800ae7c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800ae80:	60d3      	str	r3, [r2, #12]
 800ae82:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ae86:	6110      	str	r0, [r2, #16]
 800ae88:	6153      	str	r3, [r2, #20]
 800ae8a:	e728      	b.n	800acde <__kernel_rem_pio2+0x4e6>
 800ae8c:	41700000 	.word	0x41700000
 800ae90:	3e700000 	.word	0x3e700000
 800ae94:	00000000 	.word	0x00000000

0800ae98 <__kernel_sin>:
 800ae98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae9c:	ed2d 8b04 	vpush	{d8-d9}
 800aea0:	eeb0 8a41 	vmov.f32	s16, s2
 800aea4:	eef0 8a61 	vmov.f32	s17, s3
 800aea8:	ec55 4b10 	vmov	r4, r5, d0
 800aeac:	b083      	sub	sp, #12
 800aeae:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800aeb2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800aeb6:	9001      	str	r0, [sp, #4]
 800aeb8:	da06      	bge.n	800aec8 <__kernel_sin+0x30>
 800aeba:	ee10 0a10 	vmov	r0, s0
 800aebe:	4629      	mov	r1, r5
 800aec0:	f7f5 fde0 	bl	8000a84 <__aeabi_d2iz>
 800aec4:	2800      	cmp	r0, #0
 800aec6:	d051      	beq.n	800af6c <__kernel_sin+0xd4>
 800aec8:	4622      	mov	r2, r4
 800aeca:	462b      	mov	r3, r5
 800aecc:	4620      	mov	r0, r4
 800aece:	4629      	mov	r1, r5
 800aed0:	f7f5 fb3e 	bl	8000550 <__aeabi_dmul>
 800aed4:	4682      	mov	sl, r0
 800aed6:	468b      	mov	fp, r1
 800aed8:	4602      	mov	r2, r0
 800aeda:	460b      	mov	r3, r1
 800aedc:	4620      	mov	r0, r4
 800aede:	4629      	mov	r1, r5
 800aee0:	f7f5 fb36 	bl	8000550 <__aeabi_dmul>
 800aee4:	a341      	add	r3, pc, #260	; (adr r3, 800afec <__kernel_sin+0x154>)
 800aee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeea:	4680      	mov	r8, r0
 800aeec:	4689      	mov	r9, r1
 800aeee:	4650      	mov	r0, sl
 800aef0:	4659      	mov	r1, fp
 800aef2:	f7f5 fb2d 	bl	8000550 <__aeabi_dmul>
 800aef6:	a33f      	add	r3, pc, #252	; (adr r3, 800aff4 <__kernel_sin+0x15c>)
 800aef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aefc:	f7f5 f970 	bl	80001e0 <__aeabi_dsub>
 800af00:	4652      	mov	r2, sl
 800af02:	465b      	mov	r3, fp
 800af04:	f7f5 fb24 	bl	8000550 <__aeabi_dmul>
 800af08:	a33c      	add	r3, pc, #240	; (adr r3, 800affc <__kernel_sin+0x164>)
 800af0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af0e:	f7f5 f969 	bl	80001e4 <__adddf3>
 800af12:	4652      	mov	r2, sl
 800af14:	465b      	mov	r3, fp
 800af16:	f7f5 fb1b 	bl	8000550 <__aeabi_dmul>
 800af1a:	a33a      	add	r3, pc, #232	; (adr r3, 800b004 <__kernel_sin+0x16c>)
 800af1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af20:	f7f5 f95e 	bl	80001e0 <__aeabi_dsub>
 800af24:	4652      	mov	r2, sl
 800af26:	465b      	mov	r3, fp
 800af28:	f7f5 fb12 	bl	8000550 <__aeabi_dmul>
 800af2c:	a337      	add	r3, pc, #220	; (adr r3, 800b00c <__kernel_sin+0x174>)
 800af2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af32:	f7f5 f957 	bl	80001e4 <__adddf3>
 800af36:	9b01      	ldr	r3, [sp, #4]
 800af38:	4606      	mov	r6, r0
 800af3a:	460f      	mov	r7, r1
 800af3c:	b9eb      	cbnz	r3, 800af7a <__kernel_sin+0xe2>
 800af3e:	4602      	mov	r2, r0
 800af40:	460b      	mov	r3, r1
 800af42:	4650      	mov	r0, sl
 800af44:	4659      	mov	r1, fp
 800af46:	f7f5 fb03 	bl	8000550 <__aeabi_dmul>
 800af4a:	a325      	add	r3, pc, #148	; (adr r3, 800afe0 <__kernel_sin+0x148>)
 800af4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af50:	f7f5 f946 	bl	80001e0 <__aeabi_dsub>
 800af54:	4642      	mov	r2, r8
 800af56:	464b      	mov	r3, r9
 800af58:	f7f5 fafa 	bl	8000550 <__aeabi_dmul>
 800af5c:	4602      	mov	r2, r0
 800af5e:	460b      	mov	r3, r1
 800af60:	4620      	mov	r0, r4
 800af62:	4629      	mov	r1, r5
 800af64:	f7f5 f93e 	bl	80001e4 <__adddf3>
 800af68:	4604      	mov	r4, r0
 800af6a:	460d      	mov	r5, r1
 800af6c:	ec45 4b10 	vmov	d0, r4, r5
 800af70:	b003      	add	sp, #12
 800af72:	ecbd 8b04 	vpop	{d8-d9}
 800af76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af7a:	4b1b      	ldr	r3, [pc, #108]	; (800afe8 <__kernel_sin+0x150>)
 800af7c:	ec51 0b18 	vmov	r0, r1, d8
 800af80:	2200      	movs	r2, #0
 800af82:	f7f5 fae5 	bl	8000550 <__aeabi_dmul>
 800af86:	4632      	mov	r2, r6
 800af88:	ec41 0b19 	vmov	d9, r0, r1
 800af8c:	463b      	mov	r3, r7
 800af8e:	4640      	mov	r0, r8
 800af90:	4649      	mov	r1, r9
 800af92:	f7f5 fadd 	bl	8000550 <__aeabi_dmul>
 800af96:	4602      	mov	r2, r0
 800af98:	460b      	mov	r3, r1
 800af9a:	ec51 0b19 	vmov	r0, r1, d9
 800af9e:	f7f5 f91f 	bl	80001e0 <__aeabi_dsub>
 800afa2:	4652      	mov	r2, sl
 800afa4:	465b      	mov	r3, fp
 800afa6:	f7f5 fad3 	bl	8000550 <__aeabi_dmul>
 800afaa:	ec53 2b18 	vmov	r2, r3, d8
 800afae:	f7f5 f917 	bl	80001e0 <__aeabi_dsub>
 800afb2:	a30b      	add	r3, pc, #44	; (adr r3, 800afe0 <__kernel_sin+0x148>)
 800afb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afb8:	4606      	mov	r6, r0
 800afba:	460f      	mov	r7, r1
 800afbc:	4640      	mov	r0, r8
 800afbe:	4649      	mov	r1, r9
 800afc0:	f7f5 fac6 	bl	8000550 <__aeabi_dmul>
 800afc4:	4602      	mov	r2, r0
 800afc6:	460b      	mov	r3, r1
 800afc8:	4630      	mov	r0, r6
 800afca:	4639      	mov	r1, r7
 800afcc:	f7f5 f90a 	bl	80001e4 <__adddf3>
 800afd0:	4602      	mov	r2, r0
 800afd2:	460b      	mov	r3, r1
 800afd4:	4620      	mov	r0, r4
 800afd6:	4629      	mov	r1, r5
 800afd8:	f7f5 f902 	bl	80001e0 <__aeabi_dsub>
 800afdc:	e7c4      	b.n	800af68 <__kernel_sin+0xd0>
 800afde:	bf00      	nop
 800afe0:	55555549 	.word	0x55555549
 800afe4:	3fc55555 	.word	0x3fc55555
 800afe8:	3fe00000 	.word	0x3fe00000
 800afec:	5acfd57c 	.word	0x5acfd57c
 800aff0:	3de5d93a 	.word	0x3de5d93a
 800aff4:	8a2b9ceb 	.word	0x8a2b9ceb
 800aff8:	3e5ae5e6 	.word	0x3e5ae5e6
 800affc:	57b1fe7d 	.word	0x57b1fe7d
 800b000:	3ec71de3 	.word	0x3ec71de3
 800b004:	19c161d5 	.word	0x19c161d5
 800b008:	3f2a01a0 	.word	0x3f2a01a0
 800b00c:	1110f8a6 	.word	0x1110f8a6
 800b010:	3f811111 	.word	0x3f811111

0800b014 <__kernel_cosf>:
 800b014:	ee10 3a10 	vmov	r3, s0
 800b018:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b01c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800b020:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800b024:	da05      	bge.n	800b032 <__kernel_cosf+0x1e>
 800b026:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800b02a:	ee17 2a90 	vmov	r2, s15
 800b02e:	2a00      	cmp	r2, #0
 800b030:	d03d      	beq.n	800b0ae <__kernel_cosf+0x9a>
 800b032:	ee60 5a00 	vmul.f32	s11, s0, s0
 800b036:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800b0b4 <__kernel_cosf+0xa0>
 800b03a:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800b0b8 <__kernel_cosf+0xa4>
 800b03e:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800b0bc <__kernel_cosf+0xa8>
 800b042:	4a1f      	ldr	r2, [pc, #124]	; (800b0c0 <__kernel_cosf+0xac>)
 800b044:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800b048:	4293      	cmp	r3, r2
 800b04a:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800b0c4 <__kernel_cosf+0xb0>
 800b04e:	eee7 7a25 	vfma.f32	s15, s14, s11
 800b052:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800b0c8 <__kernel_cosf+0xb4>
 800b056:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800b05a:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800b0cc <__kernel_cosf+0xb8>
 800b05e:	eee7 7a25 	vfma.f32	s15, s14, s11
 800b062:	eeb0 7a66 	vmov.f32	s14, s13
 800b066:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800b06a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800b06e:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800b072:	ee67 6a25 	vmul.f32	s13, s14, s11
 800b076:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800b07a:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800b07e:	dc04      	bgt.n	800b08a <__kernel_cosf+0x76>
 800b080:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800b084:	ee36 0a47 	vsub.f32	s0, s12, s14
 800b088:	4770      	bx	lr
 800b08a:	4a11      	ldr	r2, [pc, #68]	; (800b0d0 <__kernel_cosf+0xbc>)
 800b08c:	4293      	cmp	r3, r2
 800b08e:	bfda      	itte	le
 800b090:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800b094:	ee06 3a90 	vmovle	s13, r3
 800b098:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 800b09c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b0a0:	ee36 0a66 	vsub.f32	s0, s12, s13
 800b0a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b0a8:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b0ac:	4770      	bx	lr
 800b0ae:	eeb0 0a46 	vmov.f32	s0, s12
 800b0b2:	4770      	bx	lr
 800b0b4:	ad47d74e 	.word	0xad47d74e
 800b0b8:	310f74f6 	.word	0x310f74f6
 800b0bc:	3d2aaaab 	.word	0x3d2aaaab
 800b0c0:	3e999999 	.word	0x3e999999
 800b0c4:	b493f27c 	.word	0xb493f27c
 800b0c8:	37d00d01 	.word	0x37d00d01
 800b0cc:	bab60b61 	.word	0xbab60b61
 800b0d0:	3f480000 	.word	0x3f480000

0800b0d4 <__kernel_rem_pio2f>:
 800b0d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0d8:	ed2d 8b04 	vpush	{d8-d9}
 800b0dc:	b0d9      	sub	sp, #356	; 0x164
 800b0de:	4688      	mov	r8, r1
 800b0e0:	9002      	str	r0, [sp, #8]
 800b0e2:	49bb      	ldr	r1, [pc, #748]	; (800b3d0 <__kernel_rem_pio2f+0x2fc>)
 800b0e4:	9866      	ldr	r0, [sp, #408]	; 0x198
 800b0e6:	9301      	str	r3, [sp, #4]
 800b0e8:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 800b0ec:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 800b0f0:	1e59      	subs	r1, r3, #1
 800b0f2:	1d13      	adds	r3, r2, #4
 800b0f4:	db27      	blt.n	800b146 <__kernel_rem_pio2f+0x72>
 800b0f6:	f1b2 0b03 	subs.w	fp, r2, #3
 800b0fa:	bf48      	it	mi
 800b0fc:	f102 0b04 	addmi.w	fp, r2, #4
 800b100:	ea4f 00eb 	mov.w	r0, fp, asr #3
 800b104:	1c45      	adds	r5, r0, #1
 800b106:	00ec      	lsls	r4, r5, #3
 800b108:	1a47      	subs	r7, r0, r1
 800b10a:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 800b3e0 <__kernel_rem_pio2f+0x30c>
 800b10e:	9403      	str	r4, [sp, #12]
 800b110:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800b114:	eb0a 0c01 	add.w	ip, sl, r1
 800b118:	ae1c      	add	r6, sp, #112	; 0x70
 800b11a:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 800b11e:	2400      	movs	r4, #0
 800b120:	4564      	cmp	r4, ip
 800b122:	dd12      	ble.n	800b14a <__kernel_rem_pio2f+0x76>
 800b124:	9b01      	ldr	r3, [sp, #4]
 800b126:	ac1c      	add	r4, sp, #112	; 0x70
 800b128:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800b12c:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 800b130:	f04f 0c00 	mov.w	ip, #0
 800b134:	45d4      	cmp	ip, sl
 800b136:	dc27      	bgt.n	800b188 <__kernel_rem_pio2f+0xb4>
 800b138:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800b13c:	eddf 7aa8 	vldr	s15, [pc, #672]	; 800b3e0 <__kernel_rem_pio2f+0x30c>
 800b140:	4627      	mov	r7, r4
 800b142:	2600      	movs	r6, #0
 800b144:	e016      	b.n	800b174 <__kernel_rem_pio2f+0xa0>
 800b146:	2000      	movs	r0, #0
 800b148:	e7dc      	b.n	800b104 <__kernel_rem_pio2f+0x30>
 800b14a:	42e7      	cmn	r7, r4
 800b14c:	bf5d      	ittte	pl
 800b14e:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 800b152:	ee07 3a90 	vmovpl	s15, r3
 800b156:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800b15a:	eef0 7a47 	vmovmi.f32	s15, s14
 800b15e:	ece6 7a01 	vstmia	r6!, {s15}
 800b162:	3401      	adds	r4, #1
 800b164:	e7dc      	b.n	800b120 <__kernel_rem_pio2f+0x4c>
 800b166:	ecf9 6a01 	vldmia	r9!, {s13}
 800b16a:	ed97 7a00 	vldr	s14, [r7]
 800b16e:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b172:	3601      	adds	r6, #1
 800b174:	428e      	cmp	r6, r1
 800b176:	f1a7 0704 	sub.w	r7, r7, #4
 800b17a:	ddf4      	ble.n	800b166 <__kernel_rem_pio2f+0x92>
 800b17c:	eceb 7a01 	vstmia	fp!, {s15}
 800b180:	f10c 0c01 	add.w	ip, ip, #1
 800b184:	3404      	adds	r4, #4
 800b186:	e7d5      	b.n	800b134 <__kernel_rem_pio2f+0x60>
 800b188:	ab08      	add	r3, sp, #32
 800b18a:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800b18e:	eddf 8a93 	vldr	s17, [pc, #588]	; 800b3dc <__kernel_rem_pio2f+0x308>
 800b192:	ed9f 9a91 	vldr	s18, [pc, #580]	; 800b3d8 <__kernel_rem_pio2f+0x304>
 800b196:	9304      	str	r3, [sp, #16]
 800b198:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 800b19c:	4656      	mov	r6, sl
 800b19e:	00b3      	lsls	r3, r6, #2
 800b1a0:	9305      	str	r3, [sp, #20]
 800b1a2:	ab58      	add	r3, sp, #352	; 0x160
 800b1a4:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800b1a8:	ac08      	add	r4, sp, #32
 800b1aa:	ab44      	add	r3, sp, #272	; 0x110
 800b1ac:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 800b1b0:	46a4      	mov	ip, r4
 800b1b2:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800b1b6:	4637      	mov	r7, r6
 800b1b8:	2f00      	cmp	r7, #0
 800b1ba:	f1a0 0004 	sub.w	r0, r0, #4
 800b1be:	dc4f      	bgt.n	800b260 <__kernel_rem_pio2f+0x18c>
 800b1c0:	4628      	mov	r0, r5
 800b1c2:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800b1c6:	f000 fb9f 	bl	800b908 <scalbnf>
 800b1ca:	eeb0 8a40 	vmov.f32	s16, s0
 800b1ce:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800b1d2:	ee28 0a00 	vmul.f32	s0, s16, s0
 800b1d6:	f000 fb55 	bl	800b884 <floorf>
 800b1da:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800b1de:	eea0 8a67 	vfms.f32	s16, s0, s15
 800b1e2:	2d00      	cmp	r5, #0
 800b1e4:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800b1e8:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800b1ec:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800b1f0:	ee17 9a90 	vmov	r9, s15
 800b1f4:	ee38 8a40 	vsub.f32	s16, s16, s0
 800b1f8:	dd44      	ble.n	800b284 <__kernel_rem_pio2f+0x1b0>
 800b1fa:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800b1fe:	ab08      	add	r3, sp, #32
 800b200:	f1c5 0e08 	rsb	lr, r5, #8
 800b204:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800b208:	fa47 f00e 	asr.w	r0, r7, lr
 800b20c:	4481      	add	r9, r0
 800b20e:	fa00 f00e 	lsl.w	r0, r0, lr
 800b212:	1a3f      	subs	r7, r7, r0
 800b214:	f1c5 0007 	rsb	r0, r5, #7
 800b218:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 800b21c:	4107      	asrs	r7, r0
 800b21e:	2f00      	cmp	r7, #0
 800b220:	dd3f      	ble.n	800b2a2 <__kernel_rem_pio2f+0x1ce>
 800b222:	f04f 0e00 	mov.w	lr, #0
 800b226:	f109 0901 	add.w	r9, r9, #1
 800b22a:	4673      	mov	r3, lr
 800b22c:	4576      	cmp	r6, lr
 800b22e:	dc6b      	bgt.n	800b308 <__kernel_rem_pio2f+0x234>
 800b230:	2d00      	cmp	r5, #0
 800b232:	dd04      	ble.n	800b23e <__kernel_rem_pio2f+0x16a>
 800b234:	2d01      	cmp	r5, #1
 800b236:	d078      	beq.n	800b32a <__kernel_rem_pio2f+0x256>
 800b238:	2d02      	cmp	r5, #2
 800b23a:	f000 8081 	beq.w	800b340 <__kernel_rem_pio2f+0x26c>
 800b23e:	2f02      	cmp	r7, #2
 800b240:	d12f      	bne.n	800b2a2 <__kernel_rem_pio2f+0x1ce>
 800b242:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b246:	ee30 8a48 	vsub.f32	s16, s0, s16
 800b24a:	b353      	cbz	r3, 800b2a2 <__kernel_rem_pio2f+0x1ce>
 800b24c:	4628      	mov	r0, r5
 800b24e:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800b252:	f000 fb59 	bl	800b908 <scalbnf>
 800b256:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800b25a:	ee38 8a40 	vsub.f32	s16, s16, s0
 800b25e:	e020      	b.n	800b2a2 <__kernel_rem_pio2f+0x1ce>
 800b260:	ee60 7a28 	vmul.f32	s15, s0, s17
 800b264:	3f01      	subs	r7, #1
 800b266:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b26a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b26e:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800b272:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800b276:	ecac 0a01 	vstmia	ip!, {s0}
 800b27a:	ed90 0a00 	vldr	s0, [r0]
 800b27e:	ee37 0a80 	vadd.f32	s0, s15, s0
 800b282:	e799      	b.n	800b1b8 <__kernel_rem_pio2f+0xe4>
 800b284:	d105      	bne.n	800b292 <__kernel_rem_pio2f+0x1be>
 800b286:	1e70      	subs	r0, r6, #1
 800b288:	ab08      	add	r3, sp, #32
 800b28a:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800b28e:	11ff      	asrs	r7, r7, #7
 800b290:	e7c5      	b.n	800b21e <__kernel_rem_pio2f+0x14a>
 800b292:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800b296:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800b29a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b29e:	da31      	bge.n	800b304 <__kernel_rem_pio2f+0x230>
 800b2a0:	2700      	movs	r7, #0
 800b2a2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800b2a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2aa:	f040 809b 	bne.w	800b3e4 <__kernel_rem_pio2f+0x310>
 800b2ae:	1e74      	subs	r4, r6, #1
 800b2b0:	46a4      	mov	ip, r4
 800b2b2:	2000      	movs	r0, #0
 800b2b4:	45d4      	cmp	ip, sl
 800b2b6:	da4a      	bge.n	800b34e <__kernel_rem_pio2f+0x27a>
 800b2b8:	2800      	cmp	r0, #0
 800b2ba:	d07a      	beq.n	800b3b2 <__kernel_rem_pio2f+0x2de>
 800b2bc:	ab08      	add	r3, sp, #32
 800b2be:	3d08      	subs	r5, #8
 800b2c0:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	f000 8081 	beq.w	800b3cc <__kernel_rem_pio2f+0x2f8>
 800b2ca:	4628      	mov	r0, r5
 800b2cc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b2d0:	00a5      	lsls	r5, r4, #2
 800b2d2:	f000 fb19 	bl	800b908 <scalbnf>
 800b2d6:	aa44      	add	r2, sp, #272	; 0x110
 800b2d8:	1d2b      	adds	r3, r5, #4
 800b2da:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800b3dc <__kernel_rem_pio2f+0x308>
 800b2de:	18d1      	adds	r1, r2, r3
 800b2e0:	4622      	mov	r2, r4
 800b2e2:	2a00      	cmp	r2, #0
 800b2e4:	f280 80ae 	bge.w	800b444 <__kernel_rem_pio2f+0x370>
 800b2e8:	4622      	mov	r2, r4
 800b2ea:	2a00      	cmp	r2, #0
 800b2ec:	f2c0 80cc 	blt.w	800b488 <__kernel_rem_pio2f+0x3b4>
 800b2f0:	a944      	add	r1, sp, #272	; 0x110
 800b2f2:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 800b2f6:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800b3d4 <__kernel_rem_pio2f+0x300>
 800b2fa:	eddf 7a39 	vldr	s15, [pc, #228]	; 800b3e0 <__kernel_rem_pio2f+0x30c>
 800b2fe:	2000      	movs	r0, #0
 800b300:	1aa1      	subs	r1, r4, r2
 800b302:	e0b6      	b.n	800b472 <__kernel_rem_pio2f+0x39e>
 800b304:	2702      	movs	r7, #2
 800b306:	e78c      	b.n	800b222 <__kernel_rem_pio2f+0x14e>
 800b308:	6820      	ldr	r0, [r4, #0]
 800b30a:	b94b      	cbnz	r3, 800b320 <__kernel_rem_pio2f+0x24c>
 800b30c:	b118      	cbz	r0, 800b316 <__kernel_rem_pio2f+0x242>
 800b30e:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800b312:	6020      	str	r0, [r4, #0]
 800b314:	2001      	movs	r0, #1
 800b316:	f10e 0e01 	add.w	lr, lr, #1
 800b31a:	3404      	adds	r4, #4
 800b31c:	4603      	mov	r3, r0
 800b31e:	e785      	b.n	800b22c <__kernel_rem_pio2f+0x158>
 800b320:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800b324:	6020      	str	r0, [r4, #0]
 800b326:	4618      	mov	r0, r3
 800b328:	e7f5      	b.n	800b316 <__kernel_rem_pio2f+0x242>
 800b32a:	1e74      	subs	r4, r6, #1
 800b32c:	a808      	add	r0, sp, #32
 800b32e:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800b332:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800b336:	f10d 0c20 	add.w	ip, sp, #32
 800b33a:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 800b33e:	e77e      	b.n	800b23e <__kernel_rem_pio2f+0x16a>
 800b340:	1e74      	subs	r4, r6, #1
 800b342:	a808      	add	r0, sp, #32
 800b344:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800b348:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800b34c:	e7f3      	b.n	800b336 <__kernel_rem_pio2f+0x262>
 800b34e:	ab08      	add	r3, sp, #32
 800b350:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800b354:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800b358:	4318      	orrs	r0, r3
 800b35a:	e7ab      	b.n	800b2b4 <__kernel_rem_pio2f+0x1e0>
 800b35c:	f10c 0c01 	add.w	ip, ip, #1
 800b360:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 800b364:	2c00      	cmp	r4, #0
 800b366:	d0f9      	beq.n	800b35c <__kernel_rem_pio2f+0x288>
 800b368:	9b05      	ldr	r3, [sp, #20]
 800b36a:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800b36e:	eb0d 0003 	add.w	r0, sp, r3
 800b372:	9b01      	ldr	r3, [sp, #4]
 800b374:	18f4      	adds	r4, r6, r3
 800b376:	ab1c      	add	r3, sp, #112	; 0x70
 800b378:	1c77      	adds	r7, r6, #1
 800b37a:	384c      	subs	r0, #76	; 0x4c
 800b37c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b380:	4466      	add	r6, ip
 800b382:	42be      	cmp	r6, r7
 800b384:	f6ff af0b 	blt.w	800b19e <__kernel_rem_pio2f+0xca>
 800b388:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 800b38c:	f8dd e008 	ldr.w	lr, [sp, #8]
 800b390:	ee07 3a90 	vmov	s15, r3
 800b394:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b398:	f04f 0c00 	mov.w	ip, #0
 800b39c:	ece4 7a01 	vstmia	r4!, {s15}
 800b3a0:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800b3e0 <__kernel_rem_pio2f+0x30c>
 800b3a4:	46a1      	mov	r9, r4
 800b3a6:	458c      	cmp	ip, r1
 800b3a8:	dd07      	ble.n	800b3ba <__kernel_rem_pio2f+0x2e6>
 800b3aa:	ece0 7a01 	vstmia	r0!, {s15}
 800b3ae:	3701      	adds	r7, #1
 800b3b0:	e7e7      	b.n	800b382 <__kernel_rem_pio2f+0x2ae>
 800b3b2:	9804      	ldr	r0, [sp, #16]
 800b3b4:	f04f 0c01 	mov.w	ip, #1
 800b3b8:	e7d2      	b.n	800b360 <__kernel_rem_pio2f+0x28c>
 800b3ba:	ecfe 6a01 	vldmia	lr!, {s13}
 800b3be:	ed39 7a01 	vldmdb	r9!, {s14}
 800b3c2:	f10c 0c01 	add.w	ip, ip, #1
 800b3c6:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b3ca:	e7ec      	b.n	800b3a6 <__kernel_rem_pio2f+0x2d2>
 800b3cc:	3c01      	subs	r4, #1
 800b3ce:	e775      	b.n	800b2bc <__kernel_rem_pio2f+0x1e8>
 800b3d0:	0800c8a4 	.word	0x0800c8a4
 800b3d4:	0800c878 	.word	0x0800c878
 800b3d8:	43800000 	.word	0x43800000
 800b3dc:	3b800000 	.word	0x3b800000
 800b3e0:	00000000 	.word	0x00000000
 800b3e4:	9b03      	ldr	r3, [sp, #12]
 800b3e6:	eeb0 0a48 	vmov.f32	s0, s16
 800b3ea:	1a98      	subs	r0, r3, r2
 800b3ec:	f000 fa8c 	bl	800b908 <scalbnf>
 800b3f0:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800b3d8 <__kernel_rem_pio2f+0x304>
 800b3f4:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800b3f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3fc:	db19      	blt.n	800b432 <__kernel_rem_pio2f+0x35e>
 800b3fe:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800b3dc <__kernel_rem_pio2f+0x308>
 800b402:	ee60 7a27 	vmul.f32	s15, s0, s15
 800b406:	aa08      	add	r2, sp, #32
 800b408:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b40c:	1c74      	adds	r4, r6, #1
 800b40e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b412:	3508      	adds	r5, #8
 800b414:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800b418:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b41c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800b420:	ee10 3a10 	vmov	r3, s0
 800b424:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800b428:	ee17 3a90 	vmov	r3, s15
 800b42c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800b430:	e74b      	b.n	800b2ca <__kernel_rem_pio2f+0x1f6>
 800b432:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800b436:	aa08      	add	r2, sp, #32
 800b438:	ee10 3a10 	vmov	r3, s0
 800b43c:	4634      	mov	r4, r6
 800b43e:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800b442:	e742      	b.n	800b2ca <__kernel_rem_pio2f+0x1f6>
 800b444:	a808      	add	r0, sp, #32
 800b446:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800b44a:	9001      	str	r0, [sp, #4]
 800b44c:	ee07 0a90 	vmov	s15, r0
 800b450:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b454:	3a01      	subs	r2, #1
 800b456:	ee67 7a80 	vmul.f32	s15, s15, s0
 800b45a:	ee20 0a07 	vmul.f32	s0, s0, s14
 800b45e:	ed61 7a01 	vstmdb	r1!, {s15}
 800b462:	e73e      	b.n	800b2e2 <__kernel_rem_pio2f+0x20e>
 800b464:	ecfc 6a01 	vldmia	ip!, {s13}
 800b468:	ecb6 7a01 	vldmia	r6!, {s14}
 800b46c:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b470:	3001      	adds	r0, #1
 800b472:	4550      	cmp	r0, sl
 800b474:	dc01      	bgt.n	800b47a <__kernel_rem_pio2f+0x3a6>
 800b476:	4288      	cmp	r0, r1
 800b478:	ddf4      	ble.n	800b464 <__kernel_rem_pio2f+0x390>
 800b47a:	a858      	add	r0, sp, #352	; 0x160
 800b47c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b480:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800b484:	3a01      	subs	r2, #1
 800b486:	e730      	b.n	800b2ea <__kernel_rem_pio2f+0x216>
 800b488:	9a66      	ldr	r2, [sp, #408]	; 0x198
 800b48a:	2a02      	cmp	r2, #2
 800b48c:	dc09      	bgt.n	800b4a2 <__kernel_rem_pio2f+0x3ce>
 800b48e:	2a00      	cmp	r2, #0
 800b490:	dc2a      	bgt.n	800b4e8 <__kernel_rem_pio2f+0x414>
 800b492:	d043      	beq.n	800b51c <__kernel_rem_pio2f+0x448>
 800b494:	f009 0007 	and.w	r0, r9, #7
 800b498:	b059      	add	sp, #356	; 0x164
 800b49a:	ecbd 8b04 	vpop	{d8-d9}
 800b49e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4a2:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800b4a4:	2b03      	cmp	r3, #3
 800b4a6:	d1f5      	bne.n	800b494 <__kernel_rem_pio2f+0x3c0>
 800b4a8:	ab30      	add	r3, sp, #192	; 0xc0
 800b4aa:	442b      	add	r3, r5
 800b4ac:	461a      	mov	r2, r3
 800b4ae:	4619      	mov	r1, r3
 800b4b0:	4620      	mov	r0, r4
 800b4b2:	2800      	cmp	r0, #0
 800b4b4:	f1a1 0104 	sub.w	r1, r1, #4
 800b4b8:	dc51      	bgt.n	800b55e <__kernel_rem_pio2f+0x48a>
 800b4ba:	4621      	mov	r1, r4
 800b4bc:	2901      	cmp	r1, #1
 800b4be:	f1a2 0204 	sub.w	r2, r2, #4
 800b4c2:	dc5c      	bgt.n	800b57e <__kernel_rem_pio2f+0x4aa>
 800b4c4:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800b3e0 <__kernel_rem_pio2f+0x30c>
 800b4c8:	3304      	adds	r3, #4
 800b4ca:	2c01      	cmp	r4, #1
 800b4cc:	dc67      	bgt.n	800b59e <__kernel_rem_pio2f+0x4ca>
 800b4ce:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800b4d2:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800b4d6:	2f00      	cmp	r7, #0
 800b4d8:	d167      	bne.n	800b5aa <__kernel_rem_pio2f+0x4d6>
 800b4da:	edc8 6a00 	vstr	s13, [r8]
 800b4de:	ed88 7a01 	vstr	s14, [r8, #4]
 800b4e2:	edc8 7a02 	vstr	s15, [r8, #8]
 800b4e6:	e7d5      	b.n	800b494 <__kernel_rem_pio2f+0x3c0>
 800b4e8:	aa30      	add	r2, sp, #192	; 0xc0
 800b4ea:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 800b3e0 <__kernel_rem_pio2f+0x30c>
 800b4ee:	4413      	add	r3, r2
 800b4f0:	4622      	mov	r2, r4
 800b4f2:	2a00      	cmp	r2, #0
 800b4f4:	da24      	bge.n	800b540 <__kernel_rem_pio2f+0x46c>
 800b4f6:	b34f      	cbz	r7, 800b54c <__kernel_rem_pio2f+0x478>
 800b4f8:	eef1 7a47 	vneg.f32	s15, s14
 800b4fc:	edc8 7a00 	vstr	s15, [r8]
 800b500:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800b504:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b508:	aa31      	add	r2, sp, #196	; 0xc4
 800b50a:	2301      	movs	r3, #1
 800b50c:	429c      	cmp	r4, r3
 800b50e:	da20      	bge.n	800b552 <__kernel_rem_pio2f+0x47e>
 800b510:	b10f      	cbz	r7, 800b516 <__kernel_rem_pio2f+0x442>
 800b512:	eef1 7a67 	vneg.f32	s15, s15
 800b516:	edc8 7a01 	vstr	s15, [r8, #4]
 800b51a:	e7bb      	b.n	800b494 <__kernel_rem_pio2f+0x3c0>
 800b51c:	aa30      	add	r2, sp, #192	; 0xc0
 800b51e:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 800b3e0 <__kernel_rem_pio2f+0x30c>
 800b522:	4413      	add	r3, r2
 800b524:	2c00      	cmp	r4, #0
 800b526:	da05      	bge.n	800b534 <__kernel_rem_pio2f+0x460>
 800b528:	b10f      	cbz	r7, 800b52e <__kernel_rem_pio2f+0x45a>
 800b52a:	eef1 7a67 	vneg.f32	s15, s15
 800b52e:	edc8 7a00 	vstr	s15, [r8]
 800b532:	e7af      	b.n	800b494 <__kernel_rem_pio2f+0x3c0>
 800b534:	ed33 7a01 	vldmdb	r3!, {s14}
 800b538:	3c01      	subs	r4, #1
 800b53a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b53e:	e7f1      	b.n	800b524 <__kernel_rem_pio2f+0x450>
 800b540:	ed73 7a01 	vldmdb	r3!, {s15}
 800b544:	3a01      	subs	r2, #1
 800b546:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b54a:	e7d2      	b.n	800b4f2 <__kernel_rem_pio2f+0x41e>
 800b54c:	eef0 7a47 	vmov.f32	s15, s14
 800b550:	e7d4      	b.n	800b4fc <__kernel_rem_pio2f+0x428>
 800b552:	ecb2 7a01 	vldmia	r2!, {s14}
 800b556:	3301      	adds	r3, #1
 800b558:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b55c:	e7d6      	b.n	800b50c <__kernel_rem_pio2f+0x438>
 800b55e:	edd1 7a00 	vldr	s15, [r1]
 800b562:	edd1 6a01 	vldr	s13, [r1, #4]
 800b566:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800b56a:	3801      	subs	r0, #1
 800b56c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b570:	ed81 7a00 	vstr	s14, [r1]
 800b574:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b578:	edc1 7a01 	vstr	s15, [r1, #4]
 800b57c:	e799      	b.n	800b4b2 <__kernel_rem_pio2f+0x3de>
 800b57e:	edd2 7a00 	vldr	s15, [r2]
 800b582:	edd2 6a01 	vldr	s13, [r2, #4]
 800b586:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800b58a:	3901      	subs	r1, #1
 800b58c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b590:	ed82 7a00 	vstr	s14, [r2]
 800b594:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b598:	edc2 7a01 	vstr	s15, [r2, #4]
 800b59c:	e78e      	b.n	800b4bc <__kernel_rem_pio2f+0x3e8>
 800b59e:	ed33 7a01 	vldmdb	r3!, {s14}
 800b5a2:	3c01      	subs	r4, #1
 800b5a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b5a8:	e78f      	b.n	800b4ca <__kernel_rem_pio2f+0x3f6>
 800b5aa:	eef1 6a66 	vneg.f32	s13, s13
 800b5ae:	eeb1 7a47 	vneg.f32	s14, s14
 800b5b2:	edc8 6a00 	vstr	s13, [r8]
 800b5b6:	ed88 7a01 	vstr	s14, [r8, #4]
 800b5ba:	eef1 7a67 	vneg.f32	s15, s15
 800b5be:	e790      	b.n	800b4e2 <__kernel_rem_pio2f+0x40e>

0800b5c0 <__kernel_sinf>:
 800b5c0:	ee10 3a10 	vmov	r3, s0
 800b5c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b5c8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800b5cc:	da04      	bge.n	800b5d8 <__kernel_sinf+0x18>
 800b5ce:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800b5d2:	ee17 3a90 	vmov	r3, s15
 800b5d6:	b35b      	cbz	r3, 800b630 <__kernel_sinf+0x70>
 800b5d8:	ee20 7a00 	vmul.f32	s14, s0, s0
 800b5dc:	eddf 7a15 	vldr	s15, [pc, #84]	; 800b634 <__kernel_sinf+0x74>
 800b5e0:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800b638 <__kernel_sinf+0x78>
 800b5e4:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b5e8:	eddf 7a14 	vldr	s15, [pc, #80]	; 800b63c <__kernel_sinf+0x7c>
 800b5ec:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b5f0:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800b640 <__kernel_sinf+0x80>
 800b5f4:	eea7 6a87 	vfma.f32	s12, s15, s14
 800b5f8:	eddf 7a12 	vldr	s15, [pc, #72]	; 800b644 <__kernel_sinf+0x84>
 800b5fc:	ee60 6a07 	vmul.f32	s13, s0, s14
 800b600:	eee6 7a07 	vfma.f32	s15, s12, s14
 800b604:	b930      	cbnz	r0, 800b614 <__kernel_sinf+0x54>
 800b606:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800b648 <__kernel_sinf+0x88>
 800b60a:	eea7 6a27 	vfma.f32	s12, s14, s15
 800b60e:	eea6 0a26 	vfma.f32	s0, s12, s13
 800b612:	4770      	bx	lr
 800b614:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800b618:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800b61c:	eee0 7a86 	vfma.f32	s15, s1, s12
 800b620:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800b624:	eddf 7a09 	vldr	s15, [pc, #36]	; 800b64c <__kernel_sinf+0x8c>
 800b628:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800b62c:	ee30 0a60 	vsub.f32	s0, s0, s1
 800b630:	4770      	bx	lr
 800b632:	bf00      	nop
 800b634:	2f2ec9d3 	.word	0x2f2ec9d3
 800b638:	b2d72f34 	.word	0xb2d72f34
 800b63c:	3638ef1b 	.word	0x3638ef1b
 800b640:	b9500d01 	.word	0xb9500d01
 800b644:	3c088889 	.word	0x3c088889
 800b648:	be2aaaab 	.word	0xbe2aaaab
 800b64c:	3e2aaaab 	.word	0x3e2aaaab

0800b650 <fabs>:
 800b650:	ec51 0b10 	vmov	r0, r1, d0
 800b654:	ee10 2a10 	vmov	r2, s0
 800b658:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b65c:	ec43 2b10 	vmov	d0, r2, r3
 800b660:	4770      	bx	lr
 800b662:	0000      	movs	r0, r0
 800b664:	0000      	movs	r0, r0
	...

0800b668 <floor>:
 800b668:	ec51 0b10 	vmov	r0, r1, d0
 800b66c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b670:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800b674:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800b678:	2e13      	cmp	r6, #19
 800b67a:	ee10 5a10 	vmov	r5, s0
 800b67e:	ee10 8a10 	vmov	r8, s0
 800b682:	460c      	mov	r4, r1
 800b684:	dc32      	bgt.n	800b6ec <floor+0x84>
 800b686:	2e00      	cmp	r6, #0
 800b688:	da14      	bge.n	800b6b4 <floor+0x4c>
 800b68a:	a333      	add	r3, pc, #204	; (adr r3, 800b758 <floor+0xf0>)
 800b68c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b690:	f7f4 fda8 	bl	80001e4 <__adddf3>
 800b694:	2200      	movs	r2, #0
 800b696:	2300      	movs	r3, #0
 800b698:	f7f5 f9ea 	bl	8000a70 <__aeabi_dcmpgt>
 800b69c:	b138      	cbz	r0, 800b6ae <floor+0x46>
 800b69e:	2c00      	cmp	r4, #0
 800b6a0:	da57      	bge.n	800b752 <floor+0xea>
 800b6a2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800b6a6:	431d      	orrs	r5, r3
 800b6a8:	d001      	beq.n	800b6ae <floor+0x46>
 800b6aa:	4c2d      	ldr	r4, [pc, #180]	; (800b760 <floor+0xf8>)
 800b6ac:	2500      	movs	r5, #0
 800b6ae:	4621      	mov	r1, r4
 800b6b0:	4628      	mov	r0, r5
 800b6b2:	e025      	b.n	800b700 <floor+0x98>
 800b6b4:	4f2b      	ldr	r7, [pc, #172]	; (800b764 <floor+0xfc>)
 800b6b6:	4137      	asrs	r7, r6
 800b6b8:	ea01 0307 	and.w	r3, r1, r7
 800b6bc:	4303      	orrs	r3, r0
 800b6be:	d01f      	beq.n	800b700 <floor+0x98>
 800b6c0:	a325      	add	r3, pc, #148	; (adr r3, 800b758 <floor+0xf0>)
 800b6c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6c6:	f7f4 fd8d 	bl	80001e4 <__adddf3>
 800b6ca:	2200      	movs	r2, #0
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	f7f5 f9cf 	bl	8000a70 <__aeabi_dcmpgt>
 800b6d2:	2800      	cmp	r0, #0
 800b6d4:	d0eb      	beq.n	800b6ae <floor+0x46>
 800b6d6:	2c00      	cmp	r4, #0
 800b6d8:	bfbe      	ittt	lt
 800b6da:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800b6de:	fa43 f606 	asrlt.w	r6, r3, r6
 800b6e2:	19a4      	addlt	r4, r4, r6
 800b6e4:	ea24 0407 	bic.w	r4, r4, r7
 800b6e8:	2500      	movs	r5, #0
 800b6ea:	e7e0      	b.n	800b6ae <floor+0x46>
 800b6ec:	2e33      	cmp	r6, #51	; 0x33
 800b6ee:	dd0b      	ble.n	800b708 <floor+0xa0>
 800b6f0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b6f4:	d104      	bne.n	800b700 <floor+0x98>
 800b6f6:	ee10 2a10 	vmov	r2, s0
 800b6fa:	460b      	mov	r3, r1
 800b6fc:	f7f4 fd72 	bl	80001e4 <__adddf3>
 800b700:	ec41 0b10 	vmov	d0, r0, r1
 800b704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b708:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800b70c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b710:	fa23 f707 	lsr.w	r7, r3, r7
 800b714:	4207      	tst	r7, r0
 800b716:	d0f3      	beq.n	800b700 <floor+0x98>
 800b718:	a30f      	add	r3, pc, #60	; (adr r3, 800b758 <floor+0xf0>)
 800b71a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b71e:	f7f4 fd61 	bl	80001e4 <__adddf3>
 800b722:	2200      	movs	r2, #0
 800b724:	2300      	movs	r3, #0
 800b726:	f7f5 f9a3 	bl	8000a70 <__aeabi_dcmpgt>
 800b72a:	2800      	cmp	r0, #0
 800b72c:	d0bf      	beq.n	800b6ae <floor+0x46>
 800b72e:	2c00      	cmp	r4, #0
 800b730:	da02      	bge.n	800b738 <floor+0xd0>
 800b732:	2e14      	cmp	r6, #20
 800b734:	d103      	bne.n	800b73e <floor+0xd6>
 800b736:	3401      	adds	r4, #1
 800b738:	ea25 0507 	bic.w	r5, r5, r7
 800b73c:	e7b7      	b.n	800b6ae <floor+0x46>
 800b73e:	2301      	movs	r3, #1
 800b740:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800b744:	fa03 f606 	lsl.w	r6, r3, r6
 800b748:	4435      	add	r5, r6
 800b74a:	4545      	cmp	r5, r8
 800b74c:	bf38      	it	cc
 800b74e:	18e4      	addcc	r4, r4, r3
 800b750:	e7f2      	b.n	800b738 <floor+0xd0>
 800b752:	2500      	movs	r5, #0
 800b754:	462c      	mov	r4, r5
 800b756:	e7aa      	b.n	800b6ae <floor+0x46>
 800b758:	8800759c 	.word	0x8800759c
 800b75c:	7e37e43c 	.word	0x7e37e43c
 800b760:	bff00000 	.word	0xbff00000
 800b764:	000fffff 	.word	0x000fffff

0800b768 <scalbn>:
 800b768:	b570      	push	{r4, r5, r6, lr}
 800b76a:	ec55 4b10 	vmov	r4, r5, d0
 800b76e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800b772:	4606      	mov	r6, r0
 800b774:	462b      	mov	r3, r5
 800b776:	b99a      	cbnz	r2, 800b7a0 <scalbn+0x38>
 800b778:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b77c:	4323      	orrs	r3, r4
 800b77e:	d036      	beq.n	800b7ee <scalbn+0x86>
 800b780:	4b39      	ldr	r3, [pc, #228]	; (800b868 <scalbn+0x100>)
 800b782:	4629      	mov	r1, r5
 800b784:	ee10 0a10 	vmov	r0, s0
 800b788:	2200      	movs	r2, #0
 800b78a:	f7f4 fee1 	bl	8000550 <__aeabi_dmul>
 800b78e:	4b37      	ldr	r3, [pc, #220]	; (800b86c <scalbn+0x104>)
 800b790:	429e      	cmp	r6, r3
 800b792:	4604      	mov	r4, r0
 800b794:	460d      	mov	r5, r1
 800b796:	da10      	bge.n	800b7ba <scalbn+0x52>
 800b798:	a32b      	add	r3, pc, #172	; (adr r3, 800b848 <scalbn+0xe0>)
 800b79a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b79e:	e03a      	b.n	800b816 <scalbn+0xae>
 800b7a0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800b7a4:	428a      	cmp	r2, r1
 800b7a6:	d10c      	bne.n	800b7c2 <scalbn+0x5a>
 800b7a8:	ee10 2a10 	vmov	r2, s0
 800b7ac:	4620      	mov	r0, r4
 800b7ae:	4629      	mov	r1, r5
 800b7b0:	f7f4 fd18 	bl	80001e4 <__adddf3>
 800b7b4:	4604      	mov	r4, r0
 800b7b6:	460d      	mov	r5, r1
 800b7b8:	e019      	b.n	800b7ee <scalbn+0x86>
 800b7ba:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b7be:	460b      	mov	r3, r1
 800b7c0:	3a36      	subs	r2, #54	; 0x36
 800b7c2:	4432      	add	r2, r6
 800b7c4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b7c8:	428a      	cmp	r2, r1
 800b7ca:	dd08      	ble.n	800b7de <scalbn+0x76>
 800b7cc:	2d00      	cmp	r5, #0
 800b7ce:	a120      	add	r1, pc, #128	; (adr r1, 800b850 <scalbn+0xe8>)
 800b7d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b7d4:	da1c      	bge.n	800b810 <scalbn+0xa8>
 800b7d6:	a120      	add	r1, pc, #128	; (adr r1, 800b858 <scalbn+0xf0>)
 800b7d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b7dc:	e018      	b.n	800b810 <scalbn+0xa8>
 800b7de:	2a00      	cmp	r2, #0
 800b7e0:	dd08      	ble.n	800b7f4 <scalbn+0x8c>
 800b7e2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b7e6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b7ea:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b7ee:	ec45 4b10 	vmov	d0, r4, r5
 800b7f2:	bd70      	pop	{r4, r5, r6, pc}
 800b7f4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b7f8:	da19      	bge.n	800b82e <scalbn+0xc6>
 800b7fa:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b7fe:	429e      	cmp	r6, r3
 800b800:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800b804:	dd0a      	ble.n	800b81c <scalbn+0xb4>
 800b806:	a112      	add	r1, pc, #72	; (adr r1, 800b850 <scalbn+0xe8>)
 800b808:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d1e2      	bne.n	800b7d6 <scalbn+0x6e>
 800b810:	a30f      	add	r3, pc, #60	; (adr r3, 800b850 <scalbn+0xe8>)
 800b812:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b816:	f7f4 fe9b 	bl	8000550 <__aeabi_dmul>
 800b81a:	e7cb      	b.n	800b7b4 <scalbn+0x4c>
 800b81c:	a10a      	add	r1, pc, #40	; (adr r1, 800b848 <scalbn+0xe0>)
 800b81e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d0b8      	beq.n	800b798 <scalbn+0x30>
 800b826:	a10e      	add	r1, pc, #56	; (adr r1, 800b860 <scalbn+0xf8>)
 800b828:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b82c:	e7b4      	b.n	800b798 <scalbn+0x30>
 800b82e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b832:	3236      	adds	r2, #54	; 0x36
 800b834:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b838:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800b83c:	4620      	mov	r0, r4
 800b83e:	4b0c      	ldr	r3, [pc, #48]	; (800b870 <scalbn+0x108>)
 800b840:	2200      	movs	r2, #0
 800b842:	e7e8      	b.n	800b816 <scalbn+0xae>
 800b844:	f3af 8000 	nop.w
 800b848:	c2f8f359 	.word	0xc2f8f359
 800b84c:	01a56e1f 	.word	0x01a56e1f
 800b850:	8800759c 	.word	0x8800759c
 800b854:	7e37e43c 	.word	0x7e37e43c
 800b858:	8800759c 	.word	0x8800759c
 800b85c:	fe37e43c 	.word	0xfe37e43c
 800b860:	c2f8f359 	.word	0xc2f8f359
 800b864:	81a56e1f 	.word	0x81a56e1f
 800b868:	43500000 	.word	0x43500000
 800b86c:	ffff3cb0 	.word	0xffff3cb0
 800b870:	3c900000 	.word	0x3c900000

0800b874 <fabsf>:
 800b874:	ee10 3a10 	vmov	r3, s0
 800b878:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b87c:	ee00 3a10 	vmov	s0, r3
 800b880:	4770      	bx	lr
	...

0800b884 <floorf>:
 800b884:	ee10 3a10 	vmov	r3, s0
 800b888:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800b88c:	3a7f      	subs	r2, #127	; 0x7f
 800b88e:	2a16      	cmp	r2, #22
 800b890:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b894:	dc2a      	bgt.n	800b8ec <floorf+0x68>
 800b896:	2a00      	cmp	r2, #0
 800b898:	da11      	bge.n	800b8be <floorf+0x3a>
 800b89a:	eddf 7a18 	vldr	s15, [pc, #96]	; 800b8fc <floorf+0x78>
 800b89e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b8a2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b8a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8aa:	dd05      	ble.n	800b8b8 <floorf+0x34>
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	da23      	bge.n	800b8f8 <floorf+0x74>
 800b8b0:	4a13      	ldr	r2, [pc, #76]	; (800b900 <floorf+0x7c>)
 800b8b2:	2900      	cmp	r1, #0
 800b8b4:	bf18      	it	ne
 800b8b6:	4613      	movne	r3, r2
 800b8b8:	ee00 3a10 	vmov	s0, r3
 800b8bc:	4770      	bx	lr
 800b8be:	4911      	ldr	r1, [pc, #68]	; (800b904 <floorf+0x80>)
 800b8c0:	4111      	asrs	r1, r2
 800b8c2:	420b      	tst	r3, r1
 800b8c4:	d0fa      	beq.n	800b8bc <floorf+0x38>
 800b8c6:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800b8fc <floorf+0x78>
 800b8ca:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b8ce:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b8d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8d6:	ddef      	ble.n	800b8b8 <floorf+0x34>
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	bfbe      	ittt	lt
 800b8dc:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800b8e0:	fa40 f202 	asrlt.w	r2, r0, r2
 800b8e4:	189b      	addlt	r3, r3, r2
 800b8e6:	ea23 0301 	bic.w	r3, r3, r1
 800b8ea:	e7e5      	b.n	800b8b8 <floorf+0x34>
 800b8ec:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800b8f0:	d3e4      	bcc.n	800b8bc <floorf+0x38>
 800b8f2:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b8f6:	4770      	bx	lr
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	e7dd      	b.n	800b8b8 <floorf+0x34>
 800b8fc:	7149f2ca 	.word	0x7149f2ca
 800b900:	bf800000 	.word	0xbf800000
 800b904:	007fffff 	.word	0x007fffff

0800b908 <scalbnf>:
 800b908:	ee10 3a10 	vmov	r3, s0
 800b90c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800b910:	d025      	beq.n	800b95e <scalbnf+0x56>
 800b912:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800b916:	d302      	bcc.n	800b91e <scalbnf+0x16>
 800b918:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b91c:	4770      	bx	lr
 800b91e:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800b922:	d122      	bne.n	800b96a <scalbnf+0x62>
 800b924:	4b2a      	ldr	r3, [pc, #168]	; (800b9d0 <scalbnf+0xc8>)
 800b926:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800b9d4 <scalbnf+0xcc>
 800b92a:	4298      	cmp	r0, r3
 800b92c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b930:	db16      	blt.n	800b960 <scalbnf+0x58>
 800b932:	ee10 3a10 	vmov	r3, s0
 800b936:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800b93a:	3a19      	subs	r2, #25
 800b93c:	4402      	add	r2, r0
 800b93e:	2afe      	cmp	r2, #254	; 0xfe
 800b940:	dd15      	ble.n	800b96e <scalbnf+0x66>
 800b942:	ee10 3a10 	vmov	r3, s0
 800b946:	eddf 7a24 	vldr	s15, [pc, #144]	; 800b9d8 <scalbnf+0xd0>
 800b94a:	eddf 6a24 	vldr	s13, [pc, #144]	; 800b9dc <scalbnf+0xd4>
 800b94e:	2b00      	cmp	r3, #0
 800b950:	eeb0 7a67 	vmov.f32	s14, s15
 800b954:	bfb8      	it	lt
 800b956:	eef0 7a66 	vmovlt.f32	s15, s13
 800b95a:	ee27 0a27 	vmul.f32	s0, s14, s15
 800b95e:	4770      	bx	lr
 800b960:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800b9e0 <scalbnf+0xd8>
 800b964:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b968:	4770      	bx	lr
 800b96a:	0dd2      	lsrs	r2, r2, #23
 800b96c:	e7e6      	b.n	800b93c <scalbnf+0x34>
 800b96e:	2a00      	cmp	r2, #0
 800b970:	dd06      	ble.n	800b980 <scalbnf+0x78>
 800b972:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b976:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800b97a:	ee00 3a10 	vmov	s0, r3
 800b97e:	4770      	bx	lr
 800b980:	f112 0f16 	cmn.w	r2, #22
 800b984:	da1a      	bge.n	800b9bc <scalbnf+0xb4>
 800b986:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b98a:	4298      	cmp	r0, r3
 800b98c:	ee10 3a10 	vmov	r3, s0
 800b990:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b994:	dd0a      	ble.n	800b9ac <scalbnf+0xa4>
 800b996:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800b9d8 <scalbnf+0xd0>
 800b99a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800b9dc <scalbnf+0xd4>
 800b99e:	eef0 7a40 	vmov.f32	s15, s0
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	bf18      	it	ne
 800b9a6:	eeb0 0a47 	vmovne.f32	s0, s14
 800b9aa:	e7db      	b.n	800b964 <scalbnf+0x5c>
 800b9ac:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800b9e0 <scalbnf+0xd8>
 800b9b0:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800b9e4 <scalbnf+0xdc>
 800b9b4:	eef0 7a40 	vmov.f32	s15, s0
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	e7f3      	b.n	800b9a4 <scalbnf+0x9c>
 800b9bc:	3219      	adds	r2, #25
 800b9be:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b9c2:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800b9c6:	eddf 7a08 	vldr	s15, [pc, #32]	; 800b9e8 <scalbnf+0xe0>
 800b9ca:	ee07 3a10 	vmov	s14, r3
 800b9ce:	e7c4      	b.n	800b95a <scalbnf+0x52>
 800b9d0:	ffff3cb0 	.word	0xffff3cb0
 800b9d4:	4c000000 	.word	0x4c000000
 800b9d8:	7149f2ca 	.word	0x7149f2ca
 800b9dc:	f149f2ca 	.word	0xf149f2ca
 800b9e0:	0da24260 	.word	0x0da24260
 800b9e4:	8da24260 	.word	0x8da24260
 800b9e8:	33000000 	.word	0x33000000

0800b9ec <abort>:
 800b9ec:	b508      	push	{r3, lr}
 800b9ee:	2006      	movs	r0, #6
 800b9f0:	f000 f874 	bl	800badc <raise>
 800b9f4:	2001      	movs	r0, #1
 800b9f6:	f7fa ffd1 	bl	800699c <_exit>
	...

0800b9fc <__errno>:
 800b9fc:	4b01      	ldr	r3, [pc, #4]	; (800ba04 <__errno+0x8>)
 800b9fe:	6818      	ldr	r0, [r3, #0]
 800ba00:	4770      	bx	lr
 800ba02:	bf00      	nop
 800ba04:	20000010 	.word	0x20000010

0800ba08 <__libc_init_array>:
 800ba08:	b570      	push	{r4, r5, r6, lr}
 800ba0a:	4d0d      	ldr	r5, [pc, #52]	; (800ba40 <__libc_init_array+0x38>)
 800ba0c:	4c0d      	ldr	r4, [pc, #52]	; (800ba44 <__libc_init_array+0x3c>)
 800ba0e:	1b64      	subs	r4, r4, r5
 800ba10:	10a4      	asrs	r4, r4, #2
 800ba12:	2600      	movs	r6, #0
 800ba14:	42a6      	cmp	r6, r4
 800ba16:	d109      	bne.n	800ba2c <__libc_init_array+0x24>
 800ba18:	4d0b      	ldr	r5, [pc, #44]	; (800ba48 <__libc_init_array+0x40>)
 800ba1a:	4c0c      	ldr	r4, [pc, #48]	; (800ba4c <__libc_init_array+0x44>)
 800ba1c:	f000 f9b0 	bl	800bd80 <_init>
 800ba20:	1b64      	subs	r4, r4, r5
 800ba22:	10a4      	asrs	r4, r4, #2
 800ba24:	2600      	movs	r6, #0
 800ba26:	42a6      	cmp	r6, r4
 800ba28:	d105      	bne.n	800ba36 <__libc_init_array+0x2e>
 800ba2a:	bd70      	pop	{r4, r5, r6, pc}
 800ba2c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba30:	4798      	blx	r3
 800ba32:	3601      	adds	r6, #1
 800ba34:	e7ee      	b.n	800ba14 <__libc_init_array+0xc>
 800ba36:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba3a:	4798      	blx	r3
 800ba3c:	3601      	adds	r6, #1
 800ba3e:	e7f2      	b.n	800ba26 <__libc_init_array+0x1e>
 800ba40:	0800c8b8 	.word	0x0800c8b8
 800ba44:	0800c8b8 	.word	0x0800c8b8
 800ba48:	0800c8b8 	.word	0x0800c8b8
 800ba4c:	0800c8c0 	.word	0x0800c8c0

0800ba50 <memcpy>:
 800ba50:	440a      	add	r2, r1
 800ba52:	4291      	cmp	r1, r2
 800ba54:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800ba58:	d100      	bne.n	800ba5c <memcpy+0xc>
 800ba5a:	4770      	bx	lr
 800ba5c:	b510      	push	{r4, lr}
 800ba5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba62:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ba66:	4291      	cmp	r1, r2
 800ba68:	d1f9      	bne.n	800ba5e <memcpy+0xe>
 800ba6a:	bd10      	pop	{r4, pc}

0800ba6c <memset>:
 800ba6c:	4402      	add	r2, r0
 800ba6e:	4603      	mov	r3, r0
 800ba70:	4293      	cmp	r3, r2
 800ba72:	d100      	bne.n	800ba76 <memset+0xa>
 800ba74:	4770      	bx	lr
 800ba76:	f803 1b01 	strb.w	r1, [r3], #1
 800ba7a:	e7f9      	b.n	800ba70 <memset+0x4>

0800ba7c <realloc>:
 800ba7c:	4b02      	ldr	r3, [pc, #8]	; (800ba88 <realloc+0xc>)
 800ba7e:	460a      	mov	r2, r1
 800ba80:	4601      	mov	r1, r0
 800ba82:	6818      	ldr	r0, [r3, #0]
 800ba84:	f000 b8da 	b.w	800bc3c <_realloc_r>
 800ba88:	20000010 	.word	0x20000010

0800ba8c <_raise_r>:
 800ba8c:	291f      	cmp	r1, #31
 800ba8e:	b538      	push	{r3, r4, r5, lr}
 800ba90:	4604      	mov	r4, r0
 800ba92:	460d      	mov	r5, r1
 800ba94:	d904      	bls.n	800baa0 <_raise_r+0x14>
 800ba96:	2316      	movs	r3, #22
 800ba98:	6003      	str	r3, [r0, #0]
 800ba9a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ba9e:	bd38      	pop	{r3, r4, r5, pc}
 800baa0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800baa2:	b112      	cbz	r2, 800baaa <_raise_r+0x1e>
 800baa4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800baa8:	b94b      	cbnz	r3, 800babe <_raise_r+0x32>
 800baaa:	4620      	mov	r0, r4
 800baac:	f000 f830 	bl	800bb10 <_getpid_r>
 800bab0:	462a      	mov	r2, r5
 800bab2:	4601      	mov	r1, r0
 800bab4:	4620      	mov	r0, r4
 800bab6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800baba:	f000 b817 	b.w	800baec <_kill_r>
 800babe:	2b01      	cmp	r3, #1
 800bac0:	d00a      	beq.n	800bad8 <_raise_r+0x4c>
 800bac2:	1c59      	adds	r1, r3, #1
 800bac4:	d103      	bne.n	800bace <_raise_r+0x42>
 800bac6:	2316      	movs	r3, #22
 800bac8:	6003      	str	r3, [r0, #0]
 800baca:	2001      	movs	r0, #1
 800bacc:	e7e7      	b.n	800ba9e <_raise_r+0x12>
 800bace:	2400      	movs	r4, #0
 800bad0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bad4:	4628      	mov	r0, r5
 800bad6:	4798      	blx	r3
 800bad8:	2000      	movs	r0, #0
 800bada:	e7e0      	b.n	800ba9e <_raise_r+0x12>

0800badc <raise>:
 800badc:	4b02      	ldr	r3, [pc, #8]	; (800bae8 <raise+0xc>)
 800bade:	4601      	mov	r1, r0
 800bae0:	6818      	ldr	r0, [r3, #0]
 800bae2:	f7ff bfd3 	b.w	800ba8c <_raise_r>
 800bae6:	bf00      	nop
 800bae8:	20000010 	.word	0x20000010

0800baec <_kill_r>:
 800baec:	b538      	push	{r3, r4, r5, lr}
 800baee:	4d07      	ldr	r5, [pc, #28]	; (800bb0c <_kill_r+0x20>)
 800baf0:	2300      	movs	r3, #0
 800baf2:	4604      	mov	r4, r0
 800baf4:	4608      	mov	r0, r1
 800baf6:	4611      	mov	r1, r2
 800baf8:	602b      	str	r3, [r5, #0]
 800bafa:	f7fa ff3f 	bl	800697c <_kill>
 800bafe:	1c43      	adds	r3, r0, #1
 800bb00:	d102      	bne.n	800bb08 <_kill_r+0x1c>
 800bb02:	682b      	ldr	r3, [r5, #0]
 800bb04:	b103      	cbz	r3, 800bb08 <_kill_r+0x1c>
 800bb06:	6023      	str	r3, [r4, #0]
 800bb08:	bd38      	pop	{r3, r4, r5, pc}
 800bb0a:	bf00      	nop
 800bb0c:	20002eac 	.word	0x20002eac

0800bb10 <_getpid_r>:
 800bb10:	f7fa bf2c 	b.w	800696c <_getpid>

0800bb14 <sbrk_aligned>:
 800bb14:	b570      	push	{r4, r5, r6, lr}
 800bb16:	4e0e      	ldr	r6, [pc, #56]	; (800bb50 <sbrk_aligned+0x3c>)
 800bb18:	460c      	mov	r4, r1
 800bb1a:	6831      	ldr	r1, [r6, #0]
 800bb1c:	4605      	mov	r5, r0
 800bb1e:	b911      	cbnz	r1, 800bb26 <sbrk_aligned+0x12>
 800bb20:	f000 f8bc 	bl	800bc9c <_sbrk_r>
 800bb24:	6030      	str	r0, [r6, #0]
 800bb26:	4621      	mov	r1, r4
 800bb28:	4628      	mov	r0, r5
 800bb2a:	f000 f8b7 	bl	800bc9c <_sbrk_r>
 800bb2e:	1c43      	adds	r3, r0, #1
 800bb30:	d00a      	beq.n	800bb48 <sbrk_aligned+0x34>
 800bb32:	1cc4      	adds	r4, r0, #3
 800bb34:	f024 0403 	bic.w	r4, r4, #3
 800bb38:	42a0      	cmp	r0, r4
 800bb3a:	d007      	beq.n	800bb4c <sbrk_aligned+0x38>
 800bb3c:	1a21      	subs	r1, r4, r0
 800bb3e:	4628      	mov	r0, r5
 800bb40:	f000 f8ac 	bl	800bc9c <_sbrk_r>
 800bb44:	3001      	adds	r0, #1
 800bb46:	d101      	bne.n	800bb4c <sbrk_aligned+0x38>
 800bb48:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800bb4c:	4620      	mov	r0, r4
 800bb4e:	bd70      	pop	{r4, r5, r6, pc}
 800bb50:	20002ea8 	.word	0x20002ea8

0800bb54 <_malloc_r>:
 800bb54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb58:	1ccd      	adds	r5, r1, #3
 800bb5a:	f025 0503 	bic.w	r5, r5, #3
 800bb5e:	3508      	adds	r5, #8
 800bb60:	2d0c      	cmp	r5, #12
 800bb62:	bf38      	it	cc
 800bb64:	250c      	movcc	r5, #12
 800bb66:	2d00      	cmp	r5, #0
 800bb68:	4607      	mov	r7, r0
 800bb6a:	db01      	blt.n	800bb70 <_malloc_r+0x1c>
 800bb6c:	42a9      	cmp	r1, r5
 800bb6e:	d905      	bls.n	800bb7c <_malloc_r+0x28>
 800bb70:	230c      	movs	r3, #12
 800bb72:	603b      	str	r3, [r7, #0]
 800bb74:	2600      	movs	r6, #0
 800bb76:	4630      	mov	r0, r6
 800bb78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb7c:	4e2e      	ldr	r6, [pc, #184]	; (800bc38 <_malloc_r+0xe4>)
 800bb7e:	f000 f89d 	bl	800bcbc <__malloc_lock>
 800bb82:	6833      	ldr	r3, [r6, #0]
 800bb84:	461c      	mov	r4, r3
 800bb86:	bb34      	cbnz	r4, 800bbd6 <_malloc_r+0x82>
 800bb88:	4629      	mov	r1, r5
 800bb8a:	4638      	mov	r0, r7
 800bb8c:	f7ff ffc2 	bl	800bb14 <sbrk_aligned>
 800bb90:	1c43      	adds	r3, r0, #1
 800bb92:	4604      	mov	r4, r0
 800bb94:	d14d      	bne.n	800bc32 <_malloc_r+0xde>
 800bb96:	6834      	ldr	r4, [r6, #0]
 800bb98:	4626      	mov	r6, r4
 800bb9a:	2e00      	cmp	r6, #0
 800bb9c:	d140      	bne.n	800bc20 <_malloc_r+0xcc>
 800bb9e:	6823      	ldr	r3, [r4, #0]
 800bba0:	4631      	mov	r1, r6
 800bba2:	4638      	mov	r0, r7
 800bba4:	eb04 0803 	add.w	r8, r4, r3
 800bba8:	f000 f878 	bl	800bc9c <_sbrk_r>
 800bbac:	4580      	cmp	r8, r0
 800bbae:	d13a      	bne.n	800bc26 <_malloc_r+0xd2>
 800bbb0:	6821      	ldr	r1, [r4, #0]
 800bbb2:	3503      	adds	r5, #3
 800bbb4:	1a6d      	subs	r5, r5, r1
 800bbb6:	f025 0503 	bic.w	r5, r5, #3
 800bbba:	3508      	adds	r5, #8
 800bbbc:	2d0c      	cmp	r5, #12
 800bbbe:	bf38      	it	cc
 800bbc0:	250c      	movcc	r5, #12
 800bbc2:	4629      	mov	r1, r5
 800bbc4:	4638      	mov	r0, r7
 800bbc6:	f7ff ffa5 	bl	800bb14 <sbrk_aligned>
 800bbca:	3001      	adds	r0, #1
 800bbcc:	d02b      	beq.n	800bc26 <_malloc_r+0xd2>
 800bbce:	6823      	ldr	r3, [r4, #0]
 800bbd0:	442b      	add	r3, r5
 800bbd2:	6023      	str	r3, [r4, #0]
 800bbd4:	e00e      	b.n	800bbf4 <_malloc_r+0xa0>
 800bbd6:	6822      	ldr	r2, [r4, #0]
 800bbd8:	1b52      	subs	r2, r2, r5
 800bbda:	d41e      	bmi.n	800bc1a <_malloc_r+0xc6>
 800bbdc:	2a0b      	cmp	r2, #11
 800bbde:	d916      	bls.n	800bc0e <_malloc_r+0xba>
 800bbe0:	1961      	adds	r1, r4, r5
 800bbe2:	42a3      	cmp	r3, r4
 800bbe4:	6025      	str	r5, [r4, #0]
 800bbe6:	bf18      	it	ne
 800bbe8:	6059      	strne	r1, [r3, #4]
 800bbea:	6863      	ldr	r3, [r4, #4]
 800bbec:	bf08      	it	eq
 800bbee:	6031      	streq	r1, [r6, #0]
 800bbf0:	5162      	str	r2, [r4, r5]
 800bbf2:	604b      	str	r3, [r1, #4]
 800bbf4:	4638      	mov	r0, r7
 800bbf6:	f104 060b 	add.w	r6, r4, #11
 800bbfa:	f000 f865 	bl	800bcc8 <__malloc_unlock>
 800bbfe:	f026 0607 	bic.w	r6, r6, #7
 800bc02:	1d23      	adds	r3, r4, #4
 800bc04:	1af2      	subs	r2, r6, r3
 800bc06:	d0b6      	beq.n	800bb76 <_malloc_r+0x22>
 800bc08:	1b9b      	subs	r3, r3, r6
 800bc0a:	50a3      	str	r3, [r4, r2]
 800bc0c:	e7b3      	b.n	800bb76 <_malloc_r+0x22>
 800bc0e:	6862      	ldr	r2, [r4, #4]
 800bc10:	42a3      	cmp	r3, r4
 800bc12:	bf0c      	ite	eq
 800bc14:	6032      	streq	r2, [r6, #0]
 800bc16:	605a      	strne	r2, [r3, #4]
 800bc18:	e7ec      	b.n	800bbf4 <_malloc_r+0xa0>
 800bc1a:	4623      	mov	r3, r4
 800bc1c:	6864      	ldr	r4, [r4, #4]
 800bc1e:	e7b2      	b.n	800bb86 <_malloc_r+0x32>
 800bc20:	4634      	mov	r4, r6
 800bc22:	6876      	ldr	r6, [r6, #4]
 800bc24:	e7b9      	b.n	800bb9a <_malloc_r+0x46>
 800bc26:	230c      	movs	r3, #12
 800bc28:	603b      	str	r3, [r7, #0]
 800bc2a:	4638      	mov	r0, r7
 800bc2c:	f000 f84c 	bl	800bcc8 <__malloc_unlock>
 800bc30:	e7a1      	b.n	800bb76 <_malloc_r+0x22>
 800bc32:	6025      	str	r5, [r4, #0]
 800bc34:	e7de      	b.n	800bbf4 <_malloc_r+0xa0>
 800bc36:	bf00      	nop
 800bc38:	20002ea4 	.word	0x20002ea4

0800bc3c <_realloc_r>:
 800bc3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc40:	4680      	mov	r8, r0
 800bc42:	4614      	mov	r4, r2
 800bc44:	460e      	mov	r6, r1
 800bc46:	b921      	cbnz	r1, 800bc52 <_realloc_r+0x16>
 800bc48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc4c:	4611      	mov	r1, r2
 800bc4e:	f7ff bf81 	b.w	800bb54 <_malloc_r>
 800bc52:	b92a      	cbnz	r2, 800bc60 <_realloc_r+0x24>
 800bc54:	f000 f83e 	bl	800bcd4 <_free_r>
 800bc58:	4625      	mov	r5, r4
 800bc5a:	4628      	mov	r0, r5
 800bc5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc60:	f000 f884 	bl	800bd6c <_malloc_usable_size_r>
 800bc64:	4284      	cmp	r4, r0
 800bc66:	4607      	mov	r7, r0
 800bc68:	d802      	bhi.n	800bc70 <_realloc_r+0x34>
 800bc6a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bc6e:	d812      	bhi.n	800bc96 <_realloc_r+0x5a>
 800bc70:	4621      	mov	r1, r4
 800bc72:	4640      	mov	r0, r8
 800bc74:	f7ff ff6e 	bl	800bb54 <_malloc_r>
 800bc78:	4605      	mov	r5, r0
 800bc7a:	2800      	cmp	r0, #0
 800bc7c:	d0ed      	beq.n	800bc5a <_realloc_r+0x1e>
 800bc7e:	42bc      	cmp	r4, r7
 800bc80:	4622      	mov	r2, r4
 800bc82:	4631      	mov	r1, r6
 800bc84:	bf28      	it	cs
 800bc86:	463a      	movcs	r2, r7
 800bc88:	f7ff fee2 	bl	800ba50 <memcpy>
 800bc8c:	4631      	mov	r1, r6
 800bc8e:	4640      	mov	r0, r8
 800bc90:	f000 f820 	bl	800bcd4 <_free_r>
 800bc94:	e7e1      	b.n	800bc5a <_realloc_r+0x1e>
 800bc96:	4635      	mov	r5, r6
 800bc98:	e7df      	b.n	800bc5a <_realloc_r+0x1e>
	...

0800bc9c <_sbrk_r>:
 800bc9c:	b538      	push	{r3, r4, r5, lr}
 800bc9e:	4d06      	ldr	r5, [pc, #24]	; (800bcb8 <_sbrk_r+0x1c>)
 800bca0:	2300      	movs	r3, #0
 800bca2:	4604      	mov	r4, r0
 800bca4:	4608      	mov	r0, r1
 800bca6:	602b      	str	r3, [r5, #0]
 800bca8:	f7fa fe82 	bl	80069b0 <_sbrk>
 800bcac:	1c43      	adds	r3, r0, #1
 800bcae:	d102      	bne.n	800bcb6 <_sbrk_r+0x1a>
 800bcb0:	682b      	ldr	r3, [r5, #0]
 800bcb2:	b103      	cbz	r3, 800bcb6 <_sbrk_r+0x1a>
 800bcb4:	6023      	str	r3, [r4, #0]
 800bcb6:	bd38      	pop	{r3, r4, r5, pc}
 800bcb8:	20002eac 	.word	0x20002eac

0800bcbc <__malloc_lock>:
 800bcbc:	4801      	ldr	r0, [pc, #4]	; (800bcc4 <__malloc_lock+0x8>)
 800bcbe:	f000 b85d 	b.w	800bd7c <__retarget_lock_acquire_recursive>
 800bcc2:	bf00      	nop
 800bcc4:	20002eb0 	.word	0x20002eb0

0800bcc8 <__malloc_unlock>:
 800bcc8:	4801      	ldr	r0, [pc, #4]	; (800bcd0 <__malloc_unlock+0x8>)
 800bcca:	f000 b858 	b.w	800bd7e <__retarget_lock_release_recursive>
 800bcce:	bf00      	nop
 800bcd0:	20002eb0 	.word	0x20002eb0

0800bcd4 <_free_r>:
 800bcd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bcd6:	2900      	cmp	r1, #0
 800bcd8:	d044      	beq.n	800bd64 <_free_r+0x90>
 800bcda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bcde:	9001      	str	r0, [sp, #4]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	f1a1 0404 	sub.w	r4, r1, #4
 800bce6:	bfb8      	it	lt
 800bce8:	18e4      	addlt	r4, r4, r3
 800bcea:	f7ff ffe7 	bl	800bcbc <__malloc_lock>
 800bcee:	4a1e      	ldr	r2, [pc, #120]	; (800bd68 <_free_r+0x94>)
 800bcf0:	9801      	ldr	r0, [sp, #4]
 800bcf2:	6813      	ldr	r3, [r2, #0]
 800bcf4:	b933      	cbnz	r3, 800bd04 <_free_r+0x30>
 800bcf6:	6063      	str	r3, [r4, #4]
 800bcf8:	6014      	str	r4, [r2, #0]
 800bcfa:	b003      	add	sp, #12
 800bcfc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bd00:	f7ff bfe2 	b.w	800bcc8 <__malloc_unlock>
 800bd04:	42a3      	cmp	r3, r4
 800bd06:	d908      	bls.n	800bd1a <_free_r+0x46>
 800bd08:	6825      	ldr	r5, [r4, #0]
 800bd0a:	1961      	adds	r1, r4, r5
 800bd0c:	428b      	cmp	r3, r1
 800bd0e:	bf01      	itttt	eq
 800bd10:	6819      	ldreq	r1, [r3, #0]
 800bd12:	685b      	ldreq	r3, [r3, #4]
 800bd14:	1949      	addeq	r1, r1, r5
 800bd16:	6021      	streq	r1, [r4, #0]
 800bd18:	e7ed      	b.n	800bcf6 <_free_r+0x22>
 800bd1a:	461a      	mov	r2, r3
 800bd1c:	685b      	ldr	r3, [r3, #4]
 800bd1e:	b10b      	cbz	r3, 800bd24 <_free_r+0x50>
 800bd20:	42a3      	cmp	r3, r4
 800bd22:	d9fa      	bls.n	800bd1a <_free_r+0x46>
 800bd24:	6811      	ldr	r1, [r2, #0]
 800bd26:	1855      	adds	r5, r2, r1
 800bd28:	42a5      	cmp	r5, r4
 800bd2a:	d10b      	bne.n	800bd44 <_free_r+0x70>
 800bd2c:	6824      	ldr	r4, [r4, #0]
 800bd2e:	4421      	add	r1, r4
 800bd30:	1854      	adds	r4, r2, r1
 800bd32:	42a3      	cmp	r3, r4
 800bd34:	6011      	str	r1, [r2, #0]
 800bd36:	d1e0      	bne.n	800bcfa <_free_r+0x26>
 800bd38:	681c      	ldr	r4, [r3, #0]
 800bd3a:	685b      	ldr	r3, [r3, #4]
 800bd3c:	6053      	str	r3, [r2, #4]
 800bd3e:	4421      	add	r1, r4
 800bd40:	6011      	str	r1, [r2, #0]
 800bd42:	e7da      	b.n	800bcfa <_free_r+0x26>
 800bd44:	d902      	bls.n	800bd4c <_free_r+0x78>
 800bd46:	230c      	movs	r3, #12
 800bd48:	6003      	str	r3, [r0, #0]
 800bd4a:	e7d6      	b.n	800bcfa <_free_r+0x26>
 800bd4c:	6825      	ldr	r5, [r4, #0]
 800bd4e:	1961      	adds	r1, r4, r5
 800bd50:	428b      	cmp	r3, r1
 800bd52:	bf04      	itt	eq
 800bd54:	6819      	ldreq	r1, [r3, #0]
 800bd56:	685b      	ldreq	r3, [r3, #4]
 800bd58:	6063      	str	r3, [r4, #4]
 800bd5a:	bf04      	itt	eq
 800bd5c:	1949      	addeq	r1, r1, r5
 800bd5e:	6021      	streq	r1, [r4, #0]
 800bd60:	6054      	str	r4, [r2, #4]
 800bd62:	e7ca      	b.n	800bcfa <_free_r+0x26>
 800bd64:	b003      	add	sp, #12
 800bd66:	bd30      	pop	{r4, r5, pc}
 800bd68:	20002ea4 	.word	0x20002ea4

0800bd6c <_malloc_usable_size_r>:
 800bd6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bd70:	1f18      	subs	r0, r3, #4
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	bfbc      	itt	lt
 800bd76:	580b      	ldrlt	r3, [r1, r0]
 800bd78:	18c0      	addlt	r0, r0, r3
 800bd7a:	4770      	bx	lr

0800bd7c <__retarget_lock_acquire_recursive>:
 800bd7c:	4770      	bx	lr

0800bd7e <__retarget_lock_release_recursive>:
 800bd7e:	4770      	bx	lr

0800bd80 <_init>:
 800bd80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd82:	bf00      	nop
 800bd84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd86:	bc08      	pop	{r3}
 800bd88:	469e      	mov	lr, r3
 800bd8a:	4770      	bx	lr

0800bd8c <_fini>:
 800bd8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd8e:	bf00      	nop
 800bd90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd92:	bc08      	pop	{r3}
 800bd94:	469e      	mov	lr, r3
 800bd96:	4770      	bx	lr
